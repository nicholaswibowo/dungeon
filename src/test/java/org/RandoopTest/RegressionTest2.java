package org.RandoopTest;
import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest2 {

  public static boolean debug = false;

  @Test
  public void test001() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test001"); }

    org.mafagafogigante.dungeon.game.Id id0 = null;
    org.mafagafogigante.dungeon.entity.items.BookComponent bookComponent2 = new org.mafagafogigante.dungeon.entity.items.BookComponent(id0, "Night");
    org.mafagafogigante.dungeon.game.Id id3 = bookComponent2.getSpellId();
    int i4 = bookComponent2.getTimeToRead();
    org.mafagafogigante.dungeon.game.Id id5 = bookComponent2.getSpellId();
    java.lang.String str6 = bookComponent2.getText();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(id3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(id5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "Night"+ "'", str6.equals("Night"));

  }

  @Test
  public void test002() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test002"); }

    org.mafagafogigante.dungeon.entity.creatures.Creature creature1 = null;
    org.mafagafogigante.dungeon.entity.creatures.CreatureHealth creatureHealth2 = org.mafagafogigante.dungeon.entity.creatures.CreatureHealth.makeCreatureHealth(100, creature1);
    creatureHealth2.incrementBy(57);
    creatureHealth2.incrementBy(32);
    boolean b7 = creatureHealth2.isFull();
    org.mafagafogigante.dungeon.entity.creatures.HealthState healthState8 = creatureHealth2.getHealthState();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(creatureHealth2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    org.junit.Assert.assertTrue("'" + healthState8 + "' != '" + org.mafagafogigante.dungeon.entity.creatures.HealthState.UNINJURED + "'", healthState8.equals(org.mafagafogigante.dungeon.entity.creatures.HealthState.UNINJURED));

  }

  @Test
  public void test003() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test003"); }

    org.mafagafogigante.dungeon.entity.items.Item[] item_array0 = new org.mafagafogigante.dungeon.entity.items.Item[] {  };
    java.util.ArrayList<org.mafagafogigante.dungeon.entity.items.Item> arraylist_item1 = new java.util.ArrayList<org.mafagafogigante.dungeon.entity.items.Item>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.mafagafogigante.dungeon.entity.items.Item>)arraylist_item1, item_array0);
    org.mafagafogigante.dungeon.game.DungeonString dungeonString4 = new org.mafagafogigante.dungeon.game.DungeonString("hi!");
    java.lang.String[] str_array9 = new java.lang.String[] { "hi!", "Damaged", "BattleStatistics{records=CounterMap{map={}}}", "" };
    dungeonString4.append(str_array9);
    java.util.List<org.mafagafogigante.dungeon.entity.items.Item> list_item11 = org.mafagafogigante.dungeon.entity.creatures.HeroUtils.findItems((java.util.List<org.mafagafogigante.dungeon.entity.items.Item>)arraylist_item1, str_array9);
    org.mafagafogigante.dungeon.game.DungeonString dungeonString13 = new org.mafagafogigante.dungeon.game.DungeonString("hi!");
    java.lang.String[] str_array18 = new java.lang.String[] { "hi!", "Damaged", "BattleStatistics{records=CounterMap{map={}}}", "" };
    dungeonString13.append(str_array18);
    java.util.List<org.mafagafogigante.dungeon.entity.items.Item> list_item20 = org.mafagafogigante.dungeon.entity.creatures.HeroUtils.findItems((java.util.List<org.mafagafogigante.dungeon.entity.items.Item>)arraylist_item1, str_array18);
    java.lang.String[] str_array26 = new java.lang.String[] { "hi!", "visibilityCriteria=VisibilityCriteria{[]}", "visibilityCriteria=VisibilityCriteria{[]}", "Damaged", "hi!" };
    org.mafagafogigante.dungeon.util.Table table27 = new org.mafagafogigante.dungeon.util.Table(str_array26);
    java.util.List<org.mafagafogigante.dungeon.entity.items.Item> list_item28 = org.mafagafogigante.dungeon.entity.creatures.HeroUtils.findItems((java.util.List<org.mafagafogigante.dungeon.entity.items.Item>)arraylist_item1, str_array26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(item_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_item11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_item20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_item28);

  }

  @Test
  public void test004() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test004"); }

    org.mafagafogigante.dungeon.stats.WorldStatistics worldStatistics0 = new org.mafagafogigante.dungeon.stats.WorldStatistics();
    int i1 = worldStatistics0.getSpawnCount();
    int i2 = worldStatistics0.getLocationCount();
    // The following exception was thrown during execution in test generation
    try {
    org.mafagafogigante.dungeon.game.World world3 = new org.mafagafogigante.dungeon.game.World(worldStatistics0);
      org.junit.Assert.fail("Expected exception of type java.lang.NoClassDefFoundError");
    } catch (java.lang.NoClassDefFoundError e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 0);

  }

  @Test
  public void test005() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test005"); }

    java.lang.String[] str_array5 = new java.lang.String[] { "hi!", "visibilityCriteria=VisibilityCriteria{[]}", "visibilityCriteria=VisibilityCriteria{[]}", "Damaged", "hi!" };
    org.mafagafogigante.dungeon.util.Table table6 = new org.mafagafogigante.dungeon.util.Table(str_array5);
    org.mafagafogigante.dungeon.gui.WritingSpecifications writingSpecifications9 = new org.mafagafogigante.dungeon.gui.WritingSpecifications(false, 32);
    boolean b10 = writingSpecifications9.shouldWait();
    org.mafagafogigante.dungeon.io.Writer.write((org.mafagafogigante.dungeon.game.Writable)table6, writingSpecifications9);
    boolean b12 = writingSpecifications9.shouldWait();
    int i13 = writingSpecifications9.getWait();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 32);

  }

  @Test
  public void test006() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test006"); }

    org.mafagafogigante.dungeon.entity.creatures.Creature creature1 = null;
    org.mafagafogigante.dungeon.entity.creatures.CreatureHealth creatureHealth2 = org.mafagafogigante.dungeon.entity.creatures.CreatureHealth.makeCreatureHealth(100, creature1);
    boolean b3 = creatureHealth2.isAlive();
    // The following exception was thrown during execution in test generation
    try {
    creatureHealth2.decrementBy(17518);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(creatureHealth2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);

  }

  @Test
  public void test007() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test007"); }

    org.mafagafogigante.dungeon.date.Date date3 = new org.mafagafogigante.dungeon.date.Date(10L, 100L, 100L);
    org.mafagafogigante.dungeon.date.Date date7 = new org.mafagafogigante.dungeon.date.Date(10L, 100L, 100L);
    int i8 = date3.compareTo(date7);
    org.mafagafogigante.dungeon.game.PartOfDay partOfDay9 = org.mafagafogigante.dungeon.game.PartOfDay.getCorrespondingConstant(date3);
    java.lang.String[] str_array15 = new java.lang.String[] { "hi!", "visibilityCriteria=VisibilityCriteria{[]}", "visibilityCriteria=VisibilityCriteria{[]}", "Damaged", "hi!" };
    org.mafagafogigante.dungeon.util.Table table16 = new org.mafagafogigante.dungeon.util.Table(str_array15);
    java.util.List<org.mafagafogigante.dungeon.game.ColoredString> list_coloredString17 = table16.toColoredStringList();
    org.mafagafogigante.dungeon.game.ColoredString coloredString18 = org.mafagafogigante.dungeon.game.Random.select(list_coloredString17);
    boolean b19 = date3.equals((java.lang.Object)coloredString18);
    java.awt.Color color20 = coloredString18.getColor();
    java.lang.String str21 = coloredString18.getString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 0);
    org.junit.Assert.assertTrue("'" + partOfDay9 + "' != '" + org.mafagafogigante.dungeon.game.PartOfDay.MIDNIGHT + "'", partOfDay9.equals(org.mafagafogigante.dungeon.game.PartOfDay.MIDNIGHT));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_coloredString17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(coloredString18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "hi!|visibilityCriteria=VisibilityCriteria{[]} |visibilityCriteria=VisibilityCriteria{[]}|Damaged|hi!\n---|------------------------------------------|-----------------------------------------|-------|---\n"+ "'", str21.equals("hi!|visibilityCriteria=VisibilityCriteria{[]} |visibilityCriteria=VisibilityCriteria{[]}|Damaged|hi!\n---|------------------------------------------|-----------------------------------------|-------|---\n"));

  }

  @Test
  public void test008() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test008"); }

    org.mafagafogigante.dungeon.date.Date date3 = new org.mafagafogigante.dungeon.date.Date((long)97, (long)(byte)-1, (long)'#');
    org.mafagafogigante.dungeon.stats.BattleStatistics battleStatistics4 = new org.mafagafogigante.dungeon.stats.BattleStatistics();
    org.mafagafogigante.dungeon.achievements.BattleStatisticsRequirement battleStatisticsRequirement5 = null;
    boolean b6 = battleStatistics4.satisfies(battleStatisticsRequirement5);
    java.lang.String str7 = battleStatistics4.toString();
    org.mafagafogigante.dungeon.achievements.BattleStatisticsQuery battleStatisticsQuery8 = new org.mafagafogigante.dungeon.achievements.BattleStatisticsQuery();
    org.mafagafogigante.dungeon.achievements.BattleStatisticsRequirement battleStatisticsRequirement10 = new org.mafagafogigante.dungeon.achievements.BattleStatisticsRequirement(battleStatisticsQuery8, (int)(byte)100);
    boolean b11 = battleStatistics4.satisfies(battleStatisticsRequirement10);
    org.mafagafogigante.dungeon.util.CounterMap<org.mafagafogigante.dungeon.stats.CauseOfDeath> countermap_causeOfDeath12 = battleStatistics4.getKillsByCauseOfDeath();
    org.mafagafogigante.dungeon.util.CounterMap<org.mafagafogigante.dungeon.stats.CauseOfDeath> countermap_causeOfDeath13 = battleStatistics4.getKillsByCauseOfDeath();
    boolean b14 = date3.equals((java.lang.Object)countermap_causeOfDeath13);
    java.lang.String str15 = date3.toTimeString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "BattleStatistics{records=CounterMap{map={}}}"+ "'", str7.equals("BattleStatistics{records=CounterMap{map={}}}"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(countermap_causeOfDeath12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(countermap_causeOfDeath13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "00:00:00"+ "'", str15.equals("00:00:00"));

  }

  @Test
  public void test009() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test009"); }

    org.mafagafogigante.dungeon.game.Writable writable0 = null;
    org.mafagafogigante.dungeon.io.Writer.writeAndWait(writable0);

  }

  @Test
  public void test010() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test010"); }

    java.lang.String[] str_array2 = new java.lang.String[] { "", "" };
    org.mafagafogigante.dungeon.util.Table table3 = new org.mafagafogigante.dungeon.util.Table(str_array2);
    org.mafagafogigante.dungeon.io.Writer.write((org.mafagafogigante.dungeon.game.Writable)table3);
    table3.insertSeparator();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array2);

  }

  @Test
  public void test011() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test011"); }

    org.mafagafogigante.dungeon.commands.CommandHistory commandHistory0 = new org.mafagafogigante.dungeon.commands.CommandHistory();
    java.lang.String str2 = commandHistory0.getLastSimilarCommand("52 Nights");
    org.mafagafogigante.dungeon.commands.IssuedCommand issuedCommand3 = null;
    // The following exception was thrown during execution in test generation
    try {
    commandHistory0.addCommand(issuedCommand3);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str2);

  }

  @Test
  public void test012() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test012"); }

    org.mafagafogigante.dungeon.entity.Integrity integrity2 = new org.mafagafogigante.dungeon.entity.Integrity(1, 0);
    boolean b3 = integrity2.isMaximum();
    org.mafagafogigante.dungeon.entity.items.Item item4 = null;
    org.mafagafogigante.dungeon.entity.items.ItemIntegrity itemIntegrity5 = org.mafagafogigante.dungeon.entity.items.ItemIntegrity.makeItemIntegrity(integrity2, item4);
    org.mafagafogigante.dungeon.util.Percentage percentage6 = itemIntegrity5.toPercentage();
    boolean b7 = itemIntegrity5.isPerfect();
    boolean b8 = itemIntegrity5.isBroken();
    itemIntegrity5.incrementBy(43200);
    // The following exception was thrown during execution in test generation
    try {
    itemIntegrity5.decrementBy((int)' ');
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(itemIntegrity5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(percentage6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);

  }

  @Test
  public void test013() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test013"); }

    org.mafagafogigante.dungeon.schema.JsonRule jsonRule1 = org.mafagafogigante.dungeon.schema.rules.JsonRuleFactory.makeArraySizeRule(57);
    org.mafagafogigante.dungeon.schema.JsonRule jsonRule2 = org.mafagafogigante.dungeon.schema.rules.JsonRuleFactory.makeVariableArrayRule(jsonRule1);
    org.mafagafogigante.dungeon.schema.JsonRule jsonRule3 = org.mafagafogigante.dungeon.schema.rules.JsonRuleFactory.makeVariableArrayRule(jsonRule1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonRule1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonRule2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonRule3);

  }

  @Test
  public void test014() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test014"); }

    org.mafagafogigante.dungeon.game.Id id0 = null;
    org.mafagafogigante.dungeon.stats.CauseOfDeath causeOfDeath2 = org.mafagafogigante.dungeon.stats.CauseOfDeath.getUnarmedCauseOfDeath();
    org.mafagafogigante.dungeon.entity.creatures.HealthState healthState3 = org.mafagafogigante.dungeon.entity.creatures.HealthState.DEAD;
    boolean b4 = causeOfDeath2.equals((java.lang.Object)healthState3);
    java.lang.String[] str_array10 = new java.lang.String[] { "hi!", "visibilityCriteria=VisibilityCriteria{[]}", "visibilityCriteria=VisibilityCriteria{[]}", "Damaged", "hi!" };
    org.mafagafogigante.dungeon.util.Table table11 = new org.mafagafogigante.dungeon.util.Table(str_array10);
    java.util.List<org.mafagafogigante.dungeon.game.ColoredString> list_coloredString12 = table11.toColoredStringList();
    boolean b13 = causeOfDeath2.equals((java.lang.Object)table11);
    org.mafagafogigante.dungeon.game.PartOfDay partOfDay14 = org.mafagafogigante.dungeon.game.PartOfDay.NOON;
    org.mafagafogigante.dungeon.stats.BattleRecord battleRecord15 = new org.mafagafogigante.dungeon.stats.BattleRecord(id0, "East", causeOfDeath2, partOfDay14);
    org.mafagafogigante.dungeon.entity.items.ItemPreset itemPreset16 = new org.mafagafogigante.dungeon.entity.items.ItemPreset();
    org.mafagafogigante.dungeon.entity.Integrity integrity17 = itemPreset16.getIntegrity();
    org.mafagafogigante.dungeon.entity.Integrity integrity18 = null;
    itemPreset16.setIntegrity(integrity18);
    org.mafagafogigante.dungeon.entity.Integrity integrity20 = itemPreset16.getIntegrity();
    org.mafagafogigante.dungeon.util.Percentage percentage21 = itemPreset16.getHitRate();
    itemPreset16.setNutrition((int)(short)1);
    boolean b24 = battleRecord15.equals((java.lang.Object)itemPreset16);
    org.mafagafogigante.dungeon.stats.CauseOfDeath causeOfDeath25 = battleRecord15.getCauseOfDeath();
    org.mafagafogigante.dungeon.game.PartOfDay partOfDay26 = battleRecord15.getPartOfDay();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(causeOfDeath2);
    org.junit.Assert.assertTrue("'" + healthState3 + "' != '" + org.mafagafogigante.dungeon.entity.creatures.HealthState.DEAD + "'", healthState3.equals(org.mafagafogigante.dungeon.entity.creatures.HealthState.DEAD));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_coloredString12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    org.junit.Assert.assertTrue("'" + partOfDay14 + "' != '" + org.mafagafogigante.dungeon.game.PartOfDay.NOON + "'", partOfDay14.equals(org.mafagafogigante.dungeon.game.PartOfDay.NOON));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(integrity17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(integrity20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(percentage21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(causeOfDeath25);
    org.junit.Assert.assertTrue("'" + partOfDay26 + "' != '" + org.mafagafogigante.dungeon.game.PartOfDay.NOON + "'", partOfDay26.equals(org.mafagafogigante.dungeon.game.PartOfDay.NOON));

  }

  @Test
  public void test015() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test015"); }

    org.mafagafogigante.dungeon.world.Sky sky0 = org.mafagafogigante.dungeon.world.SkyFactory.makeDarrowmereSky();
    java.lang.String str1 = sky0.toString();
    java.lang.String str2 = sky0.toString();
    java.lang.String str3 = sky0.toString();
    java.lang.String str4 = sky0.toString();
    java.lang.String str5 = sky0.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sky0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Sky{astronomicalBodies=[the Sun, a large, golden, spherical body, Mino, a small, dull white spherical body, Sario, a very small, green-tinted, perfectly spherical body]}"+ "'", str1.equals("Sky{astronomicalBodies=[the Sun, a large, golden, spherical body, Mino, a small, dull white spherical body, Sario, a very small, green-tinted, perfectly spherical body]}"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "Sky{astronomicalBodies=[the Sun, a large, golden, spherical body, Mino, a small, dull white spherical body, Sario, a very small, green-tinted, perfectly spherical body]}"+ "'", str2.equals("Sky{astronomicalBodies=[the Sun, a large, golden, spherical body, Mino, a small, dull white spherical body, Sario, a very small, green-tinted, perfectly spherical body]}"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "Sky{astronomicalBodies=[the Sun, a large, golden, spherical body, Mino, a small, dull white spherical body, Sario, a very small, green-tinted, perfectly spherical body]}"+ "'", str3.equals("Sky{astronomicalBodies=[the Sun, a large, golden, spherical body, Mino, a small, dull white spherical body, Sario, a very small, green-tinted, perfectly spherical body]}"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "Sky{astronomicalBodies=[the Sun, a large, golden, spherical body, Mino, a small, dull white spherical body, Sario, a very small, green-tinted, perfectly spherical body]}"+ "'", str4.equals("Sky{astronomicalBodies=[the Sun, a large, golden, spherical body, Mino, a small, dull white spherical body, Sario, a very small, green-tinted, perfectly spherical body]}"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "Sky{astronomicalBodies=[the Sun, a large, golden, spherical body, Mino, a small, dull white spherical body, Sario, a very small, green-tinted, perfectly spherical body]}"+ "'", str5.equals("Sky{astronomicalBodies=[the Sun, a large, golden, spherical body, Mino, a small, dull white spherical body, Sario, a very small, green-tinted, perfectly spherical body]}"));

  }

  @Test
  public void test016() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test016"); }

    org.mafagafogigante.dungeon.entity.creatures.Hero hero0 = null;
    org.mafagafogigante.dungeon.entity.creatures.HeroSpellcaster heroSpellcaster1 = new org.mafagafogigante.dungeon.entity.creatures.HeroSpellcaster(hero0);
    java.util.List<org.mafagafogigante.dungeon.spells.Spell> list_spell2 = heroSpellcaster1.getSpellList();
    // The following exception was thrown during execution in test generation
    try {
    org.mafagafogigante.dungeon.spells.Spell spell3 = org.mafagafogigante.dungeon.game.Random.select(list_spell2);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_spell2);

  }

  @Test
  public void test017() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test017"); }

    org.mafagafogigante.dungeon.game.Direction direction1 = org.mafagafogigante.dungeon.game.Direction.fromAbbreviation("LocationDescription{symbol=a, color=null, info='Night'}");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(direction1);

  }

  @Test
  public void test018() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test018"); }

    org.mafagafogigante.dungeon.achievements.BattleStatisticsQuery battleStatisticsQuery0 = new org.mafagafogigante.dungeon.achievements.BattleStatisticsQuery();
    java.lang.String str1 = battleStatisticsQuery0.toString();
    org.mafagafogigante.dungeon.game.Id id2 = null;
    org.mafagafogigante.dungeon.achievements.BattleStatisticsQuery battleStatisticsQuery4 = new org.mafagafogigante.dungeon.achievements.BattleStatisticsQuery();
    org.mafagafogigante.dungeon.stats.CauseOfDeath causeOfDeath5 = org.mafagafogigante.dungeon.stats.CauseOfDeath.getUnarmedCauseOfDeath();
    battleStatisticsQuery4.setCauseOfDeath(causeOfDeath5);
    org.mafagafogigante.dungeon.game.PartOfDay partOfDay7 = org.mafagafogigante.dungeon.game.PartOfDay.NIGHT;
    org.mafagafogigante.dungeon.stats.BattleRecord battleRecord8 = new org.mafagafogigante.dungeon.stats.BattleRecord(id2, "", causeOfDeath5, partOfDay7);
    java.lang.String str9 = battleRecord8.getType();
    org.mafagafogigante.dungeon.game.Id id10 = battleRecord8.getId();
    boolean b11 = battleStatisticsQuery0.matches(battleRecord8);
    org.mafagafogigante.dungeon.game.Id id12 = battleRecord8.getId();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "BattleStatisticsQuery{id=null, type='null', causeOfDeath=null, partOfDay=null}"+ "'", str1.equals("BattleStatisticsQuery{id=null, type='null', causeOfDeath=null, partOfDay=null}"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(causeOfDeath5);
    org.junit.Assert.assertTrue("'" + partOfDay7 + "' != '" + org.mafagafogigante.dungeon.game.PartOfDay.NIGHT + "'", partOfDay7.equals(org.mafagafogigante.dungeon.game.PartOfDay.NIGHT));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + ""+ "'", str9.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(id10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(id12);

  }

  @Test
  public void test019() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test019"); }

    org.mafagafogigante.dungeon.entity.items.ItemPreset itemPreset0 = new org.mafagafogigante.dungeon.entity.items.ItemPreset();
    org.mafagafogigante.dungeon.entity.Integrity integrity1 = itemPreset0.getIntegrity();
    org.mafagafogigante.dungeon.game.Name name2 = itemPreset0.getName();
    java.lang.String str3 = itemPreset0.getText();
    itemPreset0.setDamage(43200);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(integrity1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(name2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str3);

  }

  @Test
  public void test020() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test020"); }

    org.mafagafogigante.dungeon.stats.CauseOfDeath causeOfDeath0 = org.mafagafogigante.dungeon.stats.CauseOfDeath.getUnarmedCauseOfDeath();
    org.mafagafogigante.dungeon.entity.creatures.HealthState healthState1 = org.mafagafogigante.dungeon.entity.creatures.HealthState.DEAD;
    boolean b2 = causeOfDeath0.equals((java.lang.Object)healthState1);
    java.lang.String[] str_array8 = new java.lang.String[] { "hi!", "visibilityCriteria=VisibilityCriteria{[]}", "visibilityCriteria=VisibilityCriteria{[]}", "Damaged", "hi!" };
    org.mafagafogigante.dungeon.util.Table table9 = new org.mafagafogigante.dungeon.util.Table(str_array8);
    java.util.List<org.mafagafogigante.dungeon.game.ColoredString> list_coloredString10 = table9.toColoredStringList();
    boolean b11 = causeOfDeath0.equals((java.lang.Object)table9);
    org.mafagafogigante.dungeon.io.Writer.writeAndWait((org.mafagafogigante.dungeon.game.Writable)table9);
    org.mafagafogigante.dungeon.io.Writer.write((org.mafagafogigante.dungeon.game.Writable)table9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(causeOfDeath0);
    org.junit.Assert.assertTrue("'" + healthState1 + "' != '" + org.mafagafogigante.dungeon.entity.creatures.HealthState.DEAD + "'", healthState1.equals(org.mafagafogigante.dungeon.entity.creatures.HealthState.DEAD));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_coloredString10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);

  }

  @Test
  public void test021() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test021"); }

    java.util.Map<java.lang.String,org.mafagafogigante.dungeon.schema.JsonRule> map_str_jsonRule0 = null;
    org.mafagafogigante.dungeon.schema.JsonRule jsonRule1 = org.mafagafogigante.dungeon.schema.rules.JsonRuleFactory.makeObjectRule(map_str_jsonRule0);
    org.mafagafogigante.dungeon.schema.JsonRule jsonRule2 = org.mafagafogigante.dungeon.schema.rules.JsonRuleFactory.makeVariableArrayRule(jsonRule1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonRule1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonRule2);

  }

  @Test
  public void test022() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test022"); }

    org.mafagafogigante.dungeon.game.PartOfDay partOfDay0 = org.mafagafogigante.dungeon.game.PartOfDay.NIGHT;
    org.mafagafogigante.dungeon.entity.Luminosity luminosity1 = partOfDay0.getLuminosity();
    org.mafagafogigante.dungeon.world.LuminosityVisibilityCriterion luminosityVisibilityCriterion2 = new org.mafagafogigante.dungeon.world.LuminosityVisibilityCriterion(luminosity1);
    org.mafagafogigante.dungeon.game.PartOfDay partOfDay3 = org.mafagafogigante.dungeon.game.PartOfDay.NIGHT;
    org.mafagafogigante.dungeon.entity.Luminosity luminosity4 = partOfDay3.getLuminosity();
    org.mafagafogigante.dungeon.world.LuminosityVisibilityCriterion luminosityVisibilityCriterion5 = new org.mafagafogigante.dungeon.world.LuminosityVisibilityCriterion(luminosity4);
    org.mafagafogigante.dungeon.util.Percentage percentage7 = new org.mafagafogigante.dungeon.util.Percentage((double)'#');
    boolean b9 = percentage7.equals((java.lang.Object)10.0d);
    org.mafagafogigante.dungeon.entity.Luminosity luminosity10 = new org.mafagafogigante.dungeon.entity.Luminosity(percentage7);
    org.mafagafogigante.dungeon.world.LuminosityVisibilityCriterion luminosityVisibilityCriterion11 = new org.mafagafogigante.dungeon.world.LuminosityVisibilityCriterion(luminosity10);
    org.mafagafogigante.dungeon.util.Percentage percentage13 = new org.mafagafogigante.dungeon.util.Percentage((double)'#');
    boolean b15 = percentage13.equals((java.lang.Object)10.0d);
    org.mafagafogigante.dungeon.entity.Luminosity luminosity16 = new org.mafagafogigante.dungeon.entity.Luminosity(percentage13);
    org.mafagafogigante.dungeon.world.LuminosityVisibilityCriterion luminosityVisibilityCriterion17 = new org.mafagafogigante.dungeon.world.LuminosityVisibilityCriterion(luminosity16);
    org.mafagafogigante.dungeon.game.PartOfDay partOfDay18 = org.mafagafogigante.dungeon.game.PartOfDay.NIGHT;
    org.mafagafogigante.dungeon.entity.Luminosity luminosity19 = partOfDay18.getLuminosity();
    org.mafagafogigante.dungeon.world.LuminosityVisibilityCriterion luminosityVisibilityCriterion20 = new org.mafagafogigante.dungeon.world.LuminosityVisibilityCriterion(luminosity19);
    org.mafagafogigante.dungeon.game.PartOfDay partOfDay21 = org.mafagafogigante.dungeon.game.PartOfDay.NIGHT;
    org.mafagafogigante.dungeon.entity.Luminosity luminosity22 = partOfDay21.getLuminosity();
    org.mafagafogigante.dungeon.world.LuminosityVisibilityCriterion luminosityVisibilityCriterion23 = new org.mafagafogigante.dungeon.world.LuminosityVisibilityCriterion(luminosity22);
    org.mafagafogigante.dungeon.world.VisibilityCriterion[] visibilityCriterion_array24 = new org.mafagafogigante.dungeon.world.VisibilityCriterion[] { luminosityVisibilityCriterion2, luminosityVisibilityCriterion5, luminosityVisibilityCriterion11, luminosityVisibilityCriterion17, luminosityVisibilityCriterion20, luminosityVisibilityCriterion23 };
    org.mafagafogigante.dungeon.world.VisibilityCriteria visibilityCriteria25 = new org.mafagafogigante.dungeon.world.VisibilityCriteria(visibilityCriterion_array24);
    org.mafagafogigante.dungeon.world.VisibilityCriteria visibilityCriteria26 = new org.mafagafogigante.dungeon.world.VisibilityCriteria(visibilityCriterion_array24);
    org.mafagafogigante.dungeon.world.VisibilityCriteria visibilityCriteria27 = new org.mafagafogigante.dungeon.world.VisibilityCriteria(visibilityCriterion_array24);
    org.mafagafogigante.dungeon.entity.creatures.Creature creature28 = null;
    org.mafagafogigante.dungeon.entity.creatures.Observer observer29 = new org.mafagafogigante.dungeon.entity.creatures.Observer(creature28);
    org.mafagafogigante.dungeon.entity.creatures.Creature[] creature_array30 = new org.mafagafogigante.dungeon.entity.creatures.Creature[] {  };
    java.util.ArrayList<org.mafagafogigante.dungeon.entity.creatures.Creature> arraylist_creature31 = new java.util.ArrayList<org.mafagafogigante.dungeon.entity.creatures.Creature>();
    boolean b32 = java.util.Collections.addAll((java.util.Collection<org.mafagafogigante.dungeon.entity.creatures.Creature>)arraylist_creature31, creature_array30);
    org.mafagafogigante.dungeon.world.VisibilityCriterion[] visibilityCriterion_array33 = new org.mafagafogigante.dungeon.world.VisibilityCriterion[] {  };
    org.mafagafogigante.dungeon.world.VisibilityCriteria visibilityCriteria34 = new org.mafagafogigante.dungeon.world.VisibilityCriteria(visibilityCriterion_array33);
    org.mafagafogigante.dungeon.entity.creatures.Creature creature35 = null;
    org.mafagafogigante.dungeon.entity.creatures.Observer observer36 = new org.mafagafogigante.dungeon.entity.creatures.Observer(creature35);
    boolean b37 = visibilityCriteria34.isMetBy(observer36);
    org.mafagafogigante.dungeon.entity.items.Item[] item_array38 = new org.mafagafogigante.dungeon.entity.items.Item[] {  };
    java.util.ArrayList<org.mafagafogigante.dungeon.entity.items.Item> arraylist_item39 = new java.util.ArrayList<org.mafagafogigante.dungeon.entity.items.Item>();
    boolean b40 = java.util.Collections.addAll((java.util.Collection<org.mafagafogigante.dungeon.entity.items.Item>)arraylist_item39, item_array38);
    org.mafagafogigante.dungeon.game.DungeonString dungeonString42 = new org.mafagafogigante.dungeon.game.DungeonString("hi!");
    java.lang.String[] str_array47 = new java.lang.String[] { "hi!", "Damaged", "BattleStatistics{records=CounterMap{map={}}}", "" };
    dungeonString42.append(str_array47);
    observer36.writeItemSight((java.util.List<org.mafagafogigante.dungeon.entity.items.Item>)arraylist_item39, dungeonString42);
    java.lang.String str50 = dungeonString42.toString();
    observer29.writeCreatureSight((java.util.List<org.mafagafogigante.dungeon.entity.creatures.Creature>)arraylist_creature31, dungeonString42);
    // The following exception was thrown during execution in test generation
    try {
    boolean b52 = visibilityCriteria27.isMetBy(observer29);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    org.junit.Assert.assertTrue("'" + partOfDay0 + "' != '" + org.mafagafogigante.dungeon.game.PartOfDay.NIGHT + "'", partOfDay0.equals(org.mafagafogigante.dungeon.game.PartOfDay.NIGHT));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(luminosity1);
    org.junit.Assert.assertTrue("'" + partOfDay3 + "' != '" + org.mafagafogigante.dungeon.game.PartOfDay.NIGHT + "'", partOfDay3.equals(org.mafagafogigante.dungeon.game.PartOfDay.NIGHT));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(luminosity4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    org.junit.Assert.assertTrue("'" + partOfDay18 + "' != '" + org.mafagafogigante.dungeon.game.PartOfDay.NIGHT + "'", partOfDay18.equals(org.mafagafogigante.dungeon.game.PartOfDay.NIGHT));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(luminosity19);
    org.junit.Assert.assertTrue("'" + partOfDay21 + "' != '" + org.mafagafogigante.dungeon.game.PartOfDay.NIGHT + "'", partOfDay21.equals(org.mafagafogigante.dungeon.game.PartOfDay.NIGHT));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(luminosity22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(visibilityCriterion_array24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(creature_array30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(visibilityCriterion_array33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(item_array38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str50 + "' != '" + "DungeonString{coloredStringList=[ColoredString{string='hi!hi!DamagedBattleStatistics{records=CounterMap{map={}}}', color=java.awt.Color[r=192,g=192,b=192]}], currentColor=java.awt.Color[r=192,g=192,b=192]}"+ "'", str50.equals("DungeonString{coloredStringList=[ColoredString{string='hi!hi!DamagedBattleStatistics{records=CounterMap{map={}}}', color=java.awt.Color[r=192,g=192,b=192]}], currentColor=java.awt.Color[r=192,g=192,b=192]}"));

  }

  @Test
  public void test023() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test023"); }

    org.mafagafogigante.dungeon.entity.creatures.HealthState healthState0 = org.mafagafogigante.dungeon.entity.creatures.HealthState.DEAD;
    java.lang.String str1 = healthState0.toString();
    java.lang.String str2 = healthState0.toString();
    org.junit.Assert.assertTrue("'" + healthState0 + "' != '" + org.mafagafogigante.dungeon.entity.creatures.HealthState.DEAD + "'", healthState0.equals(org.mafagafogigante.dungeon.entity.creatures.HealthState.DEAD));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Dead"+ "'", str1.equals("Dead"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "Dead"+ "'", str2.equals("Dead"));

  }

  @Test
  public void test024() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test024"); }

    org.mafagafogigante.dungeon.entity.Integrity integrity2 = new org.mafagafogigante.dungeon.entity.Integrity(1, 0);
    java.lang.String str3 = integrity2.toString();
    java.lang.String str4 = integrity2.toString();
    java.lang.String str5 = integrity2.toString();
    org.mafagafogigante.dungeon.util.Percentage percentage6 = integrity2.toPercentage();
    org.mafagafogigante.dungeon.util.Percentage percentage7 = null;
    // The following exception was thrown during execution in test generation
    try {
    org.mafagafogigante.dungeon.util.Percentage percentage8 = percentage6.multiply(percentage7);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "0/1"+ "'", str3.equals("0/1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "0/1"+ "'", str4.equals("0/1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "0/1"+ "'", str5.equals("0/1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(percentage6);

  }

//  @Test
//  public void test025() throws Throwable {
//
//    if (debug) { System.out.format("%n%s%n","RegressionTest2.test025"); }
//
//    org.mafagafogigante.dungeon.entity.creatures.CreaturePreset creaturePreset0 = new org.mafagafogigante.dungeon.entity.creatures.CreaturePreset();
//    org.mafagafogigante.dungeon.game.Id id1 = null;
//    creaturePreset0.setWeaponId(id1);
//    creaturePreset0.setAttack(57);
//    org.mafagafogigante.dungeon.entity.Luminosity luminosity5 = creaturePreset0.getLuminosity();
//    creaturePreset0.setInventoryItemLimit(57);
//    org.mafagafogigante.dungeon.entity.creatures.Drop[] drop_array8 = new org.mafagafogigante.dungeon.entity.creatures.Drop[] {  };
//    java.util.ArrayList<org.mafagafogigante.dungeon.entity.creatures.Drop> arraylist_drop9 = new java.util.ArrayList<org.mafagafogigante.dungeon.entity.creatures.Drop>();
//    boolean b10 = java.util.Collections.addAll((java.util.Collection<org.mafagafogigante.dungeon.entity.creatures.Drop>)arraylist_drop9, drop_array8);
//    creaturePreset0.setDropList((java.util.List<org.mafagafogigante.dungeon.entity.creatures.Drop>)arraylist_drop9);
//    int i12 = creaturePreset0.getInventoryItemLimit();
//    org.mafagafogigante.dungeon.entity.TagSet<org.mafagafogigante.dungeon.entity.creatures.Creature.Tag> tagset_tag13 = null;
//    creaturePreset0.setTagSet(tagset_tag13);
//    org.mafagafogigante.dungeon.entity.Luminosity luminosity15 = creaturePreset0.getLuminosity();
//    
//    // Regression assertion (captures the current behavior of the code)
//    org.junit.Assert.assertNotNull(luminosity5);
//    
//    // Regression assertion (captures the current behavior of the code)
//    org.junit.Assert.assertNotNull(drop_array8);
//    
//    // Regression assertion (captures the current behavior of the code)
//    org.junit.Assert.assertTrue(b10 == false);
//    
//    // Regression assertion (captures the current behavior of the code)
//    org.junit.Assert.assertTrue(i12 == 57);
//    
//    // Regression assertion (captures the current behavior of the code)
//    org.junit.Assert.assertNotNull(luminosity15);
//
//  }

  @Test
  public void test026() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test026"); }

    org.mafagafogigante.dungeon.entity.items.ItemPreset itemPreset0 = new org.mafagafogigante.dungeon.entity.items.ItemPreset();
    org.mafagafogigante.dungeon.entity.Integrity integrity1 = itemPreset0.getIntegrity();
    org.mafagafogigante.dungeon.entity.Integrity integrity2 = null;
    itemPreset0.setIntegrity(integrity2);
    org.mafagafogigante.dungeon.util.Percentage percentage4 = itemPreset0.getVisibility();
    java.lang.String str5 = itemPreset0.getType();
    itemPreset0.setIntegrityDecrementOnHit((int)(short)100);
    org.mafagafogigante.dungeon.util.Percentage percentage9 = new org.mafagafogigante.dungeon.util.Percentage((double)57);
    itemPreset0.setVisibility(percentage9);
    org.mafagafogigante.dungeon.game.Id id11 = null;
    itemPreset0.setId(id11);
    itemPreset0.setIntegrityDecrementOnEat((-1));
    org.mafagafogigante.dungeon.entity.TagSet<org.mafagafogigante.dungeon.entity.items.Item.Tag> tagset_tag15 = itemPreset0.getTagSet();
    org.mafagafogigante.dungeon.entity.items.Item.Tag tag16 = org.mafagafogigante.dungeon.entity.items.Item.Tag.CLOCK;
    itemPreset0.addTag(tag16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(integrity1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(percentage4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(tagset_tag15);
    org.junit.Assert.assertTrue("'" + tag16 + "' != '" + org.mafagafogigante.dungeon.entity.items.Item.Tag.CLOCK + "'", tag16.equals(org.mafagafogigante.dungeon.entity.items.Item.Tag.CLOCK));

  }

  @Test
  public void test027() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test027"); }

    org.mafagafogigante.dungeon.game.Id id0 = null;
    org.mafagafogigante.dungeon.entity.items.BookComponent bookComponent2 = new org.mafagafogigante.dungeon.entity.items.BookComponent(id0, "CreatureHealth{integrity=100/100}");
    boolean b3 = bookComponent2.isDidactic();
    org.mafagafogigante.dungeon.game.Id id4 = bookComponent2.getSpellId();
    java.lang.String str5 = bookComponent2.getText();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(id4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "CreatureHealth{integrity=100/100}"+ "'", str5.equals("CreatureHealth{integrity=100/100}"));

  }

  @Test
  public void test028() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test028"); }

    org.mafagafogigante.dungeon.entity.items.ItemPreset itemPreset0 = new org.mafagafogigante.dungeon.entity.items.ItemPreset();
    org.mafagafogigante.dungeon.entity.Integrity integrity1 = itemPreset0.getIntegrity();
    org.mafagafogigante.dungeon.entity.Integrity integrity2 = null;
    itemPreset0.setIntegrity(integrity2);
    org.mafagafogigante.dungeon.util.Percentage percentage4 = itemPreset0.getVisibility();
    java.lang.String str5 = itemPreset0.getType();
    org.mafagafogigante.dungeon.game.Id id6 = itemPreset0.getSpellId();
    int i7 = itemPreset0.getDrinkableDoses();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(integrity1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(percentage4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(id6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);

  }

  @Test
  public void test029() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test029"); }

    boolean b1 = org.mafagafogigante.dungeon.commands.IssuedCommand.isValidSource("{32, 0, -1}");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == true);

  }

  @Test
  public void test030() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test030"); }

    org.mafagafogigante.dungeon.entity.items.ItemPreset itemPreset0 = new org.mafagafogigante.dungeon.entity.items.ItemPreset();
    org.mafagafogigante.dungeon.entity.Integrity integrity1 = itemPreset0.getIntegrity();
    org.mafagafogigante.dungeon.util.Percentage percentage2 = itemPreset0.getVisibility();
    java.lang.String str3 = itemPreset0.getType();
    itemPreset0.setDrinkableHealing(10);
    org.mafagafogigante.dungeon.game.Id id6 = itemPreset0.getId();
    int i7 = itemPreset0.getIntegrityDecrementOnHit();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(integrity1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(percentage2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(id6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);

  }

  @Test
  public void test031() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test031"); }

    org.mafagafogigante.dungeon.entity.items.ItemPreset itemPreset0 = new org.mafagafogigante.dungeon.entity.items.ItemPreset();
    org.mafagafogigante.dungeon.entity.Integrity integrity1 = itemPreset0.getIntegrity();
    itemPreset0.setIntegrityDecrementOnEat((-1));
    itemPreset0.setPutrefactionPeriod((-1L));
    itemPreset0.setDrinkableDoses((int)(short)10);
    itemPreset0.setPutrefactionPeriod((long)3600);
    itemPreset0.setNutrition(35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(integrity1);

  }

  @Test
  public void test032() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test032"); }

    org.mafagafogigante.dungeon.commands.CommandDescription commandDescription2 = new org.mafagafogigante.dungeon.commands.CommandDescription("100 B", "User: Nicholas\nTime: 15:42:10\nDate: 2017-04-09\nJava: Java version 1.8.0_121 by Oracle Corporation\nHeap: Using 19.7 MiB out of the allocated 123.0 MiB\nOS: Windows 10 (amd64) 10.0");

  }

//  @Test
//  public void test033() throws Throwable {
//
//    if (debug) { System.out.format("%n%s%n","RegressionTest2.test033"); }
//
//    org.mafagafogigante.dungeon.entity.creatures.CreaturePreset creaturePreset0 = new org.mafagafogigante.dungeon.entity.creatures.CreaturePreset();
//    org.mafagafogigante.dungeon.game.Id id1 = null;
//    creaturePreset0.setWeaponId(id1);
//    creaturePreset0.setAttack(57);
//    org.mafagafogigante.dungeon.entity.Luminosity luminosity5 = creaturePreset0.getLuminosity();
//    creaturePreset0.setInventoryItemLimit(57);
//    org.mafagafogigante.dungeon.entity.creatures.Drop[] drop_array8 = new org.mafagafogigante.dungeon.entity.creatures.Drop[] {  };
//    java.util.ArrayList<org.mafagafogigante.dungeon.entity.creatures.Drop> arraylist_drop9 = new java.util.ArrayList<org.mafagafogigante.dungeon.entity.creatures.Drop>();
//    boolean b10 = java.util.Collections.addAll((java.util.Collection<org.mafagafogigante.dungeon.entity.creatures.Drop>)arraylist_drop9, drop_array8);
//    creaturePreset0.setDropList((java.util.List<org.mafagafogigante.dungeon.entity.creatures.Drop>)arraylist_drop9);
//    creaturePreset0.setInventoryWeightLimit((double)(byte)0);
//    org.mafagafogigante.dungeon.entity.creatures.AttackAlgorithmId attackAlgorithmId14 = creaturePreset0.getAttackAlgorithmId();
//    org.mafagafogigante.dungeon.entity.creatures.CreaturePreset creaturePreset15 = new org.mafagafogigante.dungeon.entity.creatures.CreaturePreset();
//    org.mafagafogigante.dungeon.game.Id id16 = null;
//    creaturePreset15.setWeaponId(id16);
//    creaturePreset15.setAttack(57);
//    org.mafagafogigante.dungeon.entity.Luminosity luminosity20 = creaturePreset15.getLuminosity();
//    org.mafagafogigante.dungeon.entity.creatures.CreaturePreset creaturePreset21 = new org.mafagafogigante.dungeon.entity.creatures.CreaturePreset();
//    org.mafagafogigante.dungeon.game.Id id22 = null;
//    creaturePreset21.setWeaponId(id22);
//    creaturePreset21.setAttack(57);
//    org.mafagafogigante.dungeon.game.Id[] id_array26 = new org.mafagafogigante.dungeon.game.Id[] {  };
//    java.util.ArrayList<org.mafagafogigante.dungeon.game.Id> arraylist_id27 = new java.util.ArrayList<org.mafagafogigante.dungeon.game.Id>();
//    boolean b28 = java.util.Collections.addAll((java.util.Collection<org.mafagafogigante.dungeon.game.Id>)arraylist_id27, id_array26);
//    creaturePreset21.setItems((java.util.List<org.mafagafogigante.dungeon.game.Id>)arraylist_id27);
//    creaturePreset15.setItems((java.util.List<org.mafagafogigante.dungeon.game.Id>)arraylist_id27);
//    org.mafagafogigante.dungeon.game.PartOfDay partOfDay31 = org.mafagafogigante.dungeon.game.PartOfDay.NIGHT;
//    org.mafagafogigante.dungeon.entity.Luminosity luminosity32 = partOfDay31.getLuminosity();
//    org.mafagafogigante.dungeon.game.Name name33 = partOfDay31.getName();
//    java.lang.String str35 = name33.getQuantifiedName((int)'a');
//    creaturePreset15.setName(name33);
//    creaturePreset0.setName(name33);
//    creaturePreset0.setHealth(57600);
//    
//    // Regression assertion (captures the current behavior of the code)
//    org.junit.Assert.assertNotNull(luminosity5);
//    
//    // Regression assertion (captures the current behavior of the code)
//    org.junit.Assert.assertNotNull(drop_array8);
//    
//    // Regression assertion (captures the current behavior of the code)
//    org.junit.Assert.assertTrue(b10 == false);
//    
//    // Regression assertion (captures the current behavior of the code)
//    org.junit.Assert.assertNull(attackAlgorithmId14);
//    
//    // Regression assertion (captures the current behavior of the code)
//    org.junit.Assert.assertNotNull(luminosity20);
//    
//    // Regression assertion (captures the current behavior of the code)
//    org.junit.Assert.assertNotNull(id_array26);
//    
//    // Regression assertion (captures the current behavior of the code)
//    org.junit.Assert.assertTrue(b28 == false);
//    org.junit.Assert.assertTrue("'" + partOfDay31 + "' != '" + org.mafagafogigante.dungeon.game.PartOfDay.NIGHT + "'", partOfDay31.equals(org.mafagafogigante.dungeon.game.PartOfDay.NIGHT));
//    
//    // Regression assertion (captures the current behavior of the code)
//    org.junit.Assert.assertNotNull(luminosity32);
//    
//    // Regression assertion (captures the current behavior of the code)
//    org.junit.Assert.assertNotNull(name33);
//    
//    // Regression assertion (captures the current behavior of the code)
//    org.junit.Assert.assertTrue("'" + str35 + "' != '" + "a few Nights"+ "'", str35.equals("a few Nights"));
//
//  }

  @Test
  public void test034() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test034"); }

    org.mafagafogigante.dungeon.entity.items.ItemPreset itemPreset0 = new org.mafagafogigante.dungeon.entity.items.ItemPreset();
    org.mafagafogigante.dungeon.entity.Integrity integrity1 = itemPreset0.getIntegrity();
    org.mafagafogigante.dungeon.util.Percentage percentage2 = itemPreset0.getVisibility();
    java.lang.String str3 = itemPreset0.getType();
    int i4 = itemPreset0.getDamage();
    long long5 = itemPreset0.getPutrefactionPeriod();
    org.mafagafogigante.dungeon.entity.creatures.CreaturePreset creaturePreset6 = new org.mafagafogigante.dungeon.entity.creatures.CreaturePreset();
    org.mafagafogigante.dungeon.game.Id id7 = null;
    creaturePreset6.setWeaponId(id7);
    creaturePreset6.setAttack(57);
    org.mafagafogigante.dungeon.entity.Luminosity luminosity11 = creaturePreset6.getLuminosity();
    int i12 = creaturePreset6.getInventoryItemLimit();
    double d13 = creaturePreset6.getInventoryWeightLimit();
    org.mafagafogigante.dungeon.entity.Luminosity luminosity14 = creaturePreset6.getLuminosity();
    itemPreset0.setLuminosity(luminosity14);
    long long16 = itemPreset0.getPutrefactionPeriod();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(integrity1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(percentage2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long5 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(luminosity11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d13 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(luminosity14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long16 == 0L);

  }

  @Test
  public void test035() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test035"); }

    org.mafagafogigante.dungeon.date.Date date3 = new org.mafagafogigante.dungeon.date.Date(10L, 100L, 100L);
    org.mafagafogigante.dungeon.date.Date date7 = new org.mafagafogigante.dungeon.date.Date(10L, 100L, 100L);
    int i8 = date3.compareTo(date7);
    long long9 = date7.getDay();
    org.mafagafogigante.dungeon.game.PartOfDay partOfDay10 = org.mafagafogigante.dungeon.game.PartOfDay.getCorrespondingConstant(date7);
    org.mafagafogigante.dungeon.date.DungeonTimeUnit dungeonTimeUnit12 = org.mafagafogigante.dungeon.date.DungeonTimeUnit.SECOND;
    org.mafagafogigante.dungeon.date.Date date13 = date7.minus(3, dungeonTimeUnit12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long9 == 10L);
    org.junit.Assert.assertTrue("'" + partOfDay10 + "' != '" + org.mafagafogigante.dungeon.game.PartOfDay.MIDNIGHT + "'", partOfDay10.equals(org.mafagafogigante.dungeon.game.PartOfDay.MIDNIGHT));
    org.junit.Assert.assertTrue("'" + dungeonTimeUnit12 + "' != '" + org.mafagafogigante.dungeon.date.DungeonTimeUnit.SECOND + "'", dungeonTimeUnit12.equals(org.mafagafogigante.dungeon.date.DungeonTimeUnit.SECOND));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(date13);

  }

  @Test
  public void test036() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test036"); }

    org.mafagafogigante.dungeon.stats.TypeOfCauseOfDeath typeOfCauseOfDeath0 = org.mafagafogigante.dungeon.stats.TypeOfCauseOfDeath.SPELL;
    java.lang.String str1 = typeOfCauseOfDeath0.toString();
    org.mafagafogigante.dungeon.game.Id id2 = null;
    org.mafagafogigante.dungeon.stats.CauseOfDeath causeOfDeath3 = new org.mafagafogigante.dungeon.stats.CauseOfDeath(typeOfCauseOfDeath0, id2);
    org.junit.Assert.assertTrue("'" + typeOfCauseOfDeath0 + "' != '" + org.mafagafogigante.dungeon.stats.TypeOfCauseOfDeath.SPELL + "'", typeOfCauseOfDeath0.equals(org.mafagafogigante.dungeon.stats.TypeOfCauseOfDeath.SPELL));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Spell"+ "'", str1.equals("Spell"));

  }

  @Test
  public void test037() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test037"); }

    org.mafagafogigante.dungeon.entity.items.ItemPreset itemPreset0 = new org.mafagafogigante.dungeon.entity.items.ItemPreset();
    org.mafagafogigante.dungeon.entity.Integrity integrity1 = itemPreset0.getIntegrity();
    itemPreset0.setIntegrityDecrementOnEat((-1));
    org.mafagafogigante.dungeon.entity.Weight weight4 = itemPreset0.getWeight();
    int i5 = itemPreset0.getNutrition();
    itemPreset0.setDamage(0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(integrity1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(weight4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 0);

  }

  @Test
  public void test038() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test038"); }

    org.mafagafogigante.dungeon.entity.creatures.CreaturePreset creaturePreset0 = new org.mafagafogigante.dungeon.entity.creatures.CreaturePreset();
    org.mafagafogigante.dungeon.game.Id id1 = null;
    creaturePreset0.setWeaponId(id1);
    creaturePreset0.setAttack(57);
    org.mafagafogigante.dungeon.entity.Luminosity luminosity5 = creaturePreset0.getLuminosity();
    int i6 = creaturePreset0.getInventoryItemLimit();
    org.mafagafogigante.dungeon.game.Id id7 = null;
    creaturePreset0.setWeaponId(id7);
    creaturePreset0.setInventoryItemLimit(0);
    org.mafagafogigante.dungeon.game.Id id11 = creaturePreset0.getWeaponId();
    org.mafagafogigante.dungeon.entity.creatures.Creature.Tag tag12 = org.mafagafogigante.dungeon.entity.creatures.Creature.Tag.CORPSE;
    boolean b13 = creaturePreset0.hasTag(tag12);
    creaturePreset0.setType("WritingSpecifications{scrollDown=false}");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(luminosity5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(id11);
    org.junit.Assert.assertTrue("'" + tag12 + "' != '" + org.mafagafogigante.dungeon.entity.creatures.Creature.Tag.CORPSE + "'", tag12.equals(org.mafagafogigante.dungeon.entity.creatures.Creature.Tag.CORPSE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);

  }

  @Test
  public void test039() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test039"); }

    org.mafagafogigante.dungeon.entity.items.ItemPreset itemPreset0 = new org.mafagafogigante.dungeon.entity.items.ItemPreset();
    org.mafagafogigante.dungeon.entity.Integrity integrity1 = itemPreset0.getIntegrity();
    itemPreset0.setIntegrityDecrementPerDose(46800);
    itemPreset0.setPutrefactionPeriod((long)(byte)10);
    org.mafagafogigante.dungeon.util.Percentage percentage6 = itemPreset0.getVisibility();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(integrity1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(percentage6);

  }

  @Test
  public void test040() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test040"); }

    org.mafagafogigante.dungeon.game.MinimumBoundingRectangle minimumBoundingRectangle2 = new org.mafagafogigante.dungeon.game.MinimumBoundingRectangle(100, 3600);

  }

  @Test
  public void test041() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test041"); }

    org.mafagafogigante.dungeon.entity.creatures.CreaturePreset creaturePreset0 = new org.mafagafogigante.dungeon.entity.creatures.CreaturePreset();
    org.mafagafogigante.dungeon.game.Id id1 = null;
    creaturePreset0.setWeaponId(id1);
    creaturePreset0.setAttack(57);
    org.mafagafogigante.dungeon.entity.Luminosity luminosity5 = creaturePreset0.getLuminosity();
    creaturePreset0.setInventoryItemLimit(57);
    org.mafagafogigante.dungeon.util.Percentage percentage9 = new org.mafagafogigante.dungeon.util.Percentage((double)'#');
    boolean b11 = percentage9.equals((java.lang.Object)10.0d);
    org.mafagafogigante.dungeon.entity.Luminosity luminosity12 = new org.mafagafogigante.dungeon.entity.Luminosity(percentage9);
    org.mafagafogigante.dungeon.util.Percentage percentage13 = luminosity12.toPercentage();
    java.lang.String str14 = percentage13.toString();
    creaturePreset0.setVisibility(percentage13);
    org.mafagafogigante.dungeon.game.Name name16 = creaturePreset0.getName();
    org.mafagafogigante.dungeon.entity.Weight weight18 = org.mafagafogigante.dungeon.entity.Weight.newInstance((double)(byte)-1);
    org.mafagafogigante.dungeon.entity.Weight weight19 = org.mafagafogigante.dungeon.entity.Weight.ZERO;
    org.mafagafogigante.dungeon.entity.Weight weight20 = weight18.add(weight19);
    java.lang.String str21 = weight20.toString();
    creaturePreset0.setWeight(weight20);
    org.mafagafogigante.dungeon.util.Percentage percentage23 = creaturePreset0.getVisibility();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(luminosity5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(percentage13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "100.00%"+ "'", str14.equals("100.00%"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(name16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(weight18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(weight19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(weight20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "0 kg"+ "'", str21.equals("0 kg"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(percentage23);

  }

  @Test
  public void test042() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test042"); }

    boolean b1 = org.mafagafogigante.dungeon.util.Percentage.isValidPercentageString("Damaged");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == false);

  }

  @Test
  public void test043() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test043"); }

    org.mafagafogigante.dungeon.entity.items.ItemPreset itemPreset0 = new org.mafagafogigante.dungeon.entity.items.ItemPreset();
    org.mafagafogigante.dungeon.entity.Integrity integrity1 = itemPreset0.getIntegrity();
    org.mafagafogigante.dungeon.util.Percentage percentage2 = itemPreset0.getVisibility();
    java.lang.String str3 = itemPreset0.getType();
    itemPreset0.setDrinkableHealing(10);
    org.mafagafogigante.dungeon.game.PartOfDay partOfDay6 = org.mafagafogigante.dungeon.game.PartOfDay.NIGHT;
    org.mafagafogigante.dungeon.entity.Luminosity luminosity7 = partOfDay6.getLuminosity();
    org.mafagafogigante.dungeon.game.Name name8 = partOfDay6.getName();
    java.lang.String str10 = name8.getQuantifiedName((int)'a');
    java.lang.String str11 = name8.getSingular();
    java.lang.String str12 = name8.toString();
    java.lang.String str13 = name8.getSingular();
    itemPreset0.setName(name8);
    org.mafagafogigante.dungeon.entity.items.ItemPreset itemPreset15 = new org.mafagafogigante.dungeon.entity.items.ItemPreset();
    org.mafagafogigante.dungeon.entity.Integrity integrity16 = itemPreset15.getIntegrity();
    org.mafagafogigante.dungeon.entity.Integrity integrity17 = null;
    itemPreset15.setIntegrity(integrity17);
    org.mafagafogigante.dungeon.util.Percentage percentage19 = itemPreset15.getVisibility();
    java.lang.String str20 = itemPreset15.getType();
    itemPreset15.setIntegrityDecrementOnHit((int)(short)100);
    org.mafagafogigante.dungeon.util.Percentage percentage24 = new org.mafagafogigante.dungeon.util.Percentage((double)57);
    itemPreset15.setVisibility(percentage24);
    org.mafagafogigante.dungeon.game.Id id26 = null;
    itemPreset15.setId(id26);
    itemPreset15.setPutrefactionPeriod((long)(short)1);
    org.mafagafogigante.dungeon.entity.items.Item.Tag tag30 = org.mafagafogigante.dungeon.entity.items.Item.Tag.DECOMPOSES;
    boolean b31 = itemPreset15.hasTag(tag30);
    itemPreset0.addTag(tag30);
    org.mafagafogigante.dungeon.entity.Integrity integrity35 = new org.mafagafogigante.dungeon.entity.Integrity(1, 0);
    boolean b36 = integrity35.isMaximum();
    org.mafagafogigante.dungeon.entity.items.Item item37 = null;
    org.mafagafogigante.dungeon.entity.items.ItemIntegrity itemIntegrity38 = org.mafagafogigante.dungeon.entity.items.ItemIntegrity.makeItemIntegrity(integrity35, item37);
    org.mafagafogigante.dungeon.util.Percentage percentage39 = itemIntegrity38.toPercentage();
    itemPreset0.setVisibility(percentage39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(integrity1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(percentage2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str3);
    org.junit.Assert.assertTrue("'" + partOfDay6 + "' != '" + org.mafagafogigante.dungeon.game.PartOfDay.NIGHT + "'", partOfDay6.equals(org.mafagafogigante.dungeon.game.PartOfDay.NIGHT));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(luminosity7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(name8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "a few Nights"+ "'", str10.equals("a few Nights"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "Night"+ "'", str11.equals("Night"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "Night"+ "'", str12.equals("Night"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "Night"+ "'", str13.equals("Night"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(integrity16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(percentage19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str20);
    org.junit.Assert.assertTrue("'" + tag30 + "' != '" + org.mafagafogigante.dungeon.entity.items.Item.Tag.DECOMPOSES + "'", tag30.equals(org.mafagafogigante.dungeon.entity.items.Item.Tag.DECOMPOSES));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(itemIntegrity38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(percentage39);

  }

  @Test
  public void test044() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test044"); }

    org.mafagafogigante.dungeon.entity.items.ItemPreset itemPreset0 = new org.mafagafogigante.dungeon.entity.items.ItemPreset();
    org.mafagafogigante.dungeon.entity.Luminosity luminosity1 = itemPreset0.getLuminosity();
    org.mafagafogigante.dungeon.entity.Weight weight2 = itemPreset0.getWeight();
    org.mafagafogigante.dungeon.entity.Integrity integrity5 = new org.mafagafogigante.dungeon.entity.Integrity(1, 0);
    boolean b6 = integrity5.isMaximum();
    org.mafagafogigante.dungeon.entity.items.Item item7 = null;
    org.mafagafogigante.dungeon.entity.items.ItemIntegrity itemIntegrity8 = org.mafagafogigante.dungeon.entity.items.ItemIntegrity.makeItemIntegrity(integrity5, item7);
    itemPreset0.setIntegrity(integrity5);
    org.mafagafogigante.dungeon.util.Percentage percentage11 = new org.mafagafogigante.dungeon.util.Percentage((double)10.0f);
    itemPreset0.setVisibility(percentage11);
    org.mafagafogigante.dungeon.entity.Visibility visibility13 = new org.mafagafogigante.dungeon.entity.Visibility(percentage11);
    java.lang.String str14 = visibility13.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(luminosity1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(weight2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(itemIntegrity8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "Visibility of 100.00%"+ "'", str14.equals("Visibility of 100.00%"));

  }

  @Test
  public void test045() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test045"); }

    org.mafagafogigante.dungeon.entity.creatures.CreaturePreset creaturePreset0 = new org.mafagafogigante.dungeon.entity.creatures.CreaturePreset();
    org.mafagafogigante.dungeon.game.Id id1 = null;
    creaturePreset0.setWeaponId(id1);
    creaturePreset0.setAttack(57);
    org.mafagafogigante.dungeon.entity.Luminosity luminosity5 = creaturePreset0.getLuminosity();
    org.mafagafogigante.dungeon.entity.creatures.CreaturePreset creaturePreset6 = new org.mafagafogigante.dungeon.entity.creatures.CreaturePreset();
    org.mafagafogigante.dungeon.game.Id id7 = null;
    creaturePreset6.setWeaponId(id7);
    creaturePreset6.setAttack(57);
    org.mafagafogigante.dungeon.game.Id[] id_array11 = new org.mafagafogigante.dungeon.game.Id[] {  };
    java.util.ArrayList<org.mafagafogigante.dungeon.game.Id> arraylist_id12 = new java.util.ArrayList<org.mafagafogigante.dungeon.game.Id>();
    boolean b13 = java.util.Collections.addAll((java.util.Collection<org.mafagafogigante.dungeon.game.Id>)arraylist_id12, id_array11);
    creaturePreset6.setItems((java.util.List<org.mafagafogigante.dungeon.game.Id>)arraylist_id12);
    creaturePreset0.setItems((java.util.List<org.mafagafogigante.dungeon.game.Id>)arraylist_id12);
    int i16 = creaturePreset0.getAttack();
    // The following exception was thrown during execution in test generation
    try {
    org.mafagafogigante.dungeon.entity.creatures.Creature creature17 = new org.mafagafogigante.dungeon.entity.creatures.Creature(creaturePreset0);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(luminosity5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(id_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 57);

  }

  @Test
  public void test046() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test046"); }

    org.mafagafogigante.dungeon.stats.WorldStatistics worldStatistics0 = new org.mafagafogigante.dungeon.stats.WorldStatistics();
    org.mafagafogigante.dungeon.util.CounterMap<java.lang.String> countermap_str1 = worldStatistics0.getSpawnCounter();
    org.mafagafogigante.dungeon.util.CounterMap<java.lang.String> countermap_str2 = worldStatistics0.getSpawnCounter();
    int i3 = worldStatistics0.getSpawnCount();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(countermap_str1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(countermap_str2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);

  }

  @Test
  public void test047() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test047"); }

    org.mafagafogigante.dungeon.entity.items.ItemPreset itemPreset0 = new org.mafagafogigante.dungeon.entity.items.ItemPreset();
    org.mafagafogigante.dungeon.entity.Integrity integrity1 = itemPreset0.getIntegrity();
    org.mafagafogigante.dungeon.entity.Integrity integrity2 = null;
    itemPreset0.setIntegrity(integrity2);
    org.mafagafogigante.dungeon.util.Percentage percentage4 = itemPreset0.getVisibility();
    java.lang.String str5 = itemPreset0.getType();
    org.mafagafogigante.dungeon.entity.items.Item.Tag tag6 = org.mafagafogigante.dungeon.entity.items.Item.Tag.REPAIRABLE;
    itemPreset0.addTag(tag6);
    org.mafagafogigante.dungeon.util.Percentage percentage9 = new org.mafagafogigante.dungeon.util.Percentage((double)'#');
    boolean b11 = percentage9.equals((java.lang.Object)10.0d);
    org.mafagafogigante.dungeon.entity.Luminosity luminosity12 = new org.mafagafogigante.dungeon.entity.Luminosity(percentage9);
    itemPreset0.setVisibility(percentage9);
    org.mafagafogigante.dungeon.entity.Integrity integrity14 = itemPreset0.getIntegrity();
    org.mafagafogigante.dungeon.entity.Weight weight15 = org.mafagafogigante.dungeon.entity.Weight.ZERO;
    org.mafagafogigante.dungeon.entity.Weight weight17 = org.mafagafogigante.dungeon.entity.Weight.newInstance((double)(byte)-1);
    int i18 = weight15.compareTo(weight17);
    itemPreset0.setWeight(weight17);
    org.mafagafogigante.dungeon.game.Name name20 = itemPreset0.getName();
    org.mafagafogigante.dungeon.game.PartOfDay partOfDay21 = org.mafagafogigante.dungeon.game.PartOfDay.NIGHT;
    org.mafagafogigante.dungeon.entity.Luminosity luminosity22 = partOfDay21.getLuminosity();
    org.mafagafogigante.dungeon.game.Name name23 = partOfDay21.getName();
    org.mafagafogigante.dungeon.game.QuantificationMode quantificationMode25 = org.mafagafogigante.dungeon.game.QuantificationMode.NUMBER;
    java.lang.String str26 = name23.getQuantifiedName((int)'4', quantificationMode25);
    java.lang.String str28 = name23.getQuantifiedName(3600);
    itemPreset0.setName(name23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(integrity1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(percentage4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str5);
    org.junit.Assert.assertTrue("'" + tag6 + "' != '" + org.mafagafogigante.dungeon.entity.items.Item.Tag.REPAIRABLE + "'", tag6.equals(org.mafagafogigante.dungeon.entity.items.Item.Tag.REPAIRABLE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(integrity14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(weight15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(weight17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(name20);
    org.junit.Assert.assertTrue("'" + partOfDay21 + "' != '" + org.mafagafogigante.dungeon.game.PartOfDay.NIGHT + "'", partOfDay21.equals(org.mafagafogigante.dungeon.game.PartOfDay.NIGHT));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(luminosity22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(name23);
    org.junit.Assert.assertTrue("'" + quantificationMode25 + "' != '" + org.mafagafogigante.dungeon.game.QuantificationMode.NUMBER + "'", quantificationMode25.equals(org.mafagafogigante.dungeon.game.QuantificationMode.NUMBER));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "52 Nights"+ "'", str26.equals("52 Nights"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + "a few Nights"+ "'", str28.equals("a few Nights"));

  }

  @Test
  public void test048() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test048"); }

    org.mafagafogigante.dungeon.game.Numeral numeral1 = org.mafagafogigante.dungeon.game.Numeral.getCorrespondingNumeral(0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(numeral1);

  }

  @Test
  public void test049() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test049"); }

    org.mafagafogigante.dungeon.entity.items.ItemPreset itemPreset0 = new org.mafagafogigante.dungeon.entity.items.ItemPreset();
    itemPreset0.setDrinkableHealing((int)(short)0);
    org.mafagafogigante.dungeon.util.Percentage percentage4 = new org.mafagafogigante.dungeon.util.Percentage((double)57);
    itemPreset0.setVisibility(percentage4);
    int i6 = itemPreset0.getDrinkableDoses();
    itemPreset0.setIntegrityDecrementOnEat((int)' ');
    itemPreset0.setType("");
    org.mafagafogigante.dungeon.entity.Integrity integrity13 = new org.mafagafogigante.dungeon.entity.Integrity((int)(byte)1, (int)(byte)0);
    boolean b14 = integrity13.isZero();
    integrity13.incrementBy(81);
    boolean b17 = integrity13.isZero();
    itemPreset0.setIntegrity(integrity13);
    org.mafagafogigante.dungeon.entity.items.Item item19 = null;
    org.mafagafogigante.dungeon.entity.items.ItemIntegrity itemIntegrity20 = org.mafagafogigante.dungeon.entity.items.ItemIntegrity.makeItemIntegrity(integrity13, item19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(itemIntegrity20);

  }

  @Test
  public void test050() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test050"); }

    org.mafagafogigante.dungeon.entity.items.ItemPreset itemPreset0 = new org.mafagafogigante.dungeon.entity.items.ItemPreset();
    itemPreset0.setDrinkableHealing((int)(short)0);
    org.mafagafogigante.dungeon.util.Percentage percentage4 = new org.mafagafogigante.dungeon.util.Percentage((double)57);
    itemPreset0.setVisibility(percentage4);
    int i6 = itemPreset0.getDrinkableDoses();
    itemPreset0.setIntegrityDecrementOnEat((int)' ');
    org.mafagafogigante.dungeon.util.Percentage percentage9 = itemPreset0.getVisibility();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(percentage9);

  }

  @Test
  public void test051() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test051"); }

    org.mafagafogigante.dungeon.game.Point point0 = null;
    org.mafagafogigante.dungeon.game.Point point4 = new org.mafagafogigante.dungeon.game.Point(100, 10, (int)(byte)10);
    java.lang.String str5 = point4.toString();
    org.mafagafogigante.dungeon.game.Direction direction6 = org.mafagafogigante.dungeon.game.Direction.EAST;
    boolean b8 = direction6.equalsIgnoreCase("Damaged");
    org.mafagafogigante.dungeon.game.Point point9 = new org.mafagafogigante.dungeon.game.Point(point4, direction6);
    // The following exception was thrown during execution in test generation
    try {
    org.mafagafogigante.dungeon.game.Point point10 = new org.mafagafogigante.dungeon.game.Point(point0, direction6);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "{100, 10, 10}"+ "'", str5.equals("{100, 10, 10}"));
    org.junit.Assert.assertTrue("'" + direction6 + "' != '" + org.mafagafogigante.dungeon.game.Direction.EAST + "'", direction6.equals(org.mafagafogigante.dungeon.game.Direction.EAST));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);

  }

  @Test
  public void test052() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test052"); }

    org.mafagafogigante.dungeon.entity.items.ItemPresetFactory[] itemPresetFactory_array0 = new org.mafagafogigante.dungeon.entity.items.ItemPresetFactory[] {  };
    org.mafagafogigante.dungeon.entity.items.ItemFactory itemFactory1 = new org.mafagafogigante.dungeon.entity.items.ItemFactory(itemPresetFactory_array0);
    org.mafagafogigante.dungeon.entity.creatures.Creature creature2 = null;
    org.mafagafogigante.dungeon.date.Date date6 = new org.mafagafogigante.dungeon.date.Date(10L, 100L, 100L);
    org.mafagafogigante.dungeon.date.Date date10 = new org.mafagafogigante.dungeon.date.Date(10L, 100L, 100L);
    int i11 = date6.compareTo(date10);
    long long12 = date10.getDay();
    org.mafagafogigante.dungeon.game.PartOfDay partOfDay13 = org.mafagafogigante.dungeon.game.PartOfDay.NIGHT;
    int i14 = org.mafagafogigante.dungeon.game.PartOfDay.getSecondsToNext(date10, partOfDay13);
    long long15 = date10.getYear();
    org.mafagafogigante.dungeon.date.Date date19 = new org.mafagafogigante.dungeon.date.Date(10L, 100L, 100L);
    org.mafagafogigante.dungeon.date.Date date23 = new org.mafagafogigante.dungeon.date.Date(10L, 100L, 100L);
    int i24 = date19.compareTo(date23);
    org.mafagafogigante.dungeon.game.PartOfDay partOfDay25 = org.mafagafogigante.dungeon.game.PartOfDay.getCorrespondingConstant(date19);
    org.mafagafogigante.dungeon.game.PartOfDay partOfDay26 = org.mafagafogigante.dungeon.game.PartOfDay.getCorrespondingConstant(date19);
    int i27 = org.mafagafogigante.dungeon.game.PartOfDay.getSecondsToNext(date10, partOfDay26);
    org.mafagafogigante.dungeon.date.DungeonTimeUnit dungeonTimeUnit29 = org.mafagafogigante.dungeon.date.DungeonTimeUnit.HOUR;
    org.mafagafogigante.dungeon.date.Date date30 = date10.minus(82800, dungeonTimeUnit29);
    boolean b32 = date30.equals((java.lang.Object)"100");
    // The following exception was thrown during execution in test generation
    try {
    org.mafagafogigante.dungeon.entity.items.Item item33 = itemFactory1.makeCorpse(creature2, date30);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(itemPresetFactory_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long12 == 10L);
    org.junit.Assert.assertTrue("'" + partOfDay13 + "' != '" + org.mafagafogigante.dungeon.game.PartOfDay.NIGHT + "'", partOfDay13.equals(org.mafagafogigante.dungeon.game.PartOfDay.NIGHT));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 3600);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long15 == 10L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i24 == 0);
    org.junit.Assert.assertTrue("'" + partOfDay25 + "' != '" + org.mafagafogigante.dungeon.game.PartOfDay.MIDNIGHT + "'", partOfDay25.equals(org.mafagafogigante.dungeon.game.PartOfDay.MIDNIGHT));
    org.junit.Assert.assertTrue("'" + partOfDay26 + "' != '" + org.mafagafogigante.dungeon.game.PartOfDay.MIDNIGHT + "'", partOfDay26.equals(org.mafagafogigante.dungeon.game.PartOfDay.MIDNIGHT));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i27 == 82800);
    org.junit.Assert.assertTrue("'" + dungeonTimeUnit29 + "' != '" + org.mafagafogigante.dungeon.date.DungeonTimeUnit.HOUR + "'", dungeonTimeUnit29.equals(org.mafagafogigante.dungeon.date.DungeonTimeUnit.HOUR));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(date30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);

  }

  @Test
  public void test053() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test053"); }

    org.mafagafogigante.dungeon.entity.Integrity integrity2 = new org.mafagafogigante.dungeon.entity.Integrity(1, 0);
    java.lang.String str3 = integrity2.toString();
    java.lang.String str4 = integrity2.toString();
    boolean b5 = integrity2.isMaximum();
    int i6 = integrity2.getMaximum();
    java.lang.String str7 = integrity2.toString();
    org.mafagafogigante.dungeon.entity.items.Item item8 = null;
    org.mafagafogigante.dungeon.entity.items.ItemIntegrity itemIntegrity9 = org.mafagafogigante.dungeon.entity.items.ItemIntegrity.makeItemIntegrity(integrity2, item8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "0/1"+ "'", str3.equals("0/1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "0/1"+ "'", str4.equals("0/1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "0/1"+ "'", str7.equals("0/1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(itemIntegrity9);

  }

  @Test
  public void test054() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test054"); }

    org.mafagafogigante.dungeon.entity.creatures.CreaturePresetFactory[] creaturePresetFactory_array0 = new org.mafagafogigante.dungeon.entity.creatures.CreaturePresetFactory[] {  };
    org.mafagafogigante.dungeon.entity.creatures.CreatureFactory creatureFactory1 = new org.mafagafogigante.dungeon.entity.creatures.CreatureFactory(creaturePresetFactory_array0);
    org.mafagafogigante.dungeon.entity.creatures.CreatureFactory creatureFactory2 = new org.mafagafogigante.dungeon.entity.creatures.CreatureFactory(creaturePresetFactory_array0);
    org.mafagafogigante.dungeon.entity.creatures.CorpseItemPresetFactory corpseItemPresetFactory3 = new org.mafagafogigante.dungeon.entity.creatures.CorpseItemPresetFactory(creatureFactory2);
    java.util.Collection<org.mafagafogigante.dungeon.entity.items.ItemPreset> collection_itemPreset4 = corpseItemPresetFactory3.getItemPresets();
    java.util.Collection<org.mafagafogigante.dungeon.entity.items.ItemPreset> collection_itemPreset5 = corpseItemPresetFactory3.getItemPresets();
    org.mafagafogigante.dungeon.entity.creatures.CreaturePresetFactory[] creaturePresetFactory_array6 = new org.mafagafogigante.dungeon.entity.creatures.CreaturePresetFactory[] {  };
    org.mafagafogigante.dungeon.entity.creatures.CreatureFactory creatureFactory7 = new org.mafagafogigante.dungeon.entity.creatures.CreatureFactory(creaturePresetFactory_array6);
    org.mafagafogigante.dungeon.entity.creatures.CreatureFactory creatureFactory8 = new org.mafagafogigante.dungeon.entity.creatures.CreatureFactory(creaturePresetFactory_array6);
    org.mafagafogigante.dungeon.entity.creatures.CorpseItemPresetFactory corpseItemPresetFactory9 = new org.mafagafogigante.dungeon.entity.creatures.CorpseItemPresetFactory(creatureFactory8);
    org.mafagafogigante.dungeon.entity.creatures.CreaturePresetFactory[] creaturePresetFactory_array10 = new org.mafagafogigante.dungeon.entity.creatures.CreaturePresetFactory[] {  };
    org.mafagafogigante.dungeon.entity.creatures.CreatureFactory creatureFactory11 = new org.mafagafogigante.dungeon.entity.creatures.CreatureFactory(creaturePresetFactory_array10);
    org.mafagafogigante.dungeon.entity.creatures.CreatureFactory creatureFactory12 = new org.mafagafogigante.dungeon.entity.creatures.CreatureFactory(creaturePresetFactory_array10);
    org.mafagafogigante.dungeon.entity.creatures.CorpseItemPresetFactory corpseItemPresetFactory13 = new org.mafagafogigante.dungeon.entity.creatures.CorpseItemPresetFactory(creatureFactory12);
    org.mafagafogigante.dungeon.entity.items.ItemPresetFactory[] itemPresetFactory_array14 = new org.mafagafogigante.dungeon.entity.items.ItemPresetFactory[] { corpseItemPresetFactory3, corpseItemPresetFactory9, corpseItemPresetFactory13 };
    org.mafagafogigante.dungeon.entity.items.ItemFactory itemFactory15 = new org.mafagafogigante.dungeon.entity.items.ItemFactory(itemPresetFactory_array14);
    org.mafagafogigante.dungeon.entity.creatures.Creature creature16 = null;
    org.mafagafogigante.dungeon.date.Date date20 = new org.mafagafogigante.dungeon.date.Date(10L, 100L, 100L);
    org.mafagafogigante.dungeon.date.Date date24 = new org.mafagafogigante.dungeon.date.Date(10L, 100L, 100L);
    int i25 = date20.compareTo(date24);
    org.mafagafogigante.dungeon.game.PartOfDay partOfDay26 = org.mafagafogigante.dungeon.game.PartOfDay.getCorrespondingConstant(date20);
    java.lang.String[] str_array32 = new java.lang.String[] { "hi!", "visibilityCriteria=VisibilityCriteria{[]}", "visibilityCriteria=VisibilityCriteria{[]}", "Damaged", "hi!" };
    org.mafagafogigante.dungeon.util.Table table33 = new org.mafagafogigante.dungeon.util.Table(str_array32);
    java.util.List<org.mafagafogigante.dungeon.game.ColoredString> list_coloredString34 = table33.toColoredStringList();
    org.mafagafogigante.dungeon.game.ColoredString coloredString35 = org.mafagafogigante.dungeon.game.Random.select(list_coloredString34);
    boolean b36 = date20.equals((java.lang.Object)coloredString35);
    org.mafagafogigante.dungeon.date.Date date40 = new org.mafagafogigante.dungeon.date.Date(10L, 100L, 100L);
    org.mafagafogigante.dungeon.date.Date date44 = new org.mafagafogigante.dungeon.date.Date(10L, 100L, 100L);
    int i45 = date40.compareTo(date44);
    org.mafagafogigante.dungeon.game.PartOfDay partOfDay46 = org.mafagafogigante.dungeon.game.PartOfDay.getCorrespondingConstant(date40);
    long long47 = date40.getYear();
    org.mafagafogigante.dungeon.date.Date date51 = new org.mafagafogigante.dungeon.date.Date(10L, 100L, 100L);
    org.mafagafogigante.dungeon.date.Date date55 = new org.mafagafogigante.dungeon.date.Date(10L, 100L, 100L);
    int i56 = date51.compareTo(date55);
    long long57 = date51.getYear();
    int i58 = date40.compareTo(date51);
    org.mafagafogigante.dungeon.date.Duration duration59 = new org.mafagafogigante.dungeon.date.Duration(date20, date51);
    org.mafagafogigante.dungeon.date.Date date64 = new org.mafagafogigante.dungeon.date.Date(10L, 100L, 100L);
    org.mafagafogigante.dungeon.date.Date date68 = new org.mafagafogigante.dungeon.date.Date(10L, 100L, 100L);
    int i69 = date64.compareTo(date68);
    org.mafagafogigante.dungeon.game.PartOfDay partOfDay70 = org.mafagafogigante.dungeon.game.PartOfDay.getCorrespondingConstant(date64);
    long long71 = date64.getYear();
    org.mafagafogigante.dungeon.date.Date date75 = new org.mafagafogigante.dungeon.date.Date(10L, 100L, 100L);
    org.mafagafogigante.dungeon.date.Date date79 = new org.mafagafogigante.dungeon.date.Date(10L, 100L, 100L);
    int i80 = date75.compareTo(date79);
    long long81 = date75.getYear();
    int i82 = date64.compareTo(date75);
    org.mafagafogigante.dungeon.date.DungeonTimeUnit dungeonTimeUnit84 = org.mafagafogigante.dungeon.date.DungeonTimeUnit.HOUR;
    org.mafagafogigante.dungeon.date.Date date85 = date75.minus(35, dungeonTimeUnit84);
    org.mafagafogigante.dungeon.date.Date date86 = date51.plus(3, dungeonTimeUnit84);
    long long87 = date86.getMonth();
    org.mafagafogigante.dungeon.world.Weather weather88 = new org.mafagafogigante.dungeon.world.Weather(date86);
    org.mafagafogigante.dungeon.game.PartOfDay partOfDay89 = org.mafagafogigante.dungeon.game.PartOfDay.getCorrespondingConstant(date86);
    // The following exception was thrown during execution in test generation
    try {
    org.mafagafogigante.dungeon.entity.items.Item item90 = itemFactory15.makeCorpse(creature16, date86);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(creaturePresetFactory_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection_itemPreset4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection_itemPreset5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(creaturePresetFactory_array6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(creaturePresetFactory_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(itemPresetFactory_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == 0);
    org.junit.Assert.assertTrue("'" + partOfDay26 + "' != '" + org.mafagafogigante.dungeon.game.PartOfDay.MIDNIGHT + "'", partOfDay26.equals(org.mafagafogigante.dungeon.game.PartOfDay.MIDNIGHT));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_coloredString34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(coloredString35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i45 == 0);
    org.junit.Assert.assertTrue("'" + partOfDay46 + "' != '" + org.mafagafogigante.dungeon.game.PartOfDay.MIDNIGHT + "'", partOfDay46.equals(org.mafagafogigante.dungeon.game.PartOfDay.MIDNIGHT));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long47 == 10L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i56 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long57 == 10L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i58 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i69 == 0);
    org.junit.Assert.assertTrue("'" + partOfDay70 + "' != '" + org.mafagafogigante.dungeon.game.PartOfDay.MIDNIGHT + "'", partOfDay70.equals(org.mafagafogigante.dungeon.game.PartOfDay.MIDNIGHT));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long71 == 10L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i80 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long81 == 10L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i82 == 0);
    org.junit.Assert.assertTrue("'" + dungeonTimeUnit84 + "' != '" + org.mafagafogigante.dungeon.date.DungeonTimeUnit.HOUR + "'", dungeonTimeUnit84.equals(org.mafagafogigante.dungeon.date.DungeonTimeUnit.HOUR));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(date85);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(date86);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long87 == 10L);
    org.junit.Assert.assertTrue("'" + partOfDay89 + "' != '" + org.mafagafogigante.dungeon.game.PartOfDay.NIGHT + "'", partOfDay89.equals(org.mafagafogigante.dungeon.game.PartOfDay.NIGHT));

  }

  @Test
  public void test055() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test055"); }

    org.mafagafogigante.dungeon.world.VisibilityCriterion[] visibilityCriterion_array0 = new org.mafagafogigante.dungeon.world.VisibilityCriterion[] {  };
    org.mafagafogigante.dungeon.world.VisibilityCriteria visibilityCriteria1 = new org.mafagafogigante.dungeon.world.VisibilityCriteria(visibilityCriterion_array0);
    org.mafagafogigante.dungeon.entity.creatures.Creature creature2 = null;
    org.mafagafogigante.dungeon.entity.creatures.Observer observer3 = new org.mafagafogigante.dungeon.entity.creatures.Observer(creature2);
    boolean b4 = visibilityCriteria1.isMetBy(observer3);
    org.mafagafogigante.dungeon.entity.items.Item[] item_array5 = new org.mafagafogigante.dungeon.entity.items.Item[] {  };
    java.util.ArrayList<org.mafagafogigante.dungeon.entity.items.Item> arraylist_item6 = new java.util.ArrayList<org.mafagafogigante.dungeon.entity.items.Item>();
    boolean b7 = java.util.Collections.addAll((java.util.Collection<org.mafagafogigante.dungeon.entity.items.Item>)arraylist_item6, item_array5);
    org.mafagafogigante.dungeon.game.DungeonString dungeonString9 = new org.mafagafogigante.dungeon.game.DungeonString("hi!");
    observer3.writeItemSight((java.util.List<org.mafagafogigante.dungeon.entity.items.Item>)arraylist_item6, dungeonString9);
    org.mafagafogigante.dungeon.world.VisibilityCriterion[] visibilityCriterion_array11 = new org.mafagafogigante.dungeon.world.VisibilityCriterion[] {  };
    org.mafagafogigante.dungeon.world.VisibilityCriteria visibilityCriteria12 = new org.mafagafogigante.dungeon.world.VisibilityCriteria(visibilityCriterion_array11);
    org.mafagafogigante.dungeon.entity.creatures.Creature creature13 = null;
    org.mafagafogigante.dungeon.entity.creatures.Observer observer14 = new org.mafagafogigante.dungeon.entity.creatures.Observer(creature13);
    boolean b15 = visibilityCriteria12.isMetBy(observer14);
    org.mafagafogigante.dungeon.entity.items.Item[] item_array16 = new org.mafagafogigante.dungeon.entity.items.Item[] {  };
    java.util.ArrayList<org.mafagafogigante.dungeon.entity.items.Item> arraylist_item17 = new java.util.ArrayList<org.mafagafogigante.dungeon.entity.items.Item>();
    boolean b18 = java.util.Collections.addAll((java.util.Collection<org.mafagafogigante.dungeon.entity.items.Item>)arraylist_item17, item_array16);
    org.mafagafogigante.dungeon.game.DungeonString dungeonString20 = new org.mafagafogigante.dungeon.game.DungeonString("hi!");
    observer14.writeItemSight((java.util.List<org.mafagafogigante.dungeon.entity.items.Item>)arraylist_item17, dungeonString20);
    org.mafagafogigante.dungeon.game.DungeonString dungeonString23 = new org.mafagafogigante.dungeon.game.DungeonString("");
    java.util.List<org.mafagafogigante.dungeon.game.ColoredString> list_coloredString24 = dungeonString23.toColoredStringList();
    observer3.writeItemSight((java.util.List<org.mafagafogigante.dungeon.entity.items.Item>)arraylist_item17, dungeonString23);
    org.mafagafogigante.dungeon.gui.WritingSpecifications writingSpecifications28 = new org.mafagafogigante.dungeon.gui.WritingSpecifications(false, 32);
    boolean b29 = writingSpecifications28.shouldWait();
    int i30 = writingSpecifications28.getWait();
    org.mafagafogigante.dungeon.io.Writer.write((org.mafagafogigante.dungeon.game.Writable)dungeonString23, writingSpecifications28);
    org.mafagafogigante.dungeon.date.Date date37 = new org.mafagafogigante.dungeon.date.Date(10L, 100L, 100L);
    org.mafagafogigante.dungeon.date.Date date41 = new org.mafagafogigante.dungeon.date.Date(10L, 100L, 100L);
    int i42 = date37.compareTo(date41);
    org.mafagafogigante.dungeon.game.PartOfDay partOfDay43 = org.mafagafogigante.dungeon.game.PartOfDay.getCorrespondingConstant(date37);
    java.lang.String[] str_array49 = new java.lang.String[] { "hi!", "visibilityCriteria=VisibilityCriteria{[]}", "visibilityCriteria=VisibilityCriteria{[]}", "Damaged", "hi!" };
    org.mafagafogigante.dungeon.util.Table table50 = new org.mafagafogigante.dungeon.util.Table(str_array49);
    java.util.List<org.mafagafogigante.dungeon.game.ColoredString> list_coloredString51 = table50.toColoredStringList();
    org.mafagafogigante.dungeon.game.ColoredString coloredString52 = org.mafagafogigante.dungeon.game.Random.select(list_coloredString51);
    boolean b53 = date37.equals((java.lang.Object)coloredString52);
    java.awt.Color color54 = coloredString52.getColor();
    org.mafagafogigante.dungeon.game.ColoredString coloredString55 = new org.mafagafogigante.dungeon.game.ColoredString("User: Nicholas\nTime: 15:42:12\nDate: 2017-04-09\nJava: Java version 1.8.0_121 by Oracle Corporation\nHeap: Using 41.5 MiB out of the allocated 154.5 MiB\nOS: Windows 10 (amd64) 10.0", color54);
    org.mafagafogigante.dungeon.game.ColoredString coloredString56 = new org.mafagafogigante.dungeon.game.ColoredString("Unarmed : UNARMED", color54);
    dungeonString23.setColor(color54);
    java.lang.String str58 = dungeonString23.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(visibilityCriterion_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(item_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(visibilityCriterion_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(item_array16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_coloredString24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i30 == 32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i42 == 0);
    org.junit.Assert.assertTrue("'" + partOfDay43 + "' != '" + org.mafagafogigante.dungeon.game.PartOfDay.MIDNIGHT + "'", partOfDay43.equals(org.mafagafogigante.dungeon.game.PartOfDay.MIDNIGHT));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_coloredString51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(coloredString52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str58 + "' != '" + "DungeonString{coloredStringList=[], currentColor=java.awt.Color[r=192,g=192,b=192]}"+ "'", str58.equals("DungeonString{coloredStringList=[], currentColor=java.awt.Color[r=192,g=192,b=192]}"));

  }

  @Test
  public void test056() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test056"); }

    org.mafagafogigante.dungeon.game.BlockedEntrances blockedEntrances0 = new org.mafagafogigante.dungeon.game.BlockedEntrances();
    org.mafagafogigante.dungeon.game.Direction direction1 = org.mafagafogigante.dungeon.game.Direction.EAST;
    boolean b3 = direction1.equalsIgnoreCase("");
    blockedEntrances0.block(direction1);
    org.mafagafogigante.dungeon.game.BlockedEntrances blockedEntrances5 = new org.mafagafogigante.dungeon.game.BlockedEntrances(blockedEntrances0);
    org.mafagafogigante.dungeon.game.Direction direction6 = org.mafagafogigante.dungeon.game.Direction.EAST;
    org.mafagafogigante.dungeon.game.Direction direction7 = direction6.invert();
    blockedEntrances5.block(direction7);
    org.mafagafogigante.dungeon.game.Direction direction9 = org.mafagafogigante.dungeon.game.Direction.EAST;
    java.lang.String str10 = direction9.toString();
    java.lang.String str11 = direction9.toString();
    blockedEntrances5.block(direction9);
    org.mafagafogigante.dungeon.game.BlockedEntrances blockedEntrances13 = new org.mafagafogigante.dungeon.game.BlockedEntrances();
    org.mafagafogigante.dungeon.game.BlockedEntrances blockedEntrances14 = new org.mafagafogigante.dungeon.game.BlockedEntrances(blockedEntrances13);
    org.mafagafogigante.dungeon.game.Direction direction15 = org.mafagafogigante.dungeon.game.Direction.EAST;
    java.lang.String str16 = direction15.toString();
    java.lang.String str17 = direction15.toString();
    blockedEntrances13.block(direction15);
    blockedEntrances5.block(direction15);
    org.mafagafogigante.dungeon.game.Direction direction20 = org.mafagafogigante.dungeon.game.Direction.EAST;
    boolean b22 = direction20.equalsIgnoreCase("Damaged");
    java.lang.String str23 = direction20.toString();
    java.lang.String str24 = direction20.toString();
    blockedEntrances5.block(direction20);
    org.junit.Assert.assertTrue("'" + direction1 + "' != '" + org.mafagafogigante.dungeon.game.Direction.EAST + "'", direction1.equals(org.mafagafogigante.dungeon.game.Direction.EAST));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    org.junit.Assert.assertTrue("'" + direction6 + "' != '" + org.mafagafogigante.dungeon.game.Direction.EAST + "'", direction6.equals(org.mafagafogigante.dungeon.game.Direction.EAST));
    org.junit.Assert.assertTrue("'" + direction7 + "' != '" + org.mafagafogigante.dungeon.game.Direction.WEST + "'", direction7.equals(org.mafagafogigante.dungeon.game.Direction.WEST));
    org.junit.Assert.assertTrue("'" + direction9 + "' != '" + org.mafagafogigante.dungeon.game.Direction.EAST + "'", direction9.equals(org.mafagafogigante.dungeon.game.Direction.EAST));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "East"+ "'", str10.equals("East"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "East"+ "'", str11.equals("East"));
    org.junit.Assert.assertTrue("'" + direction15 + "' != '" + org.mafagafogigante.dungeon.game.Direction.EAST + "'", direction15.equals(org.mafagafogigante.dungeon.game.Direction.EAST));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "East"+ "'", str16.equals("East"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "East"+ "'", str17.equals("East"));
    org.junit.Assert.assertTrue("'" + direction20 + "' != '" + org.mafagafogigante.dungeon.game.Direction.EAST + "'", direction20.equals(org.mafagafogigante.dungeon.game.Direction.EAST));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + "East"+ "'", str23.equals("East"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str24 + "' != '" + "East"+ "'", str24.equals("East"));

  }

  @Test
  public void test057() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test057"); }

    org.mafagafogigante.dungeon.stats.Statistics statistics0 = new org.mafagafogigante.dungeon.stats.Statistics();
    statistics0.writeStatistics();
    statistics0.writeStatistics();
    org.mafagafogigante.dungeon.achievements.AchievementTracker achievementTracker3 = new org.mafagafogigante.dungeon.achievements.AchievementTracker(statistics0);
    org.mafagafogigante.dungeon.achievements.AchievementTracker achievementTracker4 = new org.mafagafogigante.dungeon.achievements.AchievementTracker(statistics0);
    statistics0.writeStatistics();

  }

  @Test
  public void test058() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test058"); }

    org.mafagafogigante.dungeon.entity.creatures.Creature creature0 = null;
    org.mafagafogigante.dungeon.entity.creatures.Observer observer1 = new org.mafagafogigante.dungeon.entity.creatures.Observer(creature0);
    org.mafagafogigante.dungeon.entity.creatures.Creature[] creature_array2 = new org.mafagafogigante.dungeon.entity.creatures.Creature[] {  };
    java.util.ArrayList<org.mafagafogigante.dungeon.entity.creatures.Creature> arraylist_creature3 = new java.util.ArrayList<org.mafagafogigante.dungeon.entity.creatures.Creature>();
    boolean b4 = java.util.Collections.addAll((java.util.Collection<org.mafagafogigante.dungeon.entity.creatures.Creature>)arraylist_creature3, creature_array2);
    org.mafagafogigante.dungeon.game.DungeonString dungeonString6 = new org.mafagafogigante.dungeon.game.DungeonString("");
    java.util.List<org.mafagafogigante.dungeon.game.ColoredString> list_coloredString7 = dungeonString6.toColoredStringList();
    observer1.writeCreatureSight((java.util.List<org.mafagafogigante.dungeon.entity.creatures.Creature>)arraylist_creature3, dungeonString6);
    // The following exception was thrown during execution in test generation
    try {
    observer1.look();
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(creature_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_coloredString7);

  }

  @Test
  public void test059() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test059"); }

    org.mafagafogigante.dungeon.entity.creatures.Creature creature0 = null;
    org.mafagafogigante.dungeon.entity.items.CreatureInventory creatureInventory3 = new org.mafagafogigante.dungeon.entity.items.CreatureInventory(creature0, (-1), 0.0d);
    org.mafagafogigante.dungeon.entity.Weight weight4 = creatureInventory3.getWeight();
    int i5 = creatureInventory3.getItemCount();
    int i6 = creatureInventory3.getItemCount();
    org.mafagafogigante.dungeon.entity.Weight weight7 = creatureInventory3.getWeightLimit();
    org.mafagafogigante.dungeon.entity.items.Item item8 = null;
    // The following exception was thrown during execution in test generation
    try {
    creatureInventory3.addItem(item8);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(weight4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(weight7);

  }

  @Test
  public void test060() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test060"); }

    org.mafagafogigante.dungeon.entity.creatures.CreaturePreset creaturePreset0 = new org.mafagafogigante.dungeon.entity.creatures.CreaturePreset();
    org.mafagafogigante.dungeon.game.Id id1 = null;
    creaturePreset0.setWeaponId(id1);
    creaturePreset0.setAttack(57);
    org.mafagafogigante.dungeon.entity.Luminosity luminosity5 = creaturePreset0.getLuminosity();
    creaturePreset0.setInventoryItemLimit(57);
    org.mafagafogigante.dungeon.util.Percentage percentage9 = new org.mafagafogigante.dungeon.util.Percentage((double)'#');
    boolean b11 = percentage9.equals((java.lang.Object)10.0d);
    org.mafagafogigante.dungeon.entity.Luminosity luminosity12 = new org.mafagafogigante.dungeon.entity.Luminosity(percentage9);
    org.mafagafogigante.dungeon.util.Percentage percentage13 = luminosity12.toPercentage();
    java.lang.String str14 = percentage13.toString();
    creaturePreset0.setVisibility(percentage13);
    org.mafagafogigante.dungeon.game.Name name16 = creaturePreset0.getName();
    creaturePreset0.setHealth(17518);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(luminosity5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(percentage13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "100.00%"+ "'", str14.equals("100.00%"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(name16);

  }

  @Test
  public void test061() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test061"); }

    org.mafagafogigante.dungeon.entity.creatures.CreaturePresetFactory[] creaturePresetFactory_array0 = new org.mafagafogigante.dungeon.entity.creatures.CreaturePresetFactory[] {  };
    org.mafagafogigante.dungeon.entity.creatures.CreatureFactory creatureFactory1 = new org.mafagafogigante.dungeon.entity.creatures.CreatureFactory(creaturePresetFactory_array0);
    org.mafagafogigante.dungeon.entity.creatures.CreatureFactory creatureFactory2 = new org.mafagafogigante.dungeon.entity.creatures.CreatureFactory(creaturePresetFactory_array0);
    org.mafagafogigante.dungeon.game.Id id3 = null;
    org.mafagafogigante.dungeon.game.World world4 = null;
    org.mafagafogigante.dungeon.entity.creatures.Creature creature5 = creatureFactory2.makeCreature(id3, world4);
    org.mafagafogigante.dungeon.game.Id id6 = null;
    org.mafagafogigante.dungeon.game.World world7 = null;
    org.mafagafogigante.dungeon.entity.creatures.Creature creature8 = creatureFactory2.makeCreature(id6, world7);
    org.mafagafogigante.dungeon.date.Date date12 = new org.mafagafogigante.dungeon.date.Date(10L, 100L, 100L);
    org.mafagafogigante.dungeon.date.Date date16 = new org.mafagafogigante.dungeon.date.Date(10L, 100L, 100L);
    int i17 = date12.compareTo(date16);
    long long18 = date16.getDay();
    long long19 = date16.getHour();
    org.mafagafogigante.dungeon.date.DungeonTimeUnit dungeonTimeUnit21 = org.mafagafogigante.dungeon.date.DungeonTimeUnit.DAY;
    org.mafagafogigante.dungeon.date.Date date22 = date16.plus(17518, dungeonTimeUnit21);
    org.mafagafogigante.dungeon.game.World world23 = null;
    org.mafagafogigante.dungeon.stats.Statistics statistics24 = new org.mafagafogigante.dungeon.stats.Statistics();
    statistics24.writeStatistics();
    // The following exception was thrown during execution in test generation
    try {
    org.mafagafogigante.dungeon.entity.creatures.Hero hero26 = creatureFactory2.makeHero(date22, world23, statistics24);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(creaturePresetFactory_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(creature5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(creature8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long18 == 10L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long19 == 0L);
    org.junit.Assert.assertTrue("'" + dungeonTimeUnit21 + "' != '" + org.mafagafogigante.dungeon.date.DungeonTimeUnit.DAY + "'", dungeonTimeUnit21.equals(org.mafagafogigante.dungeon.date.DungeonTimeUnit.DAY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(date22);

  }

  @Test
  public void test062() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test062"); }

    // The following exception was thrown during execution in test generation
    try {
    org.mafagafogigante.dungeon.date.Duration duration1 = org.mafagafogigante.dungeon.date.DungeonTimeParser.parsePeriod("a few Nights");
      org.junit.Assert.fail("Expected exception of type org.mafagafogigante.dungeon.date.DungeonTimeParser.InvalidMultiplierException");
    } catch (org.mafagafogigante.dungeon.date.DungeonTimeParser.InvalidMultiplierException e) {
      // Expected exception.
    }

  }

  @Test
  public void test063() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test063"); }

    // The following exception was thrown during execution in test generation
    try {
    org.mafagafogigante.dungeon.game.Id id1 = new org.mafagafogigante.dungeon.game.Id("LocationDescription{symbol=4, color=null, info='You don't discover anything.'}");
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  @Test
  public void test064() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test064"); }

    org.mafagafogigante.dungeon.stats.ExplorationStatistics explorationStatistics0 = new org.mafagafogigante.dungeon.stats.ExplorationStatistics();
    org.mafagafogigante.dungeon.game.Point point1 = null;
    org.mafagafogigante.dungeon.game.Id id2 = null;
    explorationStatistics0.createEntryIfNotExists(point1, id2);
    org.mafagafogigante.dungeon.game.Point point7 = new org.mafagafogigante.dungeon.game.Point(10, (int)'a', 0);
    java.lang.String[] str_array10 = new java.lang.String[] { "", "" };
    org.mafagafogigante.dungeon.util.Table table11 = new org.mafagafogigante.dungeon.util.Table(str_array10);
    boolean b12 = point7.equals((java.lang.Object)str_array10);
    org.mafagafogigante.dungeon.game.Id id13 = null;
    explorationStatistics0.addVisit(point7, id13);
    java.lang.String str15 = point7.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "{10, 97, 0}"+ "'", str15.equals("{10, 97, 0}"));

  }

  @Test
  public void test065() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test065"); }

    org.mafagafogigante.dungeon.entity.Weight weight1 = org.mafagafogigante.dungeon.entity.Weight.newInstance((double)20601);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(weight1);

  }

  @Test
  public void test066() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test066"); }

    org.mafagafogigante.dungeon.game.Id id0 = null;
    org.mafagafogigante.dungeon.entity.items.BookComponent bookComponent2 = new org.mafagafogigante.dungeon.entity.items.BookComponent(id0, " : day 10 of month 1 of the year 1");
    int i3 = bookComponent2.getTimeToRead();
    org.mafagafogigante.dungeon.game.Id id4 = bookComponent2.getSpellId();
    java.lang.String str5 = bookComponent2.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(id4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "This book teaches nothing. Text:  : day 10 of month 1 of the year 1"+ "'", str5.equals("This book teaches nothing. Text:  : day 10 of month 1 of the year 1"));

  }

  @Test
  public void test067() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test067"); }

    org.mafagafogigante.dungeon.entity.items.ItemPreset itemPreset0 = new org.mafagafogigante.dungeon.entity.items.ItemPreset();
    org.mafagafogigante.dungeon.entity.Integrity integrity1 = itemPreset0.getIntegrity();
    org.mafagafogigante.dungeon.entity.Integrity integrity2 = null;
    itemPreset0.setIntegrity(integrity2);
    org.mafagafogigante.dungeon.util.Percentage percentage4 = itemPreset0.getVisibility();
    org.mafagafogigante.dungeon.entity.Integrity integrity5 = itemPreset0.getIntegrity();
    java.lang.String str6 = itemPreset0.getText();
    java.lang.String str7 = itemPreset0.getType();
    org.mafagafogigante.dungeon.entity.Integrity integrity10 = new org.mafagafogigante.dungeon.entity.Integrity(1, 0);
    boolean b11 = integrity10.isMaximum();
    integrity10.incrementBy((int)(short)0);
    org.mafagafogigante.dungeon.util.Percentage percentage14 = integrity10.toPercentage();
    itemPreset0.setHitRate(percentage14);
    itemPreset0.setDrinkableHealing((int)(short)-1);
    org.mafagafogigante.dungeon.util.Percentage percentage19 = new org.mafagafogigante.dungeon.util.Percentage(28.0d);
    itemPreset0.setVisibility(percentage19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(integrity1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(percentage4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(integrity5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(percentage14);

  }

  @Test
  public void test068() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test068"); }

    org.mafagafogigante.dungeon.world.VisibilityCriterion[] visibilityCriterion_array0 = new org.mafagafogigante.dungeon.world.VisibilityCriterion[] {  };
    org.mafagafogigante.dungeon.world.VisibilityCriteria visibilityCriteria1 = new org.mafagafogigante.dungeon.world.VisibilityCriteria(visibilityCriterion_array0);
    org.mafagafogigante.dungeon.entity.creatures.Creature creature2 = null;
    org.mafagafogigante.dungeon.entity.creatures.Observer observer3 = new org.mafagafogigante.dungeon.entity.creatures.Observer(creature2);
    boolean b4 = visibilityCriteria1.isMetBy(observer3);
    java.lang.String str5 = visibilityCriteria1.toString();
    java.lang.String str6 = visibilityCriteria1.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(visibilityCriterion_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "visibilityCriteria=VisibilityCriteria{[]}"+ "'", str5.equals("visibilityCriteria=VisibilityCriteria{[]}"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "visibilityCriteria=VisibilityCriteria{[]}"+ "'", str6.equals("visibilityCriteria=VisibilityCriteria{[]}"));

  }

  @Test
  public void test069() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test069"); }

    org.mafagafogigante.dungeon.entity.creatures.Creature creature1 = null;
    org.mafagafogigante.dungeon.entity.creatures.CreatureHealth creatureHealth2 = org.mafagafogigante.dungeon.entity.creatures.CreatureHealth.makeCreatureHealth(100, creature1);
    boolean b3 = creatureHealth2.isAlive();
    java.lang.String str4 = creatureHealth2.toString();
    creatureHealth2.decrementBy((int)(byte)10);
    org.mafagafogigante.dungeon.entity.creatures.HealthState healthState7 = creatureHealth2.getHealthState();
    int i8 = creatureHealth2.getCurrent();
    org.mafagafogigante.dungeon.util.Percentage percentage9 = creatureHealth2.toPercentage();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(creatureHealth2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "CreatureHealth{integrity=100/100}"+ "'", str4.equals("CreatureHealth{integrity=100/100}"));
    org.junit.Assert.assertTrue("'" + healthState7 + "' != '" + org.mafagafogigante.dungeon.entity.creatures.HealthState.UNINJURED + "'", healthState7.equals(org.mafagafogigante.dungeon.entity.creatures.HealthState.UNINJURED));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 90);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(percentage9);

  }

  @Test
  public void test070() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test070"); }

    org.mafagafogigante.dungeon.stats.WorldStatistics worldStatistics0 = new org.mafagafogigante.dungeon.stats.WorldStatistics();
    int i1 = worldStatistics0.getSpawnCount();
    org.mafagafogigante.dungeon.util.CounterMap<java.lang.String> countermap_str2 = worldStatistics0.getLocationCounter();
    // The following exception was thrown during execution in test generation
    try {
    org.mafagafogigante.dungeon.game.World world3 = new org.mafagafogigante.dungeon.game.World(worldStatistics0);
      org.junit.Assert.fail("Expected exception of type java.lang.NoClassDefFoundError");
    } catch (java.lang.NoClassDefFoundError e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(countermap_str2);

  }

  @Test
  public void test071() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test071"); }

    org.mafagafogigante.dungeon.util.SystemInformation systemInformation0 = new org.mafagafogigante.dungeon.util.SystemInformation();
    org.mafagafogigante.dungeon.io.Writer.writeAndWait((org.mafagafogigante.dungeon.game.Writable)systemInformation0);
    java.util.List<org.mafagafogigante.dungeon.game.ColoredString> list_coloredString2 = systemInformation0.toColoredStringList();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_coloredString2);

  }

  @Test
  public void test072() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test072"); }

    org.mafagafogigante.dungeon.world.VisibilityCriterion[] visibilityCriterion_array0 = new org.mafagafogigante.dungeon.world.VisibilityCriterion[] {  };
    org.mafagafogigante.dungeon.world.VisibilityCriteria visibilityCriteria1 = new org.mafagafogigante.dungeon.world.VisibilityCriteria(visibilityCriterion_array0);
    org.mafagafogigante.dungeon.world.VisibilityCriteria visibilityCriteria2 = new org.mafagafogigante.dungeon.world.VisibilityCriteria(visibilityCriterion_array0);
    org.mafagafogigante.dungeon.world.VisibilityCriterion[] visibilityCriterion_array3 = new org.mafagafogigante.dungeon.world.VisibilityCriterion[] {  };
    org.mafagafogigante.dungeon.world.VisibilityCriteria visibilityCriteria4 = new org.mafagafogigante.dungeon.world.VisibilityCriteria(visibilityCriterion_array3);
    org.mafagafogigante.dungeon.entity.creatures.Creature creature5 = null;
    org.mafagafogigante.dungeon.entity.creatures.Observer observer6 = new org.mafagafogigante.dungeon.entity.creatures.Observer(creature5);
    boolean b7 = visibilityCriteria4.isMetBy(observer6);
    org.mafagafogigante.dungeon.entity.items.Item[] item_array8 = new org.mafagafogigante.dungeon.entity.items.Item[] {  };
    java.util.ArrayList<org.mafagafogigante.dungeon.entity.items.Item> arraylist_item9 = new java.util.ArrayList<org.mafagafogigante.dungeon.entity.items.Item>();
    boolean b10 = java.util.Collections.addAll((java.util.Collection<org.mafagafogigante.dungeon.entity.items.Item>)arraylist_item9, item_array8);
    org.mafagafogigante.dungeon.game.DungeonString dungeonString12 = new org.mafagafogigante.dungeon.game.DungeonString("hi!");
    java.lang.String[] str_array17 = new java.lang.String[] { "hi!", "Damaged", "BattleStatistics{records=CounterMap{map={}}}", "" };
    dungeonString12.append(str_array17);
    observer6.writeItemSight((java.util.List<org.mafagafogigante.dungeon.entity.items.Item>)arraylist_item9, dungeonString12);
    org.mafagafogigante.dungeon.entity.items.Item[] item_array20 = new org.mafagafogigante.dungeon.entity.items.Item[] {  };
    java.util.ArrayList<org.mafagafogigante.dungeon.entity.items.Item> arraylist_item21 = new java.util.ArrayList<org.mafagafogigante.dungeon.entity.items.Item>();
    boolean b22 = java.util.Collections.addAll((java.util.Collection<org.mafagafogigante.dungeon.entity.items.Item>)arraylist_item21, item_array20);
    java.lang.String[] str_array28 = new java.lang.String[] { "CounterMap{map={}}", "User: Nicholas\nTime: 15:42:12\nDate: 2017-04-09\nJava: Java version 1.8.0_121 by Oracle Corporation\nHeap: Using 34.4 MiB out of the allocated 123.0 MiB\nOS: Windows 10 (amd64) 10.0", "hi!", "0 ms", "User: Nicholas\nTime: 15:42:12\nDate: 2017-04-09\nJava: Java version 1.8.0_121 by Oracle Corporation\nHeap: Using 41.5 MiB out of the allocated 154.5 MiB\nOS: Windows 10 (amd64) 10.0" };
    java.util.List<org.mafagafogigante.dungeon.entity.items.Item> list_item29 = org.mafagafogigante.dungeon.entity.creatures.HeroUtils.findItems((java.util.List<org.mafagafogigante.dungeon.entity.items.Item>)arraylist_item21, str_array28);
    org.mafagafogigante.dungeon.game.DungeonString dungeonString31 = new org.mafagafogigante.dungeon.game.DungeonString("hi!");
    observer6.writeItemSight(list_item29, dungeonString31);
    boolean b33 = visibilityCriteria2.isMetBy(observer6);
    org.mafagafogigante.dungeon.entity.creatures.Creature creature34 = null;
    org.mafagafogigante.dungeon.entity.creatures.Observer observer35 = new org.mafagafogigante.dungeon.entity.creatures.Observer(creature34);
    org.mafagafogigante.dungeon.entity.creatures.Creature[] creature_array36 = new org.mafagafogigante.dungeon.entity.creatures.Creature[] {  };
    java.util.ArrayList<org.mafagafogigante.dungeon.entity.creatures.Creature> arraylist_creature37 = new java.util.ArrayList<org.mafagafogigante.dungeon.entity.creatures.Creature>();
    boolean b38 = java.util.Collections.addAll((java.util.Collection<org.mafagafogigante.dungeon.entity.creatures.Creature>)arraylist_creature37, creature_array36);
    org.mafagafogigante.dungeon.game.DungeonString dungeonString40 = new org.mafagafogigante.dungeon.game.DungeonString("");
    java.util.List<org.mafagafogigante.dungeon.game.ColoredString> list_coloredString41 = dungeonString40.toColoredStringList();
    observer35.writeCreatureSight((java.util.List<org.mafagafogigante.dungeon.entity.creatures.Creature>)arraylist_creature37, dungeonString40);
    boolean b43 = visibilityCriteria2.isMetBy(observer35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(visibilityCriterion_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(visibilityCriterion_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(item_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(item_array20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_item29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(creature_array36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_coloredString41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == true);

  }

  @Test
  public void test073() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test073"); }

    org.mafagafogigante.dungeon.entity.creatures.CreaturePreset creaturePreset0 = new org.mafagafogigante.dungeon.entity.creatures.CreaturePreset();
    org.mafagafogigante.dungeon.game.Id id1 = null;
    creaturePreset0.setWeaponId(id1);
    creaturePreset0.setAttack(57);
    org.mafagafogigante.dungeon.entity.Luminosity luminosity5 = creaturePreset0.getLuminosity();
    org.mafagafogigante.dungeon.entity.creatures.AttackAlgorithmId attackAlgorithmId6 = org.mafagafogigante.dungeon.entity.creatures.AttackAlgorithmId.BAT;
    creaturePreset0.setAttackAlgorithmId(attackAlgorithmId6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(luminosity5);
    org.junit.Assert.assertTrue("'" + attackAlgorithmId6 + "' != '" + org.mafagafogigante.dungeon.entity.creatures.AttackAlgorithmId.BAT + "'", attackAlgorithmId6.equals(org.mafagafogigante.dungeon.entity.creatures.AttackAlgorithmId.BAT));

  }

  @Test
  public void test074() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test074"); }

    org.mafagafogigante.dungeon.entity.creatures.CreaturePreset creaturePreset0 = new org.mafagafogigante.dungeon.entity.creatures.CreaturePreset();
    org.mafagafogigante.dungeon.game.Id id1 = null;
    creaturePreset0.setWeaponId(id1);
    creaturePreset0.setAttack(57);
    org.mafagafogigante.dungeon.entity.Luminosity luminosity5 = creaturePreset0.getLuminosity();
    creaturePreset0.setInventoryItemLimit(57);
    org.mafagafogigante.dungeon.util.Percentage percentage9 = new org.mafagafogigante.dungeon.util.Percentage((double)'#');
    boolean b11 = percentage9.equals((java.lang.Object)10.0d);
    org.mafagafogigante.dungeon.entity.Luminosity luminosity12 = new org.mafagafogigante.dungeon.entity.Luminosity(percentage9);
    org.mafagafogigante.dungeon.util.Percentage percentage13 = luminosity12.toPercentage();
    java.lang.String str14 = percentage13.toString();
    creaturePreset0.setVisibility(percentage13);
    java.lang.String str16 = creaturePreset0.getType();
    // The following exception was thrown during execution in test generation
    try {
    org.mafagafogigante.dungeon.entity.creatures.Creature creature17 = new org.mafagafogigante.dungeon.entity.creatures.Creature(creaturePreset0);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(luminosity5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(percentage13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "100.00%"+ "'", str14.equals("100.00%"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str16);

  }

  @Test
  public void test075() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test075"); }

    org.mafagafogigante.dungeon.entity.items.ItemPreset itemPreset0 = new org.mafagafogigante.dungeon.entity.items.ItemPreset();
    org.mafagafogigante.dungeon.entity.Integrity integrity1 = itemPreset0.getIntegrity();
    org.mafagafogigante.dungeon.entity.Integrity integrity2 = null;
    itemPreset0.setIntegrity(integrity2);
    org.mafagafogigante.dungeon.util.Percentage percentage4 = itemPreset0.getVisibility();
    java.lang.String str5 = itemPreset0.getType();
    org.mafagafogigante.dungeon.entity.items.Item.Tag tag6 = org.mafagafogigante.dungeon.entity.items.Item.Tag.REPAIRABLE;
    itemPreset0.addTag(tag6);
    org.mafagafogigante.dungeon.util.Percentage percentage9 = new org.mafagafogigante.dungeon.util.Percentage((double)'#');
    boolean b11 = percentage9.equals((java.lang.Object)10.0d);
    org.mafagafogigante.dungeon.entity.Luminosity luminosity12 = new org.mafagafogigante.dungeon.entity.Luminosity(percentage9);
    itemPreset0.setVisibility(percentage9);
    java.lang.String str14 = itemPreset0.getText();
    itemPreset0.setText("User: Nicholas\nTime: 15:43:28\nDate: 2017-04-09\nJava: Java version 1.8.0_121 by Oracle Corporation\nHeap: Using 26.9 MiB out of the allocated 109.5 MiB\nOS: Windows 10 (amd64) 10.0");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(integrity1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(percentage4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str5);
    org.junit.Assert.assertTrue("'" + tag6 + "' != '" + org.mafagafogigante.dungeon.entity.items.Item.Tag.REPAIRABLE + "'", tag6.equals(org.mafagafogigante.dungeon.entity.items.Item.Tag.REPAIRABLE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str14);

  }

  @Test
  public void test076() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test076"); }

    org.mafagafogigante.dungeon.date.Date date3 = new org.mafagafogigante.dungeon.date.Date(10L, 100L, 100L);
    org.mafagafogigante.dungeon.date.Date date7 = new org.mafagafogigante.dungeon.date.Date(10L, 100L, 100L);
    int i8 = date3.compareTo(date7);
    java.lang.String str9 = date3.toTimeString();
    org.mafagafogigante.dungeon.date.DungeonTimeUnit dungeonTimeUnit11 = org.mafagafogigante.dungeon.date.DungeonTimeUnit.MONTH;
    // The following exception was thrown during execution in test generation
    try {
    org.mafagafogigante.dungeon.date.Date date12 = date3.plus((int)(short)-1, dungeonTimeUnit11);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "00:00:00"+ "'", str9.equals("00:00:00"));
    org.junit.Assert.assertTrue("'" + dungeonTimeUnit11 + "' != '" + org.mafagafogigante.dungeon.date.DungeonTimeUnit.MONTH + "'", dungeonTimeUnit11.equals(org.mafagafogigante.dungeon.date.DungeonTimeUnit.MONTH));

  }

  @Test
  public void test077() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test077"); }

    org.mafagafogigante.dungeon.achievements.BattleStatisticsQuery battleStatisticsQuery0 = new org.mafagafogigante.dungeon.achievements.BattleStatisticsQuery();
    battleStatisticsQuery0.setType("Damaged");
    battleStatisticsQuery0.setType("");
    org.mafagafogigante.dungeon.game.Id id5 = null;
    battleStatisticsQuery0.setId(id5);
    org.mafagafogigante.dungeon.game.Id id7 = null;
    org.mafagafogigante.dungeon.achievements.BattleStatisticsQuery battleStatisticsQuery9 = new org.mafagafogigante.dungeon.achievements.BattleStatisticsQuery();
    org.mafagafogigante.dungeon.stats.CauseOfDeath causeOfDeath10 = org.mafagafogigante.dungeon.stats.CauseOfDeath.getUnarmedCauseOfDeath();
    battleStatisticsQuery9.setCauseOfDeath(causeOfDeath10);
    org.mafagafogigante.dungeon.game.PartOfDay partOfDay12 = org.mafagafogigante.dungeon.game.PartOfDay.NIGHT;
    org.mafagafogigante.dungeon.stats.BattleRecord battleRecord13 = new org.mafagafogigante.dungeon.stats.BattleRecord(id7, "", causeOfDeath10, partOfDay12);
    org.mafagafogigante.dungeon.util.NonNegativeInteger nonNegativeInteger15 = new org.mafagafogigante.dungeon.util.NonNegativeInteger((java.lang.Integer)100);
    java.lang.String str16 = nonNegativeInteger15.toString();
    java.lang.Integer i17 = nonNegativeInteger15.toInteger();
    boolean b18 = battleRecord13.equals((java.lang.Object)i17);
    boolean b19 = battleStatisticsQuery0.matches(battleRecord13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(causeOfDeath10);
    org.junit.Assert.assertTrue("'" + partOfDay12 + "' != '" + org.mafagafogigante.dungeon.game.PartOfDay.NIGHT + "'", partOfDay12.equals(org.mafagafogigante.dungeon.game.PartOfDay.NIGHT));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "100"+ "'", str16.equals("100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i17 + "' != '" + 100+ "'", i17.equals(100));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == true);

  }

  @Test
  public void test078() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test078"); }

    org.mafagafogigante.dungeon.entity.items.ItemPreset itemPreset1 = new org.mafagafogigante.dungeon.entity.items.ItemPreset();
    org.mafagafogigante.dungeon.entity.Integrity integrity2 = itemPreset1.getIntegrity();
    org.mafagafogigante.dungeon.entity.Integrity integrity3 = null;
    itemPreset1.setIntegrity(integrity3);
    org.mafagafogigante.dungeon.util.Percentage percentage5 = itemPreset1.getVisibility();
    java.lang.String str6 = itemPreset1.getType();
    itemPreset1.setIntegrityDecrementOnHit((int)(short)100);
    org.mafagafogigante.dungeon.entity.TagSet<org.mafagafogigante.dungeon.entity.items.Item.Tag> tagset_tag9 = itemPreset1.getTagSet();
    org.mafagafogigante.dungeon.entity.Entity[] entity_array10 = new org.mafagafogigante.dungeon.entity.Entity[] {  };
    java.util.ArrayList<org.mafagafogigante.dungeon.entity.Entity> arraylist_entity11 = new java.util.ArrayList<org.mafagafogigante.dungeon.entity.Entity>();
    boolean b12 = java.util.Collections.addAll((java.util.Collection<org.mafagafogigante.dungeon.entity.Entity>)arraylist_entity11, entity_array10);
    org.mafagafogigante.dungeon.entity.Luminosity luminosity13 = org.mafagafogigante.dungeon.entity.Luminosity.resultantLuminosity((java.util.Collection<org.mafagafogigante.dungeon.entity.Entity>)arraylist_entity11);
    org.mafagafogigante.dungeon.util.Percentage percentage14 = luminosity13.toPercentage();
    org.mafagafogigante.dungeon.entity.Luminosity luminosity15 = new org.mafagafogigante.dungeon.entity.Luminosity(percentage14);
    itemPreset1.setVisibility(percentage14);
    org.mafagafogigante.dungeon.entity.items.WeaponComponent weaponComponent18 = new org.mafagafogigante.dungeon.entity.items.WeaponComponent((int)(short)0, percentage14, (int)'#');
    int i19 = weaponComponent18.getIntegrityDecrementOnHit();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(integrity2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(percentage5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(tagset_tag9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(entity_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(luminosity13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(percentage14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == 35);

  }

  @Test
  public void test079() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test079"); }

    org.mafagafogigante.dungeon.game.DungeonString dungeonString1 = new org.mafagafogigante.dungeon.game.DungeonString("hi!");
    java.lang.String[] str_array6 = new java.lang.String[] { "hi!", "Damaged", "BattleStatistics{records=CounterMap{map={}}}", "" };
    dungeonString1.append(str_array6);
    java.lang.String str8 = dungeonString1.toString();
    org.mafagafogigante.dungeon.game.Point point12 = new org.mafagafogigante.dungeon.game.Point(10, (int)'a', 0);
    java.lang.String[] str_array15 = new java.lang.String[] { "", "" };
    org.mafagafogigante.dungeon.util.Table table16 = new org.mafagafogigante.dungeon.util.Table(str_array15);
    boolean b17 = point12.equals((java.lang.Object)str_array15);
    dungeonString1.append(str_array15);
    org.mafagafogigante.dungeon.entity.items.Item[] item_array19 = new org.mafagafogigante.dungeon.entity.items.Item[] {  };
    java.util.ArrayList<org.mafagafogigante.dungeon.entity.items.Item> arraylist_item20 = new java.util.ArrayList<org.mafagafogigante.dungeon.entity.items.Item>();
    boolean b21 = java.util.Collections.addAll((java.util.Collection<org.mafagafogigante.dungeon.entity.items.Item>)arraylist_item20, item_array19);
    org.mafagafogigante.dungeon.game.DungeonString dungeonString23 = new org.mafagafogigante.dungeon.game.DungeonString("hi!");
    java.lang.String[] str_array28 = new java.lang.String[] { "hi!", "Damaged", "BattleStatistics{records=CounterMap{map={}}}", "" };
    dungeonString23.append(str_array28);
    java.util.List<org.mafagafogigante.dungeon.entity.items.Item> list_item30 = org.mafagafogigante.dungeon.entity.creatures.HeroUtils.findItems((java.util.List<org.mafagafogigante.dungeon.entity.items.Item>)arraylist_item20, str_array28);
    org.mafagafogigante.dungeon.game.DungeonString dungeonString32 = new org.mafagafogigante.dungeon.game.DungeonString("hi!");
    java.lang.String[] str_array37 = new java.lang.String[] { "hi!", "Damaged", "BattleStatistics{records=CounterMap{map={}}}", "" };
    dungeonString32.append(str_array37);
    java.lang.String[] str_array44 = new java.lang.String[] { "hi!", "visibilityCriteria=VisibilityCriteria{[]}", "visibilityCriteria=VisibilityCriteria{[]}", "Damaged", "hi!" };
    org.mafagafogigante.dungeon.util.Table table45 = new org.mafagafogigante.dungeon.util.Table(str_array44);
    dungeonString32.append(str_array44);
    java.util.List<org.mafagafogigante.dungeon.entity.items.Item> list_item47 = org.mafagafogigante.dungeon.entity.creatures.HeroUtils.findItems(list_item30, str_array44);
    dungeonString1.append(str_array44);
    // The following exception was thrown during execution in test generation
    try {
    org.mafagafogigante.dungeon.io.PoemWriter.parsePoemCommand(str_array44);
      org.junit.Assert.fail("Expected exception of type java.lang.NoClassDefFoundError");
    } catch (java.lang.NoClassDefFoundError e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "DungeonString{coloredStringList=[ColoredString{string='hi!hi!DamagedBattleStatistics{records=CounterMap{map={}}}', color=java.awt.Color[r=192,g=192,b=192]}], currentColor=java.awt.Color[r=192,g=192,b=192]}"+ "'", str8.equals("DungeonString{coloredStringList=[ColoredString{string='hi!hi!DamagedBattleStatistics{records=CounterMap{map={}}}', color=java.awt.Color[r=192,g=192,b=192]}], currentColor=java.awt.Color[r=192,g=192,b=192]}"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(item_array19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_item30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_item47);

  }

  @Test
  public void test080() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test080"); }

    org.mafagafogigante.dungeon.entity.creatures.Creature creature0 = null;
    org.mafagafogigante.dungeon.entity.items.CreatureInventory creatureInventory3 = new org.mafagafogigante.dungeon.entity.items.CreatureInventory(creature0, (-1), 0.0d);
    org.mafagafogigante.dungeon.entity.Weight weight4 = creatureInventory3.getWeight();
    int i5 = creatureInventory3.getItemCount();
    int i6 = creatureInventory3.getItemCount();
    org.mafagafogigante.dungeon.entity.Weight weight7 = creatureInventory3.getWeightLimit();
    org.mafagafogigante.dungeon.stats.Statistics statistics8 = new org.mafagafogigante.dungeon.stats.Statistics();
    org.mafagafogigante.dungeon.stats.BattleStatistics battleStatistics9 = statistics8.getBattleStatistics();
    org.mafagafogigante.dungeon.stats.WorldStatistics worldStatistics10 = statistics8.getWorldStatistics();
    boolean b11 = weight7.equals((java.lang.Object)statistics8);
    org.mafagafogigante.dungeon.entity.Weight weight13 = org.mafagafogigante.dungeon.entity.Weight.newInstance((double)(byte)-1);
    org.mafagafogigante.dungeon.entity.Weight weight14 = org.mafagafogigante.dungeon.entity.Weight.ZERO;
    org.mafagafogigante.dungeon.entity.Weight weight15 = weight13.add(weight14);
    int i16 = weight7.compareTo(weight15);
    java.lang.String str17 = weight7.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(weight4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(weight7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(battleStatistics9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(worldStatistics10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(weight13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(weight14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(weight15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "0 kg"+ "'", str17.equals("0 kg"));

  }

  @Test
  public void test081() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test081"); }

    org.mafagafogigante.dungeon.entity.creatures.CreaturePreset creaturePreset0 = new org.mafagafogigante.dungeon.entity.creatures.CreaturePreset();
    org.mafagafogigante.dungeon.game.Id id1 = null;
    creaturePreset0.setWeaponId(id1);
    creaturePreset0.setAttack(57);
    org.mafagafogigante.dungeon.entity.Luminosity luminosity5 = creaturePreset0.getLuminosity();
    creaturePreset0.setInventoryItemLimit(57);
    org.mafagafogigante.dungeon.util.Percentage percentage9 = new org.mafagafogigante.dungeon.util.Percentage((double)'#');
    boolean b11 = percentage9.equals((java.lang.Object)10.0d);
    org.mafagafogigante.dungeon.entity.Luminosity luminosity12 = new org.mafagafogigante.dungeon.entity.Luminosity(percentage9);
    org.mafagafogigante.dungeon.util.Percentage percentage13 = luminosity12.toPercentage();
    java.lang.String str14 = percentage13.toString();
    creaturePreset0.setVisibility(percentage13);
    org.mafagafogigante.dungeon.entity.Weight weight16 = creaturePreset0.getWeight();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(luminosity5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(percentage13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "100.00%"+ "'", str14.equals("100.00%"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(weight16);

  }

  @Test
  public void test082() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test082"); }

    org.mafagafogigante.dungeon.date.Date date3 = new org.mafagafogigante.dungeon.date.Date(10L, 100L, 100L);
    org.mafagafogigante.dungeon.date.Date date7 = new org.mafagafogigante.dungeon.date.Date(10L, 100L, 100L);
    int i8 = date3.compareTo(date7);
    java.lang.String str9 = date3.toTimeString();
    org.mafagafogigante.dungeon.date.Date date13 = new org.mafagafogigante.dungeon.date.Date(10L, 100L, 100L);
    org.mafagafogigante.dungeon.date.Date date17 = new org.mafagafogigante.dungeon.date.Date(10L, 100L, 100L);
    int i18 = date13.compareTo(date17);
    org.mafagafogigante.dungeon.game.PartOfDay partOfDay19 = org.mafagafogigante.dungeon.game.PartOfDay.getCorrespondingConstant(date13);
    long long20 = date13.getYear();
    org.mafagafogigante.dungeon.date.Date date24 = new org.mafagafogigante.dungeon.date.Date(10L, 100L, 100L);
    org.mafagafogigante.dungeon.date.Date date28 = new org.mafagafogigante.dungeon.date.Date(10L, 100L, 100L);
    int i29 = date24.compareTo(date28);
    long long30 = date24.getYear();
    int i31 = date13.compareTo(date24);
    java.lang.String str32 = date24.toDateString();
    int i33 = date3.compareTo(date24);
    org.mafagafogigante.dungeon.date.Date date37 = new org.mafagafogigante.dungeon.date.Date((long)97, (long)(byte)-1, (long)'#');
    org.mafagafogigante.dungeon.stats.BattleStatistics battleStatistics38 = new org.mafagafogigante.dungeon.stats.BattleStatistics();
    org.mafagafogigante.dungeon.achievements.BattleStatisticsRequirement battleStatisticsRequirement39 = null;
    boolean b40 = battleStatistics38.satisfies(battleStatisticsRequirement39);
    java.lang.String str41 = battleStatistics38.toString();
    org.mafagafogigante.dungeon.achievements.BattleStatisticsQuery battleStatisticsQuery42 = new org.mafagafogigante.dungeon.achievements.BattleStatisticsQuery();
    org.mafagafogigante.dungeon.achievements.BattleStatisticsRequirement battleStatisticsRequirement44 = new org.mafagafogigante.dungeon.achievements.BattleStatisticsRequirement(battleStatisticsQuery42, (int)(byte)100);
    boolean b45 = battleStatistics38.satisfies(battleStatisticsRequirement44);
    org.mafagafogigante.dungeon.util.CounterMap<org.mafagafogigante.dungeon.stats.CauseOfDeath> countermap_causeOfDeath46 = battleStatistics38.getKillsByCauseOfDeath();
    org.mafagafogigante.dungeon.util.CounterMap<org.mafagafogigante.dungeon.stats.CauseOfDeath> countermap_causeOfDeath47 = battleStatistics38.getKillsByCauseOfDeath();
    boolean b48 = date37.equals((java.lang.Object)countermap_causeOfDeath47);
    org.mafagafogigante.dungeon.date.DungeonTimeUnit dungeonTimeUnit50 = org.mafagafogigante.dungeon.date.DungeonTimeUnit.YEAR;
    org.mafagafogigante.dungeon.date.Date date51 = date37.plus(45056, dungeonTimeUnit50);
    java.lang.String str52 = date37.toDateString();
    int i53 = date24.compareTo(date37);
    org.mafagafogigante.dungeon.stats.CauseOfDeath causeOfDeath54 = org.mafagafogigante.dungeon.stats.CauseOfDeath.getUnarmedCauseOfDeath();
    org.mafagafogigante.dungeon.achievements.BattleStatisticsQuery battleStatisticsQuery55 = new org.mafagafogigante.dungeon.achievements.BattleStatisticsQuery();
    battleStatisticsQuery55.setType("Damaged");
    battleStatisticsQuery55.setType("");
    boolean b60 = causeOfDeath54.equals((java.lang.Object)battleStatisticsQuery55);
    org.mafagafogigante.dungeon.game.PartOfDay partOfDay61 = org.mafagafogigante.dungeon.game.PartOfDay.AFTERNOON;
    battleStatisticsQuery55.setPartOfDay(partOfDay61);
    int i63 = org.mafagafogigante.dungeon.game.PartOfDay.getSecondsToNext(date37, partOfDay61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "00:00:00"+ "'", str9.equals("00:00:00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 0);
    org.junit.Assert.assertTrue("'" + partOfDay19 + "' != '" + org.mafagafogigante.dungeon.game.PartOfDay.MIDNIGHT + "'", partOfDay19.equals(org.mafagafogigante.dungeon.game.PartOfDay.MIDNIGHT));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long20 == 10L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i29 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long30 == 10L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i31 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str32 + "' != '" + "day 10 of month 10 of the year 10"+ "'", str32.equals("day 10 of month 10 of the year 10"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i33 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str41 + "' != '" + "BattleStatistics{records=CounterMap{map={}}}"+ "'", str41.equals("BattleStatistics{records=CounterMap{map={}}}"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(countermap_causeOfDeath46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(countermap_causeOfDeath47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == false);
    org.junit.Assert.assertTrue("'" + dungeonTimeUnit50 + "' != '" + org.mafagafogigante.dungeon.date.DungeonTimeUnit.YEAR + "'", dungeonTimeUnit50.equals(org.mafagafogigante.dungeon.date.DungeonTimeUnit.YEAR));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(date51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str52 + "' != '" + "day 10 of month 1 of the year 97"+ "'", str52.equals("day 10 of month 1 of the year 97"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i53 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(causeOfDeath54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b60 == false);
    org.junit.Assert.assertTrue("'" + partOfDay61 + "' != '" + org.mafagafogigante.dungeon.game.PartOfDay.AFTERNOON + "'", partOfDay61.equals(org.mafagafogigante.dungeon.game.PartOfDay.AFTERNOON));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i63 == 46800);

  }

  @Test
  public void test083() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test083"); }

    org.mafagafogigante.dungeon.entity.creatures.CreaturePresetFactory[] creaturePresetFactory_array0 = new org.mafagafogigante.dungeon.entity.creatures.CreaturePresetFactory[] {  };
    org.mafagafogigante.dungeon.entity.creatures.CreatureFactory creatureFactory1 = new org.mafagafogigante.dungeon.entity.creatures.CreatureFactory(creaturePresetFactory_array0);
    org.mafagafogigante.dungeon.entity.creatures.CreatureFactory creatureFactory2 = new org.mafagafogigante.dungeon.entity.creatures.CreatureFactory(creaturePresetFactory_array0);
    org.mafagafogigante.dungeon.entity.creatures.CorpseItemPresetFactory corpseItemPresetFactory3 = new org.mafagafogigante.dungeon.entity.creatures.CorpseItemPresetFactory(creatureFactory2);
    org.mafagafogigante.dungeon.game.Id id4 = null;
    org.mafagafogigante.dungeon.game.World world5 = null;
    org.mafagafogigante.dungeon.entity.creatures.Creature creature6 = creatureFactory2.makeCreature(id4, world5);
    org.mafagafogigante.dungeon.date.Date date13 = new org.mafagafogigante.dungeon.date.Date(86313600000L, (long)46800, (long)35, (long)(short)10, 1000L, 86313600000L);
    org.mafagafogigante.dungeon.game.World world14 = null;
    org.mafagafogigante.dungeon.stats.Statistics statistics15 = new org.mafagafogigante.dungeon.stats.Statistics();
    statistics15.writeStatistics();
    statistics15.writeStatistics();
    org.mafagafogigante.dungeon.achievements.AchievementTracker achievementTracker18 = new org.mafagafogigante.dungeon.achievements.AchievementTracker(statistics15);
    statistics15.writeStatistics();
    // The following exception was thrown during execution in test generation
    try {
    org.mafagafogigante.dungeon.entity.creatures.Hero hero20 = creatureFactory2.makeHero(date13, world14, statistics15);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(creaturePresetFactory_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(creature6);

  }

  @Test
  public void test084() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test084"); }

    org.mafagafogigante.dungeon.entity.items.ItemPreset itemPreset0 = new org.mafagafogigante.dungeon.entity.items.ItemPreset();
    org.mafagafogigante.dungeon.entity.Integrity integrity1 = itemPreset0.getIntegrity();
    org.mafagafogigante.dungeon.entity.Integrity integrity2 = null;
    itemPreset0.setIntegrity(integrity2);
    org.mafagafogigante.dungeon.util.Percentage percentage4 = itemPreset0.getVisibility();
    java.lang.String str5 = itemPreset0.getType();
    itemPreset0.setIntegrityDecrementOnHit((int)(short)100);
    org.mafagafogigante.dungeon.entity.TagSet<org.mafagafogigante.dungeon.entity.items.Item.Tag> tagset_tag8 = itemPreset0.getTagSet();
    org.mafagafogigante.dungeon.entity.Integrity integrity11 = new org.mafagafogigante.dungeon.entity.Integrity((int)(byte)1, (int)(byte)0);
    itemPreset0.setIntegrity(integrity11);
    org.mafagafogigante.dungeon.game.PartOfDay partOfDay13 = org.mafagafogigante.dungeon.game.PartOfDay.NIGHT;
    org.mafagafogigante.dungeon.entity.Luminosity luminosity14 = partOfDay13.getLuminosity();
    org.mafagafogigante.dungeon.game.Name name15 = partOfDay13.getName();
    java.lang.String str17 = name15.getQuantifiedName((int)'a');
    java.lang.String str18 = name15.getSingular();
    java.lang.String str19 = name15.toString();
    java.lang.String str21 = name15.getQuantifiedName((int)(short)10);
    java.lang.String str22 = name15.getSingular();
    itemPreset0.setName(name15);
    org.mafagafogigante.dungeon.util.Percentage percentage25 = new org.mafagafogigante.dungeon.util.Percentage((double)'#');
    boolean b27 = percentage25.equals((java.lang.Object)10.0d);
    double d28 = percentage25.toDouble();
    org.mafagafogigante.dungeon.entity.Luminosity luminosity29 = new org.mafagafogigante.dungeon.entity.Luminosity(percentage25);
    org.mafagafogigante.dungeon.entity.Visibility visibility30 = new org.mafagafogigante.dungeon.entity.Visibility(percentage25);
    org.mafagafogigante.dungeon.util.Percentage percentage31 = visibility30.toPercentage();
    itemPreset0.setVisibility(percentage31);
    org.mafagafogigante.dungeon.util.Percentage percentage33 = itemPreset0.getVisibility();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(integrity1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(percentage4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(tagset_tag8);
    org.junit.Assert.assertTrue("'" + partOfDay13 + "' != '" + org.mafagafogigante.dungeon.game.PartOfDay.NIGHT + "'", partOfDay13.equals(org.mafagafogigante.dungeon.game.PartOfDay.NIGHT));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(luminosity14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(name15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "a few Nights"+ "'", str17.equals("a few Nights"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "Night"+ "'", str18.equals("Night"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "Night"+ "'", str19.equals("Night"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "a few Nights"+ "'", str21.equals("a few Nights"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "Night"+ "'", str22.equals("Night"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d28 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(percentage31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(percentage33);

  }

  @Test
  public void test085() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test085"); }

    org.mafagafogigante.dungeon.entity.creatures.Creature creature0 = null;
    org.mafagafogigante.dungeon.entity.items.CreatureInventory creatureInventory3 = new org.mafagafogigante.dungeon.entity.items.CreatureInventory(creature0, (-1), 0.0d);
    org.mafagafogigante.dungeon.entity.Weight weight4 = creatureInventory3.getWeight();
    org.mafagafogigante.dungeon.entity.Weight weight5 = creatureInventory3.getWeightLimit();
    creatureInventory3.refreshItems();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(weight4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(weight5);

  }

  @Test
  public void test086() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test086"); }

    org.mafagafogigante.dungeon.entity.Integrity integrity2 = new org.mafagafogigante.dungeon.entity.Integrity(1, 0);
    boolean b3 = integrity2.isMaximum();
    org.mafagafogigante.dungeon.entity.items.Item item4 = null;
    org.mafagafogigante.dungeon.entity.items.ItemIntegrity itemIntegrity5 = org.mafagafogigante.dungeon.entity.items.ItemIntegrity.makeItemIntegrity(integrity2, item4);
    org.mafagafogigante.dungeon.util.Percentage percentage6 = itemIntegrity5.toPercentage();
    boolean b7 = itemIntegrity5.isPerfect();
    boolean b8 = itemIntegrity5.isPerfect();
    itemIntegrity5.incrementBy(90);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(itemIntegrity5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(percentage6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);

  }

  @Test
  public void test087() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test087"); }

    org.mafagafogigante.dungeon.entity.items.FoodComponent foodComponent2 = new org.mafagafogigante.dungeon.entity.items.FoodComponent(2, (int)(byte)-1);
    int i3 = foodComponent2.getIntegrityDecrementOnEat();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == (-1));

  }

  @Test
  public void test088() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test088"); }

    org.mafagafogigante.dungeon.entity.items.ItemPreset itemPreset3 = new org.mafagafogigante.dungeon.entity.items.ItemPreset();
    itemPreset3.setDrinkableHealing((int)(short)0);
    org.mafagafogigante.dungeon.util.Percentage percentage7 = new org.mafagafogigante.dungeon.util.Percentage((double)57);
    itemPreset3.setVisibility(percentage7);
    double d9 = org.mafagafogigante.dungeon.util.DungeonMath.weightedAverage((double)10.0f, 100.0d, percentage7);
    org.mafagafogigante.dungeon.entity.items.ItemPreset itemPreset10 = new org.mafagafogigante.dungeon.entity.items.ItemPreset();
    org.mafagafogigante.dungeon.entity.Integrity integrity11 = itemPreset10.getIntegrity();
    org.mafagafogigante.dungeon.entity.Integrity integrity12 = null;
    itemPreset10.setIntegrity(integrity12);
    org.mafagafogigante.dungeon.util.Percentage percentage14 = itemPreset10.getVisibility();
    java.lang.String str15 = itemPreset10.getType();
    org.mafagafogigante.dungeon.entity.items.Item.Tag tag16 = org.mafagafogigante.dungeon.entity.items.Item.Tag.REPAIRABLE;
    itemPreset10.addTag(tag16);
    org.mafagafogigante.dungeon.util.Percentage percentage19 = new org.mafagafogigante.dungeon.util.Percentage((double)'#');
    boolean b21 = percentage19.equals((java.lang.Object)10.0d);
    org.mafagafogigante.dungeon.entity.Luminosity luminosity22 = new org.mafagafogigante.dungeon.entity.Luminosity(percentage19);
    itemPreset10.setVisibility(percentage19);
    boolean b24 = percentage7.biggerThanOrEqualTo(percentage19);
    org.mafagafogigante.dungeon.entity.items.WeaponComponent weaponComponent26 = new org.mafagafogigante.dungeon.entity.items.WeaponComponent((int)(short)10, percentage19, 1);
    int i27 = weaponComponent26.getDamage();
    int i28 = weaponComponent26.getIntegrityDecrementOnHit();
    int i29 = weaponComponent26.getDamage();
    int i30 = weaponComponent26.getIntegrityDecrementOnHit();
    int i31 = weaponComponent26.getDamage();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d9 == 100.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(integrity11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(percentage14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str15);
    org.junit.Assert.assertTrue("'" + tag16 + "' != '" + org.mafagafogigante.dungeon.entity.items.Item.Tag.REPAIRABLE + "'", tag16.equals(org.mafagafogigante.dungeon.entity.items.Item.Tag.REPAIRABLE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i27 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i29 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i30 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i31 == 10);

  }

  @Test
  public void test089() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test089"); }

    org.mafagafogigante.dungeon.entity.items.FoodComponent foodComponent2 = new org.mafagafogigante.dungeon.entity.items.FoodComponent((int)(short)1, 35);

  }

  @Test
  public void test090() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test090"); }

    org.mafagafogigante.dungeon.logging.DungeonLogger.info("BattleStatisticsRequirement{query=null, count=100}");

  }

  @Test
  public void test091() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test091"); }

    org.mafagafogigante.dungeon.logging.DungeonLogger.fine("one Night");

  }

  @Test
  public void test092() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test092"); }

    org.mafagafogigante.dungeon.date.Date date6 = new org.mafagafogigante.dungeon.date.Date((long)(byte)0, (long)0, (long)81, (long)10, 100L, (long)(short)1);
    java.lang.String str7 = date6.toDateString();
    org.mafagafogigante.dungeon.date.Date date11 = new org.mafagafogigante.dungeon.date.Date(10L, 100L, 100L);
    org.mafagafogigante.dungeon.date.Date date15 = new org.mafagafogigante.dungeon.date.Date(10L, 100L, 100L);
    int i16 = date11.compareTo(date15);
    org.mafagafogigante.dungeon.game.PartOfDay partOfDay17 = org.mafagafogigante.dungeon.game.PartOfDay.getCorrespondingConstant(date11);
    long long18 = date11.getYear();
    org.mafagafogigante.dungeon.date.Duration duration19 = new org.mafagafogigante.dungeon.date.Duration(date6, date11);
    org.mafagafogigante.dungeon.entity.Weight weight21 = org.mafagafogigante.dungeon.entity.Weight.newInstance((double)(short)100);
    boolean b22 = date11.equals((java.lang.Object)(short)100);
    java.lang.String str23 = date11.toTimeString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "day 10 of month 1 of the year 1"+ "'", str7.equals("day 10 of month 1 of the year 1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 0);
    org.junit.Assert.assertTrue("'" + partOfDay17 + "' != '" + org.mafagafogigante.dungeon.game.PartOfDay.MIDNIGHT + "'", partOfDay17.equals(org.mafagafogigante.dungeon.game.PartOfDay.MIDNIGHT));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long18 == 10L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(weight21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + "00:00:00"+ "'", str23.equals("00:00:00"));

  }

  @Test
  public void test093() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test093"); }

    org.mafagafogigante.dungeon.entity.creatures.CreaturePreset creaturePreset0 = new org.mafagafogigante.dungeon.entity.creatures.CreaturePreset();
    org.mafagafogigante.dungeon.game.Id id1 = null;
    creaturePreset0.setWeaponId(id1);
    org.mafagafogigante.dungeon.game.Id id3 = creaturePreset0.getId();
    org.mafagafogigante.dungeon.entity.items.ItemPreset itemPreset4 = new org.mafagafogigante.dungeon.entity.items.ItemPreset();
    org.mafagafogigante.dungeon.entity.Integrity integrity5 = itemPreset4.getIntegrity();
    org.mafagafogigante.dungeon.entity.Integrity integrity6 = null;
    itemPreset4.setIntegrity(integrity6);
    org.mafagafogigante.dungeon.util.Percentage percentage8 = itemPreset4.getVisibility();
    java.lang.String str9 = itemPreset4.getType();
    itemPreset4.setIntegrityDecrementOnHit((int)(short)100);
    org.mafagafogigante.dungeon.entity.TagSet<org.mafagafogigante.dungeon.entity.items.Item.Tag> tagset_tag12 = itemPreset4.getTagSet();
    org.mafagafogigante.dungeon.entity.Weight weight14 = org.mafagafogigante.dungeon.entity.Weight.newInstance((double)(byte)-1);
    itemPreset4.setWeight(weight14);
    org.mafagafogigante.dungeon.entity.items.ItemPreset itemPreset16 = new org.mafagafogigante.dungeon.entity.items.ItemPreset();
    org.mafagafogigante.dungeon.entity.Integrity integrity17 = itemPreset16.getIntegrity();
    org.mafagafogigante.dungeon.entity.Integrity integrity18 = null;
    itemPreset16.setIntegrity(integrity18);
    org.mafagafogigante.dungeon.util.Percentage percentage21 = new org.mafagafogigante.dungeon.util.Percentage((double)'#');
    itemPreset16.setHitRate(percentage21);
    itemPreset4.setHitRate(percentage21);
    org.mafagafogigante.dungeon.entity.Luminosity luminosity24 = itemPreset4.getLuminosity();
    creaturePreset0.setLuminosity(luminosity24);
    org.mafagafogigante.dungeon.entity.TagSet<org.mafagafogigante.dungeon.entity.creatures.Creature.Tag> tagset_tag26 = null;
    creaturePreset0.setTagSet(tagset_tag26);
    org.mafagafogigante.dungeon.entity.Luminosity luminosity28 = creaturePreset0.getLuminosity();
    creaturePreset0.setInventoryWeightLimit(0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(id3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(integrity5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(percentage8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(tagset_tag12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(weight14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(integrity17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(luminosity24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(luminosity28);

  }

  @Test
  public void test094() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test094"); }

    org.mafagafogigante.dungeon.entity.items.LocationInventory locationInventory0 = new org.mafagafogigante.dungeon.entity.items.LocationInventory();
    org.mafagafogigante.dungeon.entity.items.Item item1 = null;
    boolean b2 = locationInventory0.hasItem(item1);
    java.util.List<org.mafagafogigante.dungeon.entity.items.Item> list_item3 = locationInventory0.getItems();
    locationInventory0.refreshItems();
    locationInventory0.refreshItems();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_item3);

  }

  @Test
  public void test095() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test095"); }

    org.mafagafogigante.dungeon.commands.CommandHistory commandHistory0 = new org.mafagafogigante.dungeon.commands.CommandHistory();
    java.lang.String str2 = commandHistory0.getLastSimilarCommand("");
    java.lang.String str4 = commandHistory0.getLastSimilarCommand("Unarmed : UNARMED");
    org.mafagafogigante.dungeon.commands.IssuedCommand issuedCommand6 = new org.mafagafogigante.dungeon.commands.IssuedCommand("BattleStatistics{records=CounterMap{map={}}}");
    java.lang.String str7 = issuedCommand6.toString();
    commandHistory0.addCommand(issuedCommand6);
    org.mafagafogigante.dungeon.commands.IssuedCommand issuedCommand10 = new org.mafagafogigante.dungeon.commands.IssuedCommand("BattleStatistics{records=CounterMap{map={}}}");
    java.lang.String str11 = issuedCommand10.toString();
    org.mafagafogigante.dungeon.commands.PreparedIssuedCommand preparedIssuedCommand12 = org.mafagafogigante.dungeon.commands.IssuedCommandProcessor.prepareIssuedCommand(issuedCommand10);
    java.lang.String str13 = issuedCommand10.toString();
    commandHistory0.addCommand(issuedCommand10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "BattleStatistics{records=CounterMap{map={}}}"+ "'", str7.equals("BattleStatistics{records=CounterMap{map={}}}"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "BattleStatistics{records=CounterMap{map={}}}"+ "'", str11.equals("BattleStatistics{records=CounterMap{map={}}}"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(preparedIssuedCommand12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "BattleStatistics{records=CounterMap{map={}}}"+ "'", str13.equals("BattleStatistics{records=CounterMap{map={}}}"));

  }

  @Test
  public void test096() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test096"); }

    org.mafagafogigante.dungeon.entity.items.ItemPreset itemPreset0 = new org.mafagafogigante.dungeon.entity.items.ItemPreset();
    org.mafagafogigante.dungeon.util.Percentage percentage1 = itemPreset0.getHitRate();
    org.mafagafogigante.dungeon.entity.items.ItemPreset itemPreset5 = new org.mafagafogigante.dungeon.entity.items.ItemPreset();
    itemPreset5.setDrinkableHealing((int)(short)0);
    org.mafagafogigante.dungeon.util.Percentage percentage9 = new org.mafagafogigante.dungeon.util.Percentage((double)57);
    itemPreset5.setVisibility(percentage9);
    double d11 = org.mafagafogigante.dungeon.util.DungeonMath.weightedAverage((double)10.0f, 100.0d, percentage9);
    org.mafagafogigante.dungeon.entity.items.ItemPreset itemPreset12 = new org.mafagafogigante.dungeon.entity.items.ItemPreset();
    org.mafagafogigante.dungeon.entity.Integrity integrity13 = itemPreset12.getIntegrity();
    org.mafagafogigante.dungeon.entity.Integrity integrity14 = null;
    itemPreset12.setIntegrity(integrity14);
    org.mafagafogigante.dungeon.util.Percentage percentage16 = itemPreset12.getVisibility();
    java.lang.String str17 = itemPreset12.getType();
    org.mafagafogigante.dungeon.entity.items.Item.Tag tag18 = org.mafagafogigante.dungeon.entity.items.Item.Tag.REPAIRABLE;
    itemPreset12.addTag(tag18);
    org.mafagafogigante.dungeon.util.Percentage percentage21 = new org.mafagafogigante.dungeon.util.Percentage((double)'#');
    boolean b23 = percentage21.equals((java.lang.Object)10.0d);
    org.mafagafogigante.dungeon.entity.Luminosity luminosity24 = new org.mafagafogigante.dungeon.entity.Luminosity(percentage21);
    itemPreset12.setVisibility(percentage21);
    boolean b26 = percentage9.biggerThanOrEqualTo(percentage21);
    org.mafagafogigante.dungeon.entity.items.WeaponComponent weaponComponent28 = new org.mafagafogigante.dungeon.entity.items.WeaponComponent((int)(short)10, percentage21, 1);
    itemPreset0.setVisibility(percentage21);
    itemPreset0.setType("a few Nights");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(percentage1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d11 == 100.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(integrity13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(percentage16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str17);
    org.junit.Assert.assertTrue("'" + tag18 + "' != '" + org.mafagafogigante.dungeon.entity.items.Item.Tag.REPAIRABLE + "'", tag18.equals(org.mafagafogigante.dungeon.entity.items.Item.Tag.REPAIRABLE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == true);

  }

  @Test
  public void test097() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test097"); }

    org.mafagafogigante.dungeon.date.Date date3 = new org.mafagafogigante.dungeon.date.Date((long)97, (long)(byte)-1, (long)'#');
    org.mafagafogigante.dungeon.stats.BattleStatistics battleStatistics4 = new org.mafagafogigante.dungeon.stats.BattleStatistics();
    org.mafagafogigante.dungeon.achievements.BattleStatisticsRequirement battleStatisticsRequirement5 = null;
    boolean b6 = battleStatistics4.satisfies(battleStatisticsRequirement5);
    java.lang.String str7 = battleStatistics4.toString();
    org.mafagafogigante.dungeon.achievements.BattleStatisticsQuery battleStatisticsQuery8 = new org.mafagafogigante.dungeon.achievements.BattleStatisticsQuery();
    org.mafagafogigante.dungeon.achievements.BattleStatisticsRequirement battleStatisticsRequirement10 = new org.mafagafogigante.dungeon.achievements.BattleStatisticsRequirement(battleStatisticsQuery8, (int)(byte)100);
    boolean b11 = battleStatistics4.satisfies(battleStatisticsRequirement10);
    org.mafagafogigante.dungeon.util.CounterMap<org.mafagafogigante.dungeon.stats.CauseOfDeath> countermap_causeOfDeath12 = battleStatistics4.getKillsByCauseOfDeath();
    org.mafagafogigante.dungeon.util.CounterMap<org.mafagafogigante.dungeon.stats.CauseOfDeath> countermap_causeOfDeath13 = battleStatistics4.getKillsByCauseOfDeath();
    boolean b14 = date3.equals((java.lang.Object)countermap_causeOfDeath13);
    org.mafagafogigante.dungeon.date.DungeonTimeUnit dungeonTimeUnit16 = org.mafagafogigante.dungeon.date.DungeonTimeUnit.YEAR;
    org.mafagafogigante.dungeon.date.Date date17 = date3.plus(45056, dungeonTimeUnit16);
    java.lang.String str18 = date17.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "BattleStatistics{records=CounterMap{map={}}}"+ "'", str7.equals("BattleStatistics{records=CounterMap{map={}}}"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(countermap_causeOfDeath12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(countermap_causeOfDeath13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    org.junit.Assert.assertTrue("'" + dungeonTimeUnit16 + "' != '" + org.mafagafogigante.dungeon.date.DungeonTimeUnit.YEAR + "'", dungeonTimeUnit16.equals(org.mafagafogigante.dungeon.date.DungeonTimeUnit.YEAR));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(date17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "45153-01-10 00:00:00"+ "'", str18.equals("45153-01-10 00:00:00"));

  }

  @Test
  public void test098() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test098"); }

    org.mafagafogigante.dungeon.game.DungeonString dungeonString3 = new org.mafagafogigante.dungeon.game.DungeonString("hi!");
    java.lang.String[] str_array8 = new java.lang.String[] { "hi!", "Damaged", "BattleStatistics{records=CounterMap{map={}}}", "" };
    dungeonString3.append(str_array8);
    java.awt.Color color10 = null;
    dungeonString3.setColor(color10);
    org.mafagafogigante.dungeon.date.Date date16 = new org.mafagafogigante.dungeon.date.Date(10L, 100L, 100L);
    org.mafagafogigante.dungeon.date.Date date20 = new org.mafagafogigante.dungeon.date.Date(10L, 100L, 100L);
    int i21 = date16.compareTo(date20);
    org.mafagafogigante.dungeon.game.PartOfDay partOfDay22 = org.mafagafogigante.dungeon.game.PartOfDay.getCorrespondingConstant(date16);
    java.lang.String[] str_array28 = new java.lang.String[] { "hi!", "visibilityCriteria=VisibilityCriteria{[]}", "visibilityCriteria=VisibilityCriteria{[]}", "Damaged", "hi!" };
    org.mafagafogigante.dungeon.util.Table table29 = new org.mafagafogigante.dungeon.util.Table(str_array28);
    java.util.List<org.mafagafogigante.dungeon.game.ColoredString> list_coloredString30 = table29.toColoredStringList();
    org.mafagafogigante.dungeon.game.ColoredString coloredString31 = org.mafagafogigante.dungeon.game.Random.select(list_coloredString30);
    boolean b32 = date16.equals((java.lang.Object)coloredString31);
    java.awt.Color color33 = coloredString31.getColor();
    org.mafagafogigante.dungeon.game.ColoredString coloredString34 = new org.mafagafogigante.dungeon.game.ColoredString("User: Nicholas\nTime: 15:42:12\nDate: 2017-04-09\nJava: Java version 1.8.0_121 by Oracle Corporation\nHeap: Using 41.5 MiB out of the allocated 154.5 MiB\nOS: Windows 10 (amd64) 10.0", color33);
    dungeonString3.setColor(color33);
    org.mafagafogigante.dungeon.game.DungeonString dungeonString36 = new org.mafagafogigante.dungeon.game.DungeonString("Enabled LightSource of luminosity of 0.00%", color33);
    org.mafagafogigante.dungeon.game.DungeonString dungeonString37 = new org.mafagafogigante.dungeon.game.DungeonString("{0, -1, 0}", color33);
    java.lang.String[] str_array40 = new java.lang.String[] { "", "" };
    org.mafagafogigante.dungeon.util.Table table41 = new org.mafagafogigante.dungeon.util.Table(str_array40);
    org.mafagafogigante.dungeon.util.Table table42 = new org.mafagafogigante.dungeon.util.Table(str_array40);
    dungeonString37.append(str_array40);
    org.mafagafogigante.dungeon.io.Writer.writeAndWait((org.mafagafogigante.dungeon.game.Writable)dungeonString37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i21 == 0);
    org.junit.Assert.assertTrue("'" + partOfDay22 + "' != '" + org.mafagafogigante.dungeon.game.PartOfDay.MIDNIGHT + "'", partOfDay22.equals(org.mafagafogigante.dungeon.game.PartOfDay.MIDNIGHT));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_coloredString30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(coloredString31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array40);

  }

  @Test
  public void test099() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test099"); }

    org.mafagafogigante.dungeon.entity.items.ItemPresetFactory[] itemPresetFactory_array0 = new org.mafagafogigante.dungeon.entity.items.ItemPresetFactory[] {  };
    org.mafagafogigante.dungeon.entity.items.ItemFactory itemFactory1 = new org.mafagafogigante.dungeon.entity.items.ItemFactory(itemPresetFactory_array0);
    org.mafagafogigante.dungeon.entity.items.ItemPreset itemPreset2 = new org.mafagafogigante.dungeon.entity.items.ItemPreset();
    org.mafagafogigante.dungeon.entity.Integrity integrity3 = itemPreset2.getIntegrity();
    org.mafagafogigante.dungeon.entity.Integrity integrity4 = null;
    itemPreset2.setIntegrity(integrity4);
    org.mafagafogigante.dungeon.util.Percentage percentage6 = itemPreset2.getVisibility();
    org.mafagafogigante.dungeon.entity.Integrity integrity7 = itemPreset2.getIntegrity();
    java.lang.String str8 = itemPreset2.getText();
    java.lang.String str9 = itemPreset2.getType();
    org.mafagafogigante.dungeon.entity.Integrity integrity12 = new org.mafagafogigante.dungeon.entity.Integrity(1, 0);
    boolean b13 = integrity12.isMaximum();
    integrity12.incrementBy((int)(short)0);
    org.mafagafogigante.dungeon.util.Percentage percentage16 = integrity12.toPercentage();
    itemPreset2.setHitRate(percentage16);
    org.mafagafogigante.dungeon.game.Id id19 = new org.mafagafogigante.dungeon.game.Id("100");
    java.lang.String str20 = id19.toString();
    itemPreset2.setId(id19);
    org.mafagafogigante.dungeon.date.Date date25 = new org.mafagafogigante.dungeon.date.Date(10L, 100L, 100L);
    org.mafagafogigante.dungeon.date.Date date29 = new org.mafagafogigante.dungeon.date.Date(10L, 100L, 100L);
    int i30 = date25.compareTo(date29);
    org.mafagafogigante.dungeon.game.PartOfDay partOfDay31 = org.mafagafogigante.dungeon.game.PartOfDay.getCorrespondingConstant(date25);
    long long32 = date25.getYear();
    org.mafagafogigante.dungeon.date.Date date36 = new org.mafagafogigante.dungeon.date.Date(10L, 100L, 100L);
    org.mafagafogigante.dungeon.date.Date date40 = new org.mafagafogigante.dungeon.date.Date(10L, 100L, 100L);
    int i41 = date36.compareTo(date40);
    long long42 = date36.getYear();
    int i43 = date25.compareTo(date36);
    // The following exception was thrown during execution in test generation
    try {
    org.mafagafogigante.dungeon.entity.items.Item item44 = itemFactory1.makeItem(id19, date25);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(itemPresetFactory_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(integrity3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(percentage6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(integrity7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(percentage16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + "100"+ "'", str20.equals("100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i30 == 0);
    org.junit.Assert.assertTrue("'" + partOfDay31 + "' != '" + org.mafagafogigante.dungeon.game.PartOfDay.MIDNIGHT + "'", partOfDay31.equals(org.mafagafogigante.dungeon.game.PartOfDay.MIDNIGHT));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long32 == 10L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i41 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long42 == 10L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i43 == 0);

  }

  @Test
  public void test100() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test100"); }

    org.mafagafogigante.dungeon.util.CounterMap<org.mafagafogigante.dungeon.stats.WorldStatistics> countermap_worldStatistics0 = new org.mafagafogigante.dungeon.util.CounterMap<org.mafagafogigante.dungeon.stats.WorldStatistics>();
    org.mafagafogigante.dungeon.stats.WorldStatistics worldStatistics1 = new org.mafagafogigante.dungeon.stats.WorldStatistics();
    int i2 = worldStatistics1.getSpawnCount();
    worldStatistics1.addLocation("Damaged");
    int i5 = worldStatistics1.getLocationCount();
    int i6 = countermap_worldStatistics0.getCounter(worldStatistics1);
    java.lang.String str7 = countermap_worldStatistics0.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "CounterMap{map={}}"+ "'", str7.equals("CounterMap{map={}}"));

  }

  @Test
  public void test101() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test101"); }

    org.mafagafogigante.dungeon.game.BlockedEntrances blockedEntrances0 = new org.mafagafogigante.dungeon.game.BlockedEntrances();
    org.mafagafogigante.dungeon.game.Direction direction1 = org.mafagafogigante.dungeon.game.Direction.EAST;
    boolean b2 = blockedEntrances0.isBlocked(direction1);
    org.mafagafogigante.dungeon.game.Direction direction3 = org.mafagafogigante.dungeon.game.Direction.EAST;
    java.lang.String str4 = direction3.toString();
    boolean b5 = blockedEntrances0.isBlocked(direction3);
    org.mafagafogigante.dungeon.game.BlockedEntrances blockedEntrances6 = new org.mafagafogigante.dungeon.game.BlockedEntrances();
    org.mafagafogigante.dungeon.game.Direction direction7 = org.mafagafogigante.dungeon.game.Direction.EAST;
    boolean b8 = blockedEntrances6.isBlocked(direction7);
    org.mafagafogigante.dungeon.game.Direction direction9 = org.mafagafogigante.dungeon.game.Direction.WEST;
    boolean b10 = blockedEntrances6.isBlocked(direction9);
    org.mafagafogigante.dungeon.game.Direction direction11 = direction9.invert();
    boolean b12 = blockedEntrances0.isBlocked(direction9);
    org.junit.Assert.assertTrue("'" + direction1 + "' != '" + org.mafagafogigante.dungeon.game.Direction.EAST + "'", direction1.equals(org.mafagafogigante.dungeon.game.Direction.EAST));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + direction3 + "' != '" + org.mafagafogigante.dungeon.game.Direction.EAST + "'", direction3.equals(org.mafagafogigante.dungeon.game.Direction.EAST));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "East"+ "'", str4.equals("East"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    org.junit.Assert.assertTrue("'" + direction7 + "' != '" + org.mafagafogigante.dungeon.game.Direction.EAST + "'", direction7.equals(org.mafagafogigante.dungeon.game.Direction.EAST));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    org.junit.Assert.assertTrue("'" + direction9 + "' != '" + org.mafagafogigante.dungeon.game.Direction.WEST + "'", direction9.equals(org.mafagafogigante.dungeon.game.Direction.WEST));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    org.junit.Assert.assertTrue("'" + direction11 + "' != '" + org.mafagafogigante.dungeon.game.Direction.EAST + "'", direction11.equals(org.mafagafogigante.dungeon.game.Direction.EAST));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);

  }

  @Test
  public void test102() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test102"); }

    org.mafagafogigante.dungeon.util.Percentage percentage1 = new org.mafagafogigante.dungeon.util.Percentage((double)'#');
    boolean b3 = percentage1.equals((java.lang.Object)10.0d);
    org.mafagafogigante.dungeon.entity.Luminosity luminosity4 = new org.mafagafogigante.dungeon.entity.Luminosity(percentage1);
    org.mafagafogigante.dungeon.world.LuminosityVisibilityCriterion luminosityVisibilityCriterion5 = new org.mafagafogigante.dungeon.world.LuminosityVisibilityCriterion(luminosity4);
    org.mafagafogigante.dungeon.world.VisibilityCriterion[] visibilityCriterion_array6 = new org.mafagafogigante.dungeon.world.VisibilityCriterion[] {  };
    org.mafagafogigante.dungeon.world.VisibilityCriteria visibilityCriteria7 = new org.mafagafogigante.dungeon.world.VisibilityCriteria(visibilityCriterion_array6);
    org.mafagafogigante.dungeon.entity.creatures.Creature creature8 = null;
    org.mafagafogigante.dungeon.entity.creatures.Observer observer9 = new org.mafagafogigante.dungeon.entity.creatures.Observer(creature8);
    boolean b10 = visibilityCriteria7.isMetBy(observer9);
    org.mafagafogigante.dungeon.entity.items.Item[] item_array11 = new org.mafagafogigante.dungeon.entity.items.Item[] {  };
    java.util.ArrayList<org.mafagafogigante.dungeon.entity.items.Item> arraylist_item12 = new java.util.ArrayList<org.mafagafogigante.dungeon.entity.items.Item>();
    boolean b13 = java.util.Collections.addAll((java.util.Collection<org.mafagafogigante.dungeon.entity.items.Item>)arraylist_item12, item_array11);
    org.mafagafogigante.dungeon.game.DungeonString dungeonString15 = new org.mafagafogigante.dungeon.game.DungeonString("hi!");
    observer9.writeItemSight((java.util.List<org.mafagafogigante.dungeon.entity.items.Item>)arraylist_item12, dungeonString15);
    org.mafagafogigante.dungeon.world.VisibilityCriterion[] visibilityCriterion_array17 = new org.mafagafogigante.dungeon.world.VisibilityCriterion[] {  };
    org.mafagafogigante.dungeon.world.VisibilityCriteria visibilityCriteria18 = new org.mafagafogigante.dungeon.world.VisibilityCriteria(visibilityCriterion_array17);
    org.mafagafogigante.dungeon.entity.creatures.Creature creature19 = null;
    org.mafagafogigante.dungeon.entity.creatures.Observer observer20 = new org.mafagafogigante.dungeon.entity.creatures.Observer(creature19);
    boolean b21 = visibilityCriteria18.isMetBy(observer20);
    org.mafagafogigante.dungeon.entity.items.Item[] item_array22 = new org.mafagafogigante.dungeon.entity.items.Item[] {  };
    java.util.ArrayList<org.mafagafogigante.dungeon.entity.items.Item> arraylist_item23 = new java.util.ArrayList<org.mafagafogigante.dungeon.entity.items.Item>();
    boolean b24 = java.util.Collections.addAll((java.util.Collection<org.mafagafogigante.dungeon.entity.items.Item>)arraylist_item23, item_array22);
    org.mafagafogigante.dungeon.game.DungeonString dungeonString26 = new org.mafagafogigante.dungeon.game.DungeonString("hi!");
    observer20.writeItemSight((java.util.List<org.mafagafogigante.dungeon.entity.items.Item>)arraylist_item23, dungeonString26);
    org.mafagafogigante.dungeon.game.DungeonString dungeonString29 = new org.mafagafogigante.dungeon.game.DungeonString("");
    java.util.List<org.mafagafogigante.dungeon.game.ColoredString> list_coloredString30 = dungeonString29.toColoredStringList();
    observer9.writeItemSight((java.util.List<org.mafagafogigante.dungeon.entity.items.Item>)arraylist_item23, dungeonString29);
    // The following exception was thrown during execution in test generation
    try {
    boolean b32 = luminosityVisibilityCriterion5.isMetBy(observer9);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(visibilityCriterion_array6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(item_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(visibilityCriterion_array17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(item_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_coloredString30);

  }

  @Test
  public void test103() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test103"); }

    org.mafagafogigante.dungeon.date.DungeonTimeUnit dungeonTimeUnit0 = org.mafagafogigante.dungeon.date.DungeonTimeUnit.DAY;
    org.mafagafogigante.dungeon.date.DungeonTimeUnit dungeonTimeUnit1 = org.mafagafogigante.dungeon.date.DungeonTimeUnit.MILLISECOND;
    long long2 = dungeonTimeUnit0.as(dungeonTimeUnit1);
    org.mafagafogigante.dungeon.date.Date date6 = new org.mafagafogigante.dungeon.date.Date(10L, 100L, 100L);
    org.mafagafogigante.dungeon.date.Date date10 = new org.mafagafogigante.dungeon.date.Date(10L, 100L, 100L);
    int i11 = date6.compareTo(date10);
    long long12 = date10.getDay();
    org.mafagafogigante.dungeon.game.PartOfDay partOfDay13 = org.mafagafogigante.dungeon.game.PartOfDay.NIGHT;
    int i14 = org.mafagafogigante.dungeon.game.PartOfDay.getSecondsToNext(date10, partOfDay13);
    long long15 = date10.getYear();
    org.mafagafogigante.dungeon.date.Date date19 = new org.mafagafogigante.dungeon.date.Date(10L, 100L, 100L);
    org.mafagafogigante.dungeon.date.Date date23 = new org.mafagafogigante.dungeon.date.Date(10L, 100L, 100L);
    int i24 = date19.compareTo(date23);
    org.mafagafogigante.dungeon.game.PartOfDay partOfDay25 = org.mafagafogigante.dungeon.game.PartOfDay.getCorrespondingConstant(date19);
    org.mafagafogigante.dungeon.game.PartOfDay partOfDay26 = org.mafagafogigante.dungeon.game.PartOfDay.getCorrespondingConstant(date19);
    int i27 = org.mafagafogigante.dungeon.game.PartOfDay.getSecondsToNext(date10, partOfDay26);
    org.mafagafogigante.dungeon.date.DungeonTimeUnit dungeonTimeUnit29 = org.mafagafogigante.dungeon.date.DungeonTimeUnit.HOUR;
    org.mafagafogigante.dungeon.date.Date date30 = date10.minus(82800, dungeonTimeUnit29);
    // The following exception was thrown during execution in test generation
    try {
    long long31 = dungeonTimeUnit1.as(dungeonTimeUnit29);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    org.junit.Assert.assertTrue("'" + dungeonTimeUnit0 + "' != '" + org.mafagafogigante.dungeon.date.DungeonTimeUnit.DAY + "'", dungeonTimeUnit0.equals(org.mafagafogigante.dungeon.date.DungeonTimeUnit.DAY));
    org.junit.Assert.assertTrue("'" + dungeonTimeUnit1 + "' != '" + org.mafagafogigante.dungeon.date.DungeonTimeUnit.MILLISECOND + "'", dungeonTimeUnit1.equals(org.mafagafogigante.dungeon.date.DungeonTimeUnit.MILLISECOND));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long2 == 86400000L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long12 == 10L);
    org.junit.Assert.assertTrue("'" + partOfDay13 + "' != '" + org.mafagafogigante.dungeon.game.PartOfDay.NIGHT + "'", partOfDay13.equals(org.mafagafogigante.dungeon.game.PartOfDay.NIGHT));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 3600);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long15 == 10L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i24 == 0);
    org.junit.Assert.assertTrue("'" + partOfDay25 + "' != '" + org.mafagafogigante.dungeon.game.PartOfDay.MIDNIGHT + "'", partOfDay25.equals(org.mafagafogigante.dungeon.game.PartOfDay.MIDNIGHT));
    org.junit.Assert.assertTrue("'" + partOfDay26 + "' != '" + org.mafagafogigante.dungeon.game.PartOfDay.MIDNIGHT + "'", partOfDay26.equals(org.mafagafogigante.dungeon.game.PartOfDay.MIDNIGHT));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i27 == 82800);
    org.junit.Assert.assertTrue("'" + dungeonTimeUnit29 + "' != '" + org.mafagafogigante.dungeon.date.DungeonTimeUnit.HOUR + "'", dungeonTimeUnit29.equals(org.mafagafogigante.dungeon.date.DungeonTimeUnit.HOUR));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(date30);

  }

  @Test
  public void test104() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test104"); }

    org.mafagafogigante.dungeon.date.Date date3 = new org.mafagafogigante.dungeon.date.Date(10L, 100L, 100L);
    org.mafagafogigante.dungeon.date.Date date7 = new org.mafagafogigante.dungeon.date.Date(10L, 100L, 100L);
    int i8 = date3.compareTo(date7);
    long long9 = date7.getHour();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long9 == 0L);

  }

  @Test
  public void test105() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test105"); }

    org.mafagafogigante.dungeon.commands.CommandDescription commandDescription2 = new org.mafagafogigante.dungeon.commands.CommandDescription("", "day 10 of month 1 of the year 1");
    java.lang.String str3 = commandDescription2.getInfo();
    java.lang.String str4 = commandDescription2.getInfo();
    java.lang.String str5 = commandDescription2.toString();
    java.lang.String str6 = commandDescription2.getName();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "day 10 of month 1 of the year 1"+ "'", str3.equals("day 10 of month 1 of the year 1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "day 10 of month 1 of the year 1"+ "'", str4.equals("day 10 of month 1 of the year 1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + " : day 10 of month 1 of the year 1"+ "'", str5.equals(" : day 10 of month 1 of the year 1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + ""+ "'", str6.equals(""));

  }

  @Test
  public void test106() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test106"); }

    org.mafagafogigante.dungeon.entity.creatures.Creature creature1 = null;
    org.mafagafogigante.dungeon.entity.creatures.CreatureHealth creatureHealth2 = org.mafagafogigante.dungeon.entity.creatures.CreatureHealth.makeCreatureHealth(100, creature1);
    int i3 = creatureHealth2.getMaximum();
    int i4 = creatureHealth2.getCurrent();
    boolean b5 = creatureHealth2.isDead();
    boolean b6 = creatureHealth2.isAlive();
    creatureHealth2.incrementBy((int)(short)-1);
    boolean b9 = creatureHealth2.isDead();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(creatureHealth2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);

  }

  @Test
  public void test107() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test107"); }

    org.mafagafogigante.dungeon.entity.items.ItemPreset itemPreset0 = new org.mafagafogigante.dungeon.entity.items.ItemPreset();
    org.mafagafogigante.dungeon.entity.Integrity integrity1 = itemPreset0.getIntegrity();
    org.mafagafogigante.dungeon.entity.Integrity integrity2 = null;
    itemPreset0.setIntegrity(integrity2);
    org.mafagafogigante.dungeon.util.Percentage percentage4 = itemPreset0.getVisibility();
    boolean b5 = itemPreset0.isUnique();
    org.mafagafogigante.dungeon.game.Id id6 = null;
    itemPreset0.setId(id6);
    java.lang.String str8 = itemPreset0.getType();
    org.mafagafogigante.dungeon.game.Id id9 = null;
    itemPreset0.setId(id9);
    org.mafagafogigante.dungeon.util.Percentage percentage12 = new org.mafagafogigante.dungeon.util.Percentage((double)'#');
    boolean b14 = percentage12.equals((java.lang.Object)10.0d);
    double d15 = percentage12.toDouble();
    org.mafagafogigante.dungeon.entity.Luminosity luminosity16 = new org.mafagafogigante.dungeon.entity.Luminosity(percentage12);
    org.mafagafogigante.dungeon.entity.items.ItemPreset itemPreset17 = new org.mafagafogigante.dungeon.entity.items.ItemPreset();
    org.mafagafogigante.dungeon.entity.Integrity integrity18 = itemPreset17.getIntegrity();
    itemPreset17.setIntegrityDecrementOnEat((-1));
    org.mafagafogigante.dungeon.entity.Weight weight21 = itemPreset17.getWeight();
    itemPreset17.setDrinkableHealing((int)(byte)1);
    org.mafagafogigante.dungeon.entity.items.ItemPreset itemPreset24 = new org.mafagafogigante.dungeon.entity.items.ItemPreset();
    org.mafagafogigante.dungeon.entity.Integrity integrity25 = itemPreset24.getIntegrity();
    org.mafagafogigante.dungeon.entity.Integrity integrity26 = null;
    itemPreset24.setIntegrity(integrity26);
    org.mafagafogigante.dungeon.util.Percentage percentage28 = itemPreset24.getVisibility();
    java.lang.String str29 = itemPreset24.getType();
    itemPreset24.setIntegrityDecrementOnHit((int)(short)100);
    org.mafagafogigante.dungeon.util.Percentage percentage33 = new org.mafagafogigante.dungeon.util.Percentage((double)57);
    itemPreset24.setVisibility(percentage33);
    itemPreset17.setVisibility(percentage33);
    boolean b36 = percentage12.biggerThanOrEqualTo(percentage33);
    org.mafagafogigante.dungeon.entity.items.ItemPreset itemPreset40 = new org.mafagafogigante.dungeon.entity.items.ItemPreset();
    itemPreset40.setDrinkableHealing((int)(short)0);
    org.mafagafogigante.dungeon.util.Percentage percentage44 = new org.mafagafogigante.dungeon.util.Percentage((double)57);
    itemPreset40.setVisibility(percentage44);
    double d46 = org.mafagafogigante.dungeon.util.DungeonMath.weightedAverage((double)10.0f, 100.0d, percentage44);
    org.mafagafogigante.dungeon.entity.items.ItemPreset itemPreset47 = new org.mafagafogigante.dungeon.entity.items.ItemPreset();
    org.mafagafogigante.dungeon.entity.Integrity integrity48 = itemPreset47.getIntegrity();
    org.mafagafogigante.dungeon.entity.Integrity integrity49 = null;
    itemPreset47.setIntegrity(integrity49);
    org.mafagafogigante.dungeon.util.Percentage percentage51 = itemPreset47.getVisibility();
    java.lang.String str52 = itemPreset47.getType();
    org.mafagafogigante.dungeon.entity.items.Item.Tag tag53 = org.mafagafogigante.dungeon.entity.items.Item.Tag.REPAIRABLE;
    itemPreset47.addTag(tag53);
    org.mafagafogigante.dungeon.util.Percentage percentage56 = new org.mafagafogigante.dungeon.util.Percentage((double)'#');
    boolean b58 = percentage56.equals((java.lang.Object)10.0d);
    org.mafagafogigante.dungeon.entity.Luminosity luminosity59 = new org.mafagafogigante.dungeon.entity.Luminosity(percentage56);
    itemPreset47.setVisibility(percentage56);
    boolean b61 = percentage44.biggerThanOrEqualTo(percentage56);
    org.mafagafogigante.dungeon.entity.items.WeaponComponent weaponComponent63 = new org.mafagafogigante.dungeon.entity.items.WeaponComponent((int)(short)10, percentage56, 1);
    org.mafagafogigante.dungeon.util.Percentage percentage64 = percentage12.multiply(percentage56);
    org.mafagafogigante.dungeon.util.Percentage percentage66 = new org.mafagafogigante.dungeon.util.Percentage((double)'#');
    boolean b68 = percentage66.equals((java.lang.Object)10.0d);
    double d69 = percentage66.toDouble();
    org.mafagafogigante.dungeon.entity.Luminosity luminosity70 = new org.mafagafogigante.dungeon.entity.Luminosity(percentage66);
    org.mafagafogigante.dungeon.entity.items.ItemPreset itemPreset71 = new org.mafagafogigante.dungeon.entity.items.ItemPreset();
    org.mafagafogigante.dungeon.entity.Integrity integrity72 = itemPreset71.getIntegrity();
    itemPreset71.setIntegrityDecrementOnEat((-1));
    org.mafagafogigante.dungeon.entity.Weight weight75 = itemPreset71.getWeight();
    itemPreset71.setDrinkableHealing((int)(byte)1);
    org.mafagafogigante.dungeon.entity.items.ItemPreset itemPreset78 = new org.mafagafogigante.dungeon.entity.items.ItemPreset();
    org.mafagafogigante.dungeon.entity.Integrity integrity79 = itemPreset78.getIntegrity();
    org.mafagafogigante.dungeon.entity.Integrity integrity80 = null;
    itemPreset78.setIntegrity(integrity80);
    org.mafagafogigante.dungeon.util.Percentage percentage82 = itemPreset78.getVisibility();
    java.lang.String str83 = itemPreset78.getType();
    itemPreset78.setIntegrityDecrementOnHit((int)(short)100);
    org.mafagafogigante.dungeon.util.Percentage percentage87 = new org.mafagafogigante.dungeon.util.Percentage((double)57);
    itemPreset78.setVisibility(percentage87);
    itemPreset71.setVisibility(percentage87);
    boolean b90 = percentage66.biggerThanOrEqualTo(percentage87);
    java.lang.String str91 = percentage87.toString();
    org.mafagafogigante.dungeon.util.Percentage percentage92 = percentage64.multiply(percentage87);
    itemPreset0.setVisibility(percentage64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(integrity1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(percentage4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d15 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(integrity18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(weight21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(integrity25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(percentage28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d46 == 100.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(integrity48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(percentage51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str52);
    org.junit.Assert.assertTrue("'" + tag53 + "' != '" + org.mafagafogigante.dungeon.entity.items.Item.Tag.REPAIRABLE + "'", tag53.equals(org.mafagafogigante.dungeon.entity.items.Item.Tag.REPAIRABLE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b61 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(percentage64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d69 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(integrity72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(weight75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(integrity79);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(percentage82);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str83);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b90 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str91 + "' != '" + "100.00%"+ "'", str91.equals("100.00%"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(percentage92);

  }

  @Test
  public void test108() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test108"); }

    org.mafagafogigante.dungeon.entity.items.ItemPreset itemPreset0 = new org.mafagafogigante.dungeon.entity.items.ItemPreset();
    org.mafagafogigante.dungeon.entity.Integrity integrity1 = itemPreset0.getIntegrity();
    org.mafagafogigante.dungeon.entity.Integrity integrity2 = null;
    itemPreset0.setIntegrity(integrity2);
    org.mafagafogigante.dungeon.util.Percentage percentage4 = itemPreset0.getVisibility();
    java.lang.String str5 = itemPreset0.getType();
    itemPreset0.setIntegrityDecrementOnHit((int)(short)100);
    org.mafagafogigante.dungeon.util.Percentage percentage9 = new org.mafagafogigante.dungeon.util.Percentage((double)57);
    itemPreset0.setVisibility(percentage9);
    itemPreset0.setType("visibilityCriteria=VisibilityCriteria{[]}");
    int i13 = itemPreset0.getIntegrityDecrementOnEat();
    org.mafagafogigante.dungeon.entity.items.Item.Tag tag14 = null;
    boolean b15 = itemPreset0.hasTag(tag14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(integrity1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(percentage4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);

  }

  @Test
  public void test109() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test109"); }

    org.mafagafogigante.dungeon.util.Percentage percentage1 = new org.mafagafogigante.dungeon.util.Percentage((double)57);
    boolean b2 = org.mafagafogigante.dungeon.game.Random.roll(percentage1);
    org.mafagafogigante.dungeon.entity.items.ItemPreset itemPreset5 = new org.mafagafogigante.dungeon.entity.items.ItemPreset();
    itemPreset5.setDrinkableHealing((int)(short)0);
    org.mafagafogigante.dungeon.util.Percentage percentage9 = new org.mafagafogigante.dungeon.util.Percentage((double)57);
    itemPreset5.setVisibility(percentage9);
    double d11 = org.mafagafogigante.dungeon.util.DungeonMath.weightedAverage((double)10.0f, 100.0d, percentage9);
    java.lang.String str12 = percentage9.toString();
    org.mafagafogigante.dungeon.util.Percentage percentage13 = percentage1.multiply(percentage9);
    org.mafagafogigante.dungeon.util.Percentage percentage15 = new org.mafagafogigante.dungeon.util.Percentage((double)'#');
    org.mafagafogigante.dungeon.entity.items.ItemPreset itemPreset16 = new org.mafagafogigante.dungeon.entity.items.ItemPreset();
    org.mafagafogigante.dungeon.entity.Integrity integrity17 = itemPreset16.getIntegrity();
    org.mafagafogigante.dungeon.entity.Integrity integrity18 = null;
    itemPreset16.setIntegrity(integrity18);
    org.mafagafogigante.dungeon.util.Percentage percentage20 = itemPreset16.getVisibility();
    java.lang.String str21 = itemPreset16.getType();
    itemPreset16.setIntegrityDecrementOnHit((int)(short)100);
    org.mafagafogigante.dungeon.util.Percentage percentage25 = new org.mafagafogigante.dungeon.util.Percentage((double)57);
    itemPreset16.setVisibility(percentage25);
    boolean b27 = org.mafagafogigante.dungeon.game.Random.roll(percentage25);
    org.mafagafogigante.dungeon.util.Percentage percentage28 = percentage15.multiply(percentage25);
    org.mafagafogigante.dungeon.entity.items.ItemPreset itemPreset29 = new org.mafagafogigante.dungeon.entity.items.ItemPreset();
    org.mafagafogigante.dungeon.entity.Integrity integrity30 = itemPreset29.getIntegrity();
    org.mafagafogigante.dungeon.entity.Luminosity luminosity31 = itemPreset29.getLuminosity();
    org.mafagafogigante.dungeon.util.Percentage percentage33 = new org.mafagafogigante.dungeon.util.Percentage((double)57);
    itemPreset29.setVisibility(percentage33);
    org.mafagafogigante.dungeon.util.Percentage percentage35 = percentage28.multiply(percentage33);
    org.mafagafogigante.dungeon.util.Percentage percentage36 = percentage1.multiply(percentage35);
    org.mafagafogigante.dungeon.util.Percentage percentage38 = new org.mafagafogigante.dungeon.util.Percentage((double)57);
    int i39 = percentage36.compareTo(percentage38);
    org.mafagafogigante.dungeon.entity.items.ItemPreset itemPreset40 = new org.mafagafogigante.dungeon.entity.items.ItemPreset();
    org.mafagafogigante.dungeon.entity.Integrity integrity41 = itemPreset40.getIntegrity();
    org.mafagafogigante.dungeon.entity.Integrity integrity42 = null;
    itemPreset40.setIntegrity(integrity42);
    org.mafagafogigante.dungeon.util.Percentage percentage44 = itemPreset40.getVisibility();
    java.lang.String str45 = itemPreset40.getType();
    itemPreset40.setIntegrityDecrementOnHit((int)(short)100);
    org.mafagafogigante.dungeon.util.Percentage percentage49 = new org.mafagafogigante.dungeon.util.Percentage((double)57);
    itemPreset40.setVisibility(percentage49);
    int i51 = percentage36.compareTo(percentage49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d11 == 100.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "100.00%"+ "'", str12.equals("100.00%"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(percentage13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(integrity17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(percentage20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(percentage28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(integrity30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(luminosity31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(percentage35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(percentage36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i39 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(integrity41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(percentage44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i51 == 0);

  }

  @Test
  public void test110() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test110"); }

    org.mafagafogigante.dungeon.commands.CommandHistory commandHistory0 = new org.mafagafogigante.dungeon.commands.CommandHistory();
    java.lang.String str2 = commandHistory0.getLastSimilarCommand("East");
    org.mafagafogigante.dungeon.commands.CommandHistory.Cursor cursor3 = commandHistory0.getCursor();
    org.mafagafogigante.dungeon.commands.IssuedCommand issuedCommand5 = new org.mafagafogigante.dungeon.commands.IssuedCommand("100");
    commandHistory0.addCommand(issuedCommand5);
    org.mafagafogigante.dungeon.commands.PreparedIssuedCommand preparedIssuedCommand7 = org.mafagafogigante.dungeon.commands.IssuedCommandProcessor.prepareIssuedCommand(issuedCommand5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(cursor3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(preparedIssuedCommand7);

  }

  @Test
  public void test111() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test111"); }

    org.mafagafogigante.dungeon.entity.items.FoodComponent foodComponent2 = new org.mafagafogigante.dungeon.entity.items.FoodComponent(3600, (int)(byte)1);

  }

  @Test
  public void test112() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test112"); }

    java.awt.Color color1 = null;
    org.mafagafogigante.dungeon.game.LocationDescription locationDescription2 = new org.mafagafogigante.dungeon.game.LocationDescription('4', color1);
    java.awt.Color color3 = locationDescription2.getColor();
    java.lang.String str4 = locationDescription2.toString();
    java.lang.String str5 = locationDescription2.toString();
    java.lang.String str6 = locationDescription2.getInfo();
    java.lang.String str7 = locationDescription2.getInfo();
    java.lang.String str8 = locationDescription2.getInfo();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(color3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "LocationDescription{symbol=4, color=null, info='You don't discover anything.'}"+ "'", str4.equals("LocationDescription{symbol=4, color=null, info='You don't discover anything.'}"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "LocationDescription{symbol=4, color=null, info='You don't discover anything.'}"+ "'", str5.equals("LocationDescription{symbol=4, color=null, info='You don't discover anything.'}"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "You don't discover anything."+ "'", str6.equals("You don't discover anything."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "You don't discover anything."+ "'", str7.equals("You don't discover anything."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "You don't discover anything."+ "'", str8.equals("You don't discover anything."));

  }

  @Test
  public void test113() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test113"); }

    org.mafagafogigante.dungeon.stats.ExplorationStatistics explorationStatistics0 = new org.mafagafogigante.dungeon.stats.ExplorationStatistics();
    org.mafagafogigante.dungeon.game.Point point1 = null;
    org.mafagafogigante.dungeon.game.Id id2 = null;
    explorationStatistics0.createEntryIfNotExists(point1, id2);
    org.mafagafogigante.dungeon.game.Point point7 = new org.mafagafogigante.dungeon.game.Point(10, (int)'a', 0);
    java.lang.String[] str_array10 = new java.lang.String[] { "", "" };
    org.mafagafogigante.dungeon.util.Table table11 = new org.mafagafogigante.dungeon.util.Table(str_array10);
    boolean b12 = point7.equals((java.lang.Object)str_array10);
    org.mafagafogigante.dungeon.game.Id id13 = null;
    explorationStatistics0.addVisit(point7, id13);
    org.mafagafogigante.dungeon.stats.ExplorationStatistics explorationStatistics15 = new org.mafagafogigante.dungeon.stats.ExplorationStatistics();
    org.mafagafogigante.dungeon.game.Point point16 = null;
    org.mafagafogigante.dungeon.game.Id id17 = null;
    explorationStatistics15.createEntryIfNotExists(point16, id17);
    org.mafagafogigante.dungeon.game.Point point22 = new org.mafagafogigante.dungeon.game.Point((int)' ', (int)(byte)0, (int)(short)-1);
    org.mafagafogigante.dungeon.game.Id id23 = null;
    explorationStatistics15.addVisit(point22, id23);
    java.lang.String str25 = point22.toString();
    int i26 = point22.getZ();
    org.mafagafogigante.dungeon.game.Id id27 = null;
    explorationStatistics0.addVisit(point22, id27);
    org.mafagafogigante.dungeon.game.Point point32 = new org.mafagafogigante.dungeon.game.Point(100, 10, (int)(byte)10);
    java.lang.String str33 = point32.toString();
    org.mafagafogigante.dungeon.game.Id id34 = null;
    explorationStatistics0.createEntryIfNotExists(point32, id34);
    org.mafagafogigante.dungeon.entity.items.ItemPreset itemPreset36 = new org.mafagafogigante.dungeon.entity.items.ItemPreset();
    org.mafagafogigante.dungeon.entity.Integrity integrity37 = itemPreset36.getIntegrity();
    org.mafagafogigante.dungeon.entity.Integrity integrity38 = null;
    itemPreset36.setIntegrity(integrity38);
    org.mafagafogigante.dungeon.util.Percentage percentage40 = itemPreset36.getVisibility();
    org.mafagafogigante.dungeon.entity.Integrity integrity41 = itemPreset36.getIntegrity();
    java.lang.String str42 = itemPreset36.getText();
    java.lang.String str43 = itemPreset36.getType();
    org.mafagafogigante.dungeon.entity.Integrity integrity46 = new org.mafagafogigante.dungeon.entity.Integrity(1, 0);
    boolean b47 = integrity46.isMaximum();
    integrity46.incrementBy((int)(short)0);
    org.mafagafogigante.dungeon.util.Percentage percentage50 = integrity46.toPercentage();
    itemPreset36.setHitRate(percentage50);
    org.mafagafogigante.dungeon.game.Id id53 = new org.mafagafogigante.dungeon.game.Id("100");
    java.lang.String str54 = id53.toString();
    itemPreset36.setId(id53);
    org.mafagafogigante.dungeon.entity.items.BookComponent bookComponent57 = new org.mafagafogigante.dungeon.entity.items.BookComponent(id53, "DungeonString{coloredStringList=[ColoredString{string='hi!hi!DamagedBattleStatistics{records=CounterMap{map={}}}', color=java.awt.Color[r=192,g=192,b=192]}], currentColor=java.awt.Color[r=192,g=192,b=192]}");
    // The following exception was thrown during execution in test generation
    try {
    int i58 = explorationStatistics0.getKillCount(id53);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + "{32, 0, -1}"+ "'", str25.equals("{32, 0, -1}"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i26 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str33 + "' != '" + "{100, 10, 10}"+ "'", str33.equals("{100, 10, 10}"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(integrity37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(percentage40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(integrity41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(percentage50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str54 + "' != '" + "100"+ "'", str54.equals("100"));

  }

  @Test
  public void test114() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test114"); }

    int i1 = org.mafagafogigante.dungeon.util.DungeonMath.safeCastLongToInteger((long)17518);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 17518);

  }

  @Test
  public void test115() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test115"); }

    org.mafagafogigante.dungeon.date.Date date6 = new org.mafagafogigante.dungeon.date.Date((long)100, 100L, (long)81, (long)(byte)-1, (long)152, (-1L));
    java.lang.String str7 = date6.toTimeString();
    java.lang.String str8 = date6.toDateString();
    org.mafagafogigante.dungeon.date.Date date12 = new org.mafagafogigante.dungeon.date.Date(10L, 100L, 100L);
    org.mafagafogigante.dungeon.date.Date date16 = new org.mafagafogigante.dungeon.date.Date(10L, 100L, 100L);
    int i17 = date12.compareTo(date16);
    long long18 = date16.getDay();
    long long19 = date16.getHour();
    org.mafagafogigante.dungeon.date.DungeonTimeUnit dungeonTimeUnit21 = org.mafagafogigante.dungeon.date.DungeonTimeUnit.DAY;
    org.mafagafogigante.dungeon.date.Date date22 = date16.plus(17518, dungeonTimeUnit21);
    org.mafagafogigante.dungeon.date.Date date27 = new org.mafagafogigante.dungeon.date.Date((long)32, (long)(short)10, 0L);
    org.mafagafogigante.dungeon.date.DungeonTimeUnit dungeonTimeUnit29 = org.mafagafogigante.dungeon.date.DungeonTimeUnit.SECOND;
    org.mafagafogigante.dungeon.date.DungeonTimeUnit dungeonTimeUnit30 = org.mafagafogigante.dungeon.date.DungeonTimeUnit.MILLISECOND;
    long long31 = dungeonTimeUnit29.as(dungeonTimeUnit30);
    org.mafagafogigante.dungeon.date.Date date32 = date27.minus((int)(short)100, dungeonTimeUnit29);
    org.mafagafogigante.dungeon.date.Date date33 = date16.plus(32, dungeonTimeUnit29);
    long long34 = date33.getHour();
    // The following exception was thrown during execution in test generation
    try {
    org.mafagafogigante.dungeon.date.Duration duration35 = new org.mafagafogigante.dungeon.date.Duration(date6, date33);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "01:00:00"+ "'", str7.equals("01:00:00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "day 10 of month 10 of the year 100"+ "'", str8.equals("day 10 of month 10 of the year 100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long18 == 10L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long19 == 0L);
    org.junit.Assert.assertTrue("'" + dungeonTimeUnit21 + "' != '" + org.mafagafogigante.dungeon.date.DungeonTimeUnit.DAY + "'", dungeonTimeUnit21.equals(org.mafagafogigante.dungeon.date.DungeonTimeUnit.DAY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(date22);
    org.junit.Assert.assertTrue("'" + dungeonTimeUnit29 + "' != '" + org.mafagafogigante.dungeon.date.DungeonTimeUnit.SECOND + "'", dungeonTimeUnit29.equals(org.mafagafogigante.dungeon.date.DungeonTimeUnit.SECOND));
    org.junit.Assert.assertTrue("'" + dungeonTimeUnit30 + "' != '" + org.mafagafogigante.dungeon.date.DungeonTimeUnit.MILLISECOND + "'", dungeonTimeUnit30.equals(org.mafagafogigante.dungeon.date.DungeonTimeUnit.MILLISECOND));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long31 == 1000L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(date32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(date33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long34 == 0L);

  }

  @Test
  public void test116() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test116"); }

    org.mafagafogigante.dungeon.entity.creatures.CreaturePreset creaturePreset0 = new org.mafagafogigante.dungeon.entity.creatures.CreaturePreset();
    org.mafagafogigante.dungeon.game.Id id1 = null;
    creaturePreset0.setWeaponId(id1);
    org.mafagafogigante.dungeon.game.Id id3 = creaturePreset0.getId();
    org.mafagafogigante.dungeon.entity.Luminosity luminosity4 = creaturePreset0.getLuminosity();
    org.mafagafogigante.dungeon.game.PartOfDay partOfDay5 = org.mafagafogigante.dungeon.game.PartOfDay.NIGHT;
    org.mafagafogigante.dungeon.entity.Luminosity luminosity6 = partOfDay5.getLuminosity();
    org.mafagafogigante.dungeon.world.LuminosityVisibilityCriterion luminosityVisibilityCriterion7 = new org.mafagafogigante.dungeon.world.LuminosityVisibilityCriterion(luminosity6);
    creaturePreset0.setLuminosity(luminosity6);
    org.mafagafogigante.dungeon.game.Id id9 = null;
    creaturePreset0.setId(id9);
    creaturePreset0.setType("0 ms");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(id3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(luminosity4);
    org.junit.Assert.assertTrue("'" + partOfDay5 + "' != '" + org.mafagafogigante.dungeon.game.PartOfDay.NIGHT + "'", partOfDay5.equals(org.mafagafogigante.dungeon.game.PartOfDay.NIGHT));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(luminosity6);

  }

  @Test
  public void test117() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test117"); }

    org.mafagafogigante.dungeon.game.DungeonString dungeonString1 = new org.mafagafogigante.dungeon.game.DungeonString("WritingSpecifications{scrollDown=false}");

  }

  @Test
  public void test118() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test118"); }

    org.mafagafogigante.dungeon.entity.items.ItemPreset itemPreset0 = new org.mafagafogigante.dungeon.entity.items.ItemPreset();
    org.mafagafogigante.dungeon.entity.Integrity integrity1 = itemPreset0.getIntegrity();
    itemPreset0.setIntegrityDecrementOnEat((-1));
    itemPreset0.setPutrefactionPeriod((-1L));
    itemPreset0.setDrinkableDoses((int)(short)10);
    itemPreset0.setPutrefactionPeriod((long)(byte)1);
    org.mafagafogigante.dungeon.util.Percentage percentage13 = new org.mafagafogigante.dungeon.util.Percentage((double)'#');
    boolean b15 = percentage13.equals((java.lang.Object)10.0d);
    org.mafagafogigante.dungeon.entity.Luminosity luminosity16 = new org.mafagafogigante.dungeon.entity.Luminosity(percentage13);
    org.mafagafogigante.dungeon.util.Percentage percentage17 = luminosity16.toPercentage();
    java.lang.String str18 = percentage17.toString();
    double d19 = org.mafagafogigante.dungeon.util.DungeonMath.weightedAverage((double)(-1), (double)(short)-1, percentage17);
    java.lang.String str20 = percentage17.toString();
    org.mafagafogigante.dungeon.game.Direction direction21 = org.mafagafogigante.dungeon.game.Direction.UP;
    boolean b23 = direction21.equalsIgnoreCase("97-01-01 00:00:00");
    boolean b24 = percentage17.equals((java.lang.Object)"97-01-01 00:00:00");
    itemPreset0.setVisibility(percentage17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(integrity1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(percentage17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "100.00%"+ "'", str18.equals("100.00%"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d19 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + "100.00%"+ "'", str20.equals("100.00%"));
    org.junit.Assert.assertTrue("'" + direction21 + "' != '" + org.mafagafogigante.dungeon.game.Direction.UP + "'", direction21.equals(org.mafagafogigante.dungeon.game.Direction.UP));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);

  }

  @Test
  public void test119() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test119"); }

    java.lang.String[] str_array5 = new java.lang.String[] { "hi!", "visibilityCriteria=VisibilityCriteria{[]}", "visibilityCriteria=VisibilityCriteria{[]}", "Damaged", "hi!" };
    org.mafagafogigante.dungeon.util.Table table6 = new org.mafagafogigante.dungeon.util.Table(str_array5);
    org.mafagafogigante.dungeon.util.Table table7 = new org.mafagafogigante.dungeon.util.Table(str_array5);
    java.util.List<org.mafagafogigante.dungeon.game.ColoredString> list_coloredString8 = table7.toColoredStringList();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_coloredString8);

  }

  @Test
  public void test120() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test120"); }

    org.mafagafogigante.dungeon.stats.ExplorationStatistics explorationStatistics0 = new org.mafagafogigante.dungeon.stats.ExplorationStatistics();
    org.mafagafogigante.dungeon.game.Point point1 = null;
    org.mafagafogigante.dungeon.game.Id id2 = null;
    explorationStatistics0.createEntryIfNotExists(point1, id2);
    org.mafagafogigante.dungeon.stats.ExplorationStatistics explorationStatistics4 = new org.mafagafogigante.dungeon.stats.ExplorationStatistics();
    org.mafagafogigante.dungeon.game.Point point5 = null;
    org.mafagafogigante.dungeon.game.Id id6 = null;
    explorationStatistics4.createEntryIfNotExists(point5, id6);
    org.mafagafogigante.dungeon.game.Point point11 = new org.mafagafogigante.dungeon.game.Point((int)' ', (int)(byte)0, (int)(short)-1);
    org.mafagafogigante.dungeon.game.Id id12 = null;
    explorationStatistics4.addVisit(point11, id12);
    org.mafagafogigante.dungeon.stats.ExplorationStatistics explorationStatistics14 = new org.mafagafogigante.dungeon.stats.ExplorationStatistics();
    org.mafagafogigante.dungeon.game.Point point15 = null;
    org.mafagafogigante.dungeon.game.Id id16 = null;
    explorationStatistics14.createEntryIfNotExists(point15, id16);
    org.mafagafogigante.dungeon.game.Point point21 = new org.mafagafogigante.dungeon.game.Point((int)' ', (int)(byte)0, (int)(short)-1);
    org.mafagafogigante.dungeon.game.Id id22 = null;
    explorationStatistics14.addVisit(point21, id22);
    int i24 = point21.getZ();
    org.mafagafogigante.dungeon.game.Id id25 = null;
    explorationStatistics4.createEntryIfNotExists(point21, id25);
    org.mafagafogigante.dungeon.game.Id id27 = null;
    explorationStatistics0.addVisit(point21, id27);
    org.mafagafogigante.dungeon.stats.ExplorationStatistics explorationStatistics29 = new org.mafagafogigante.dungeon.stats.ExplorationStatistics();
    org.mafagafogigante.dungeon.game.Point point30 = null;
    org.mafagafogigante.dungeon.game.Id id31 = null;
    explorationStatistics29.createEntryIfNotExists(point30, id31);
    org.mafagafogigante.dungeon.game.Point point36 = new org.mafagafogigante.dungeon.game.Point(10, (int)'a', 0);
    java.lang.String[] str_array39 = new java.lang.String[] { "", "" };
    org.mafagafogigante.dungeon.util.Table table40 = new org.mafagafogigante.dungeon.util.Table(str_array39);
    boolean b41 = point36.equals((java.lang.Object)str_array39);
    org.mafagafogigante.dungeon.game.Id id42 = null;
    explorationStatistics29.addVisit(point36, id42);
    org.mafagafogigante.dungeon.game.Id id44 = null;
    explorationStatistics0.createEntryIfNotExists(point36, id44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i24 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == false);

  }

  @Test
  public void test121() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test121"); }

    org.mafagafogigante.dungeon.entity.creatures.CreaturePresetFactory[] creaturePresetFactory_array0 = new org.mafagafogigante.dungeon.entity.creatures.CreaturePresetFactory[] {  };
    org.mafagafogigante.dungeon.entity.creatures.CreatureFactory creatureFactory1 = new org.mafagafogigante.dungeon.entity.creatures.CreatureFactory(creaturePresetFactory_array0);
    org.mafagafogigante.dungeon.entity.creatures.CreatureFactory creatureFactory2 = new org.mafagafogigante.dungeon.entity.creatures.CreatureFactory(creaturePresetFactory_array0);
    org.mafagafogigante.dungeon.game.Id id3 = null;
    org.mafagafogigante.dungeon.game.World world4 = null;
    org.mafagafogigante.dungeon.entity.creatures.Creature creature5 = creatureFactory2.makeCreature(id3, world4);
    org.mafagafogigante.dungeon.game.Id id6 = null;
    org.mafagafogigante.dungeon.game.World world7 = null;
    org.mafagafogigante.dungeon.entity.creatures.Creature creature8 = creatureFactory2.makeCreature(id6, world7);
    org.mafagafogigante.dungeon.game.Id id9 = null;
    org.mafagafogigante.dungeon.game.World world10 = null;
    org.mafagafogigante.dungeon.entity.creatures.Creature creature11 = creatureFactory2.makeCreature(id9, world10);
    org.mafagafogigante.dungeon.entity.creatures.CorpseItemPresetFactory corpseItemPresetFactory12 = new org.mafagafogigante.dungeon.entity.creatures.CorpseItemPresetFactory(creatureFactory2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(creaturePresetFactory_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(creature5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(creature8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(creature11);

  }

  @Test
  public void test122() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test122"); }

    org.mafagafogigante.dungeon.entity.items.ItemPreset itemPreset0 = new org.mafagafogigante.dungeon.entity.items.ItemPreset();
    itemPreset0.setDrinkableHealing((int)(short)0);
    org.mafagafogigante.dungeon.util.Percentage percentage4 = new org.mafagafogigante.dungeon.util.Percentage((double)57);
    itemPreset0.setVisibility(percentage4);
    int i6 = itemPreset0.getDrinkableDoses();
    itemPreset0.setIntegrityDecrementOnEat((int)' ');
    org.mafagafogigante.dungeon.util.Percentage percentage9 = null;
    org.mafagafogigante.dungeon.entity.Luminosity luminosity10 = new org.mafagafogigante.dungeon.entity.Luminosity(percentage9);
    org.mafagafogigante.dungeon.entity.LightSource lightSource11 = new org.mafagafogigante.dungeon.entity.LightSource(luminosity10);
    org.mafagafogigante.dungeon.entity.LightSource lightSource12 = new org.mafagafogigante.dungeon.entity.LightSource(luminosity10);
    itemPreset0.setLuminosity(luminosity10);
    org.mafagafogigante.dungeon.world.LuminosityVisibilityCriterion luminosityVisibilityCriterion14 = new org.mafagafogigante.dungeon.world.LuminosityVisibilityCriterion(luminosity10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 0);

  }

  @Test
  public void test123() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test123"); }

    org.mafagafogigante.dungeon.game.Direction direction0 = org.mafagafogigante.dungeon.game.Direction.EAST;
    boolean b2 = direction0.equalsIgnoreCase("");
    org.mafagafogigante.dungeon.game.Direction direction3 = direction0.invert();
    java.lang.String str4 = direction3.toString();
    org.junit.Assert.assertTrue("'" + direction0 + "' != '" + org.mafagafogigante.dungeon.game.Direction.EAST + "'", direction0.equals(org.mafagafogigante.dungeon.game.Direction.EAST));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + direction3 + "' != '" + org.mafagafogigante.dungeon.game.Direction.WEST + "'", direction3.equals(org.mafagafogigante.dungeon.game.Direction.WEST));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "West"+ "'", str4.equals("West"));

  }

  @Test
  public void test124() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test124"); }

    org.mafagafogigante.dungeon.util.ShuffledRange shuffledRange2 = new org.mafagafogigante.dungeon.util.ShuffledRange(0, 81);
    shuffledRange2.shuffle();

  }

  @Test
  public void test125() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test125"); }

    org.mafagafogigante.dungeon.date.Date date3 = new org.mafagafogigante.dungeon.date.Date(10L, 100L, 100L);
    org.mafagafogigante.dungeon.date.Date date7 = new org.mafagafogigante.dungeon.date.Date(10L, 100L, 100L);
    int i8 = date3.compareTo(date7);
    org.mafagafogigante.dungeon.game.PartOfDay partOfDay9 = org.mafagafogigante.dungeon.game.PartOfDay.getCorrespondingConstant(date3);
    long long10 = date3.getYear();
    org.mafagafogigante.dungeon.date.Date date14 = new org.mafagafogigante.dungeon.date.Date(10L, 100L, 100L);
    org.mafagafogigante.dungeon.date.Date date18 = new org.mafagafogigante.dungeon.date.Date(10L, 100L, 100L);
    int i19 = date14.compareTo(date18);
    long long20 = date14.getYear();
    int i21 = date3.compareTo(date14);
    java.lang.String str22 = date14.toDateString();
    long long23 = date14.getHour();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 0);
    org.junit.Assert.assertTrue("'" + partOfDay9 + "' != '" + org.mafagafogigante.dungeon.game.PartOfDay.MIDNIGHT + "'", partOfDay9.equals(org.mafagafogigante.dungeon.game.PartOfDay.MIDNIGHT));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long10 == 10L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long20 == 10L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "day 10 of month 10 of the year 10"+ "'", str22.equals("day 10 of month 10 of the year 10"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long23 == 0L);

  }

  @Test
  public void test126() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test126"); }

    org.mafagafogigante.dungeon.util.SystemInformation systemInformation0 = new org.mafagafogigante.dungeon.util.SystemInformation();
    java.util.List<org.mafagafogigante.dungeon.game.ColoredString> list_coloredString1 = systemInformation0.toColoredStringList();
    org.mafagafogigante.dungeon.gui.WritingSpecifications writingSpecifications2 = null;
    org.mafagafogigante.dungeon.io.Writer.write((org.mafagafogigante.dungeon.game.Writable)systemInformation0, writingSpecifications2);
    java.util.List<org.mafagafogigante.dungeon.game.ColoredString> list_coloredString4 = systemInformation0.toColoredStringList();
    java.util.List<org.mafagafogigante.dungeon.game.ColoredString> list_coloredString5 = systemInformation0.toColoredStringList();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_coloredString1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_coloredString4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_coloredString5);

  }

  @Test
  public void test127() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test127"); }

    org.mafagafogigante.dungeon.entity.items.FoodComponent foodComponent2 = new org.mafagafogigante.dungeon.entity.items.FoodComponent((int)(byte)10, 32);

  }

  @Test
  public void test128() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test128"); }

    java.lang.String[] str_array5 = new java.lang.String[] { "hi!", "visibilityCriteria=VisibilityCriteria{[]}", "visibilityCriteria=VisibilityCriteria{[]}", "Damaged", "hi!" };
    org.mafagafogigante.dungeon.util.Table table6 = new org.mafagafogigante.dungeon.util.Table(str_array5);
    org.mafagafogigante.dungeon.io.Writer.writeAndWait((org.mafagafogigante.dungeon.game.Writable)table6);
    java.util.List<org.mafagafogigante.dungeon.game.ColoredString> list_coloredString8 = table6.toColoredStringList();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_coloredString8);

  }

  @Test
  public void test129() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test129"); }

    org.mafagafogigante.dungeon.entity.items.ItemPreset itemPreset0 = new org.mafagafogigante.dungeon.entity.items.ItemPreset();
    org.mafagafogigante.dungeon.entity.Integrity integrity1 = itemPreset0.getIntegrity();
    itemPreset0.setIntegrityDecrementOnEat((-1));
    itemPreset0.setPutrefactionPeriod((-1L));
    org.mafagafogigante.dungeon.entity.Entity[] entity_array6 = new org.mafagafogigante.dungeon.entity.Entity[] {  };
    java.util.ArrayList<org.mafagafogigante.dungeon.entity.Entity> arraylist_entity7 = new java.util.ArrayList<org.mafagafogigante.dungeon.entity.Entity>();
    boolean b8 = java.util.Collections.addAll((java.util.Collection<org.mafagafogigante.dungeon.entity.Entity>)arraylist_entity7, entity_array6);
    org.mafagafogigante.dungeon.entity.Luminosity luminosity9 = org.mafagafogigante.dungeon.entity.Luminosity.resultantLuminosity((java.util.Collection<org.mafagafogigante.dungeon.entity.Entity>)arraylist_entity7);
    org.mafagafogigante.dungeon.entity.Luminosity luminosity10 = org.mafagafogigante.dungeon.entity.Luminosity.resultantLuminosity((java.util.Collection<org.mafagafogigante.dungeon.entity.Entity>)arraylist_entity7);
    itemPreset0.setLuminosity(luminosity10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(integrity1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(entity_array6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(luminosity9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(luminosity10);

  }

  @Test
  public void test130() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test130"); }

    org.mafagafogigante.dungeon.entity.items.ItemPreset itemPreset0 = new org.mafagafogigante.dungeon.entity.items.ItemPreset();
    org.mafagafogigante.dungeon.entity.Integrity integrity1 = itemPreset0.getIntegrity();
    itemPreset0.setIntegrityDecrementOnEat((-1));
    org.mafagafogigante.dungeon.entity.Weight weight4 = itemPreset0.getWeight();
    itemPreset0.setDrinkableHealing((int)(byte)1);
    org.mafagafogigante.dungeon.entity.items.ItemPreset itemPreset7 = new org.mafagafogigante.dungeon.entity.items.ItemPreset();
    org.mafagafogigante.dungeon.entity.Integrity integrity8 = itemPreset7.getIntegrity();
    org.mafagafogigante.dungeon.entity.Integrity integrity9 = null;
    itemPreset7.setIntegrity(integrity9);
    org.mafagafogigante.dungeon.util.Percentage percentage11 = itemPreset7.getVisibility();
    java.lang.String str12 = itemPreset7.getType();
    itemPreset7.setIntegrityDecrementOnHit((int)(short)100);
    org.mafagafogigante.dungeon.util.Percentage percentage16 = new org.mafagafogigante.dungeon.util.Percentage((double)57);
    itemPreset7.setVisibility(percentage16);
    itemPreset0.setVisibility(percentage16);
    int i19 = itemPreset0.getIntegrityDecrementOnHit();
    itemPreset0.setDamage((int)(byte)100);
    java.lang.String str22 = itemPreset0.getText();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(integrity1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(weight4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(integrity8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(percentage11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str22);

  }

  @Test
  public void test131() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test131"); }

    org.mafagafogigante.dungeon.commands.CommandHistory commandHistory0 = new org.mafagafogigante.dungeon.commands.CommandHistory();
    java.lang.String str2 = commandHistory0.getLastSimilarCommand("");
    java.lang.String str4 = commandHistory0.getLastSimilarCommand("Unarmed : UNARMED");
    org.mafagafogigante.dungeon.commands.CommandHistory.Cursor cursor5 = commandHistory0.getCursor();
    org.mafagafogigante.dungeon.commands.CommandHistory.Cursor cursor6 = commandHistory0.getCursor();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(cursor5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(cursor6);

  }

  @Test
  public void test132() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test132"); }

    org.mafagafogigante.dungeon.entity.creatures.Creature creature1 = null;
    org.mafagafogigante.dungeon.entity.creatures.CreatureHealth creatureHealth2 = org.mafagafogigante.dungeon.entity.creatures.CreatureHealth.makeCreatureHealth(100, creature1);
    boolean b3 = creatureHealth2.isAlive();
    boolean b4 = creatureHealth2.isDead();
    creatureHealth2.decrementBy((int)(short)-1);
    org.mafagafogigante.dungeon.entity.creatures.HealthState healthState7 = creatureHealth2.getHealthState();
    creatureHealth2.decrementBy(57);
    // The following exception was thrown during execution in test generation
    try {
    creatureHealth2.decrementBy(22041);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(creatureHealth2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    org.junit.Assert.assertTrue("'" + healthState7 + "' != '" + org.mafagafogigante.dungeon.entity.creatures.HealthState.UNINJURED + "'", healthState7.equals(org.mafagafogigante.dungeon.entity.creatures.HealthState.UNINJURED));

  }

  @Test
  public void test133() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test133"); }

    org.mafagafogigante.dungeon.entity.items.ItemPreset itemPreset0 = new org.mafagafogigante.dungeon.entity.items.ItemPreset();
    org.mafagafogigante.dungeon.entity.Integrity integrity1 = itemPreset0.getIntegrity();
    org.mafagafogigante.dungeon.entity.Integrity integrity2 = null;
    itemPreset0.setIntegrity(integrity2);
    org.mafagafogigante.dungeon.util.Percentage percentage4 = itemPreset0.getVisibility();
    java.lang.String str5 = itemPreset0.getType();
    itemPreset0.setIntegrityDecrementOnHit((int)(short)100);
    org.mafagafogigante.dungeon.util.Percentage percentage9 = new org.mafagafogigante.dungeon.util.Percentage((double)57);
    itemPreset0.setVisibility(percentage9);
    org.mafagafogigante.dungeon.game.Id id11 = null;
    itemPreset0.setId(id11);
    org.mafagafogigante.dungeon.util.Percentage percentage13 = itemPreset0.getVisibility();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(integrity1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(percentage4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(percentage13);

  }

  @Test
  public void test134() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test134"); }

    org.mafagafogigante.dungeon.util.Percentage percentage1 = new org.mafagafogigante.dungeon.util.Percentage((double)152);

  }

  @Test
  public void test135() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test135"); }

    org.mafagafogigante.dungeon.game.PartOfDay partOfDay0 = org.mafagafogigante.dungeon.game.PartOfDay.NIGHT;
    org.mafagafogigante.dungeon.entity.Luminosity luminosity1 = partOfDay0.getLuminosity();
    org.mafagafogigante.dungeon.game.Name name2 = partOfDay0.getName();
    org.mafagafogigante.dungeon.game.QuantificationMode quantificationMode4 = org.mafagafogigante.dungeon.game.QuantificationMode.NUMBER;
    java.lang.String str5 = name2.getQuantifiedName((int)'4', quantificationMode4);
    java.lang.String str6 = name2.getSingular();
    org.junit.Assert.assertTrue("'" + partOfDay0 + "' != '" + org.mafagafogigante.dungeon.game.PartOfDay.NIGHT + "'", partOfDay0.equals(org.mafagafogigante.dungeon.game.PartOfDay.NIGHT));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(luminosity1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(name2);
    org.junit.Assert.assertTrue("'" + quantificationMode4 + "' != '" + org.mafagafogigante.dungeon.game.QuantificationMode.NUMBER + "'", quantificationMode4.equals(org.mafagafogigante.dungeon.game.QuantificationMode.NUMBER));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "52 Nights"+ "'", str5.equals("52 Nights"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "Night"+ "'", str6.equals("Night"));

  }

  @Test
  public void test136() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test136"); }

    org.mafagafogigante.dungeon.entity.items.ItemPreset itemPreset0 = new org.mafagafogigante.dungeon.entity.items.ItemPreset();
    org.mafagafogigante.dungeon.entity.Integrity integrity1 = itemPreset0.getIntegrity();
    org.mafagafogigante.dungeon.entity.Integrity integrity2 = null;
    itemPreset0.setIntegrity(integrity2);
    org.mafagafogigante.dungeon.util.Percentage percentage4 = itemPreset0.getVisibility();
    java.lang.String str5 = itemPreset0.getType();
    itemPreset0.setIntegrityDecrementOnHit((int)(short)100);
    org.mafagafogigante.dungeon.util.Percentage percentage9 = new org.mafagafogigante.dungeon.util.Percentage((double)57);
    itemPreset0.setVisibility(percentage9);
    org.mafagafogigante.dungeon.game.Id id11 = null;
    itemPreset0.setId(id11);
    itemPreset0.setPutrefactionPeriod((long)(short)1);
    itemPreset0.setIntegrityDecrementOnHit((int)(byte)0);
    org.mafagafogigante.dungeon.entity.Integrity integrity19 = new org.mafagafogigante.dungeon.entity.Integrity(100, 0);
    org.mafagafogigante.dungeon.entity.Integrity integrity20 = new org.mafagafogigante.dungeon.entity.Integrity(integrity19);
    integrity19.decrementBy(0);
    itemPreset0.setIntegrity(integrity19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(integrity1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(percentage4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str5);

  }

  @Test
  public void test137() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test137"); }

    org.mafagafogigante.dungeon.game.PartOfDay partOfDay0 = org.mafagafogigante.dungeon.game.PartOfDay.NIGHT;
    org.mafagafogigante.dungeon.entity.Luminosity luminosity1 = partOfDay0.getLuminosity();
    org.mafagafogigante.dungeon.world.LuminosityVisibilityCriterion luminosityVisibilityCriterion2 = new org.mafagafogigante.dungeon.world.LuminosityVisibilityCriterion(luminosity1);
    org.mafagafogigante.dungeon.world.VisibilityCriterion[] visibilityCriterion_array3 = new org.mafagafogigante.dungeon.world.VisibilityCriterion[] { luminosityVisibilityCriterion2 };
    org.mafagafogigante.dungeon.world.VisibilityCriteria visibilityCriteria4 = new org.mafagafogigante.dungeon.world.VisibilityCriteria(visibilityCriterion_array3);
    org.mafagafogigante.dungeon.world.VisibilityCriterion[] visibilityCriterion_array5 = new org.mafagafogigante.dungeon.world.VisibilityCriterion[] {  };
    org.mafagafogigante.dungeon.world.VisibilityCriteria visibilityCriteria6 = new org.mafagafogigante.dungeon.world.VisibilityCriteria(visibilityCriterion_array5);
    org.mafagafogigante.dungeon.entity.creatures.Creature creature7 = null;
    org.mafagafogigante.dungeon.entity.creatures.Observer observer8 = new org.mafagafogigante.dungeon.entity.creatures.Observer(creature7);
    boolean b9 = visibilityCriteria6.isMetBy(observer8);
    org.mafagafogigante.dungeon.entity.items.Item[] item_array10 = new org.mafagafogigante.dungeon.entity.items.Item[] {  };
    java.util.ArrayList<org.mafagafogigante.dungeon.entity.items.Item> arraylist_item11 = new java.util.ArrayList<org.mafagafogigante.dungeon.entity.items.Item>();
    boolean b12 = java.util.Collections.addAll((java.util.Collection<org.mafagafogigante.dungeon.entity.items.Item>)arraylist_item11, item_array10);
    org.mafagafogigante.dungeon.game.DungeonString dungeonString14 = new org.mafagafogigante.dungeon.game.DungeonString("hi!");
    java.lang.String[] str_array19 = new java.lang.String[] { "hi!", "Damaged", "BattleStatistics{records=CounterMap{map={}}}", "" };
    dungeonString14.append(str_array19);
    observer8.writeItemSight((java.util.List<org.mafagafogigante.dungeon.entity.items.Item>)arraylist_item11, dungeonString14);
    org.mafagafogigante.dungeon.entity.items.Item[] item_array22 = new org.mafagafogigante.dungeon.entity.items.Item[] {  };
    java.util.ArrayList<org.mafagafogigante.dungeon.entity.items.Item> arraylist_item23 = new java.util.ArrayList<org.mafagafogigante.dungeon.entity.items.Item>();
    boolean b24 = java.util.Collections.addAll((java.util.Collection<org.mafagafogigante.dungeon.entity.items.Item>)arraylist_item23, item_array22);
    java.lang.String[] str_array30 = new java.lang.String[] { "CounterMap{map={}}", "User: Nicholas\nTime: 15:42:12\nDate: 2017-04-09\nJava: Java version 1.8.0_121 by Oracle Corporation\nHeap: Using 34.4 MiB out of the allocated 123.0 MiB\nOS: Windows 10 (amd64) 10.0", "hi!", "0 ms", "User: Nicholas\nTime: 15:42:12\nDate: 2017-04-09\nJava: Java version 1.8.0_121 by Oracle Corporation\nHeap: Using 41.5 MiB out of the allocated 154.5 MiB\nOS: Windows 10 (amd64) 10.0" };
    java.util.List<org.mafagafogigante.dungeon.entity.items.Item> list_item31 = org.mafagafogigante.dungeon.entity.creatures.HeroUtils.findItems((java.util.List<org.mafagafogigante.dungeon.entity.items.Item>)arraylist_item23, str_array30);
    org.mafagafogigante.dungeon.game.DungeonString dungeonString33 = new org.mafagafogigante.dungeon.game.DungeonString("hi!");
    observer8.writeItemSight(list_item31, dungeonString33);
    // The following exception was thrown during execution in test generation
    try {
    boolean b35 = visibilityCriteria4.isMetBy(observer8);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    org.junit.Assert.assertTrue("'" + partOfDay0 + "' != '" + org.mafagafogigante.dungeon.game.PartOfDay.NIGHT + "'", partOfDay0.equals(org.mafagafogigante.dungeon.game.PartOfDay.NIGHT));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(luminosity1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(visibilityCriterion_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(visibilityCriterion_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(item_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(item_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_item31);

  }

  @Test
  public void test138() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test138"); }

    org.mafagafogigante.dungeon.entity.Integrity integrity2 = new org.mafagafogigante.dungeon.entity.Integrity(1, 0);
    boolean b3 = integrity2.isMaximum();
    org.mafagafogigante.dungeon.entity.items.Item item4 = null;
    org.mafagafogigante.dungeon.entity.items.ItemIntegrity itemIntegrity5 = org.mafagafogigante.dungeon.entity.items.ItemIntegrity.makeItemIntegrity(integrity2, item4);
    int i6 = integrity2.getCurrent();
    org.mafagafogigante.dungeon.entity.items.Item item7 = null;
    org.mafagafogigante.dungeon.entity.items.ItemIntegrity itemIntegrity8 = org.mafagafogigante.dungeon.entity.items.ItemIntegrity.makeItemIntegrity(integrity2, item7);
    org.mafagafogigante.dungeon.util.Percentage percentage9 = itemIntegrity8.toPercentage();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(itemIntegrity5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(itemIntegrity8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(percentage9);

  }

  @Test
  public void test139() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test139"); }

    java.lang.String[] str_array5 = new java.lang.String[] { "hi!", "visibilityCriteria=VisibilityCriteria{[]}", "visibilityCriteria=VisibilityCriteria{[]}", "Damaged", "hi!" };
    org.mafagafogigante.dungeon.util.Table table6 = new org.mafagafogigante.dungeon.util.Table(str_array5);
    java.util.List<org.mafagafogigante.dungeon.game.ColoredString> list_coloredString7 = table6.toColoredStringList();
    org.mafagafogigante.dungeon.gui.WritingSpecifications writingSpecifications8 = null;
    org.mafagafogigante.dungeon.io.Writer.write((org.mafagafogigante.dungeon.game.Writable)table6, writingSpecifications8);
    table6.insertSeparator();
    org.mafagafogigante.dungeon.io.Writer.writeAndWait((org.mafagafogigante.dungeon.game.Writable)table6);
    table6.insertSeparator();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_coloredString7);

  }

  @Test
  public void test140() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test140"); }

    org.mafagafogigante.dungeon.game.BlockedEntrances blockedEntrances0 = new org.mafagafogigante.dungeon.game.BlockedEntrances();
    java.lang.String str1 = blockedEntrances0.toString();
    org.mafagafogigante.dungeon.game.BlockedEntrances blockedEntrances2 = new org.mafagafogigante.dungeon.game.BlockedEntrances(blockedEntrances0);
    org.mafagafogigante.dungeon.game.Direction direction3 = org.mafagafogigante.dungeon.game.Direction.DOWN;
    boolean b4 = blockedEntrances0.isBlocked(direction3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "None"+ "'", str1.equals("None"));
    org.junit.Assert.assertTrue("'" + direction3 + "' != '" + org.mafagafogigante.dungeon.game.Direction.DOWN + "'", direction3.equals(org.mafagafogigante.dungeon.game.Direction.DOWN));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);

  }

  @Test
  public void test141() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test141"); }

    org.mafagafogigante.dungeon.entity.items.ItemPreset itemPreset0 = new org.mafagafogigante.dungeon.entity.items.ItemPreset();
    itemPreset0.setDrinkableHealing((int)(short)0);
    org.mafagafogigante.dungeon.util.Percentage percentage4 = new org.mafagafogigante.dungeon.util.Percentage((double)57);
    itemPreset0.setVisibility(percentage4);
    int i6 = itemPreset0.getDrinkableDoses();
    itemPreset0.setIntegrityDecrementOnEat((int)' ');
    itemPreset0.setType("");
    org.mafagafogigante.dungeon.entity.Integrity integrity13 = new org.mafagafogigante.dungeon.entity.Integrity((int)(byte)1, (int)(byte)0);
    boolean b14 = integrity13.isZero();
    integrity13.incrementBy(81);
    boolean b17 = integrity13.isZero();
    itemPreset0.setIntegrity(integrity13);
    boolean b19 = integrity13.isZero();
    boolean b20 = integrity13.isZero();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);

  }

  @Test
  public void test142() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test142"); }

    org.mafagafogigante.dungeon.entity.creatures.Creature creature1 = null;
    org.mafagafogigante.dungeon.entity.creatures.CreatureHealth creatureHealth2 = org.mafagafogigante.dungeon.entity.creatures.CreatureHealth.makeCreatureHealth(100, creature1);
    boolean b3 = creatureHealth2.isAlive();
    boolean b4 = creatureHealth2.isDead();
    creatureHealth2.decrementBy((int)(short)-1);
    org.mafagafogigante.dungeon.entity.creatures.HealthState healthState7 = creatureHealth2.getHealthState();
    creatureHealth2.decrementBy(57);
    java.lang.String str10 = creatureHealth2.toString();
    java.lang.String str11 = creatureHealth2.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(creatureHealth2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    org.junit.Assert.assertTrue("'" + healthState7 + "' != '" + org.mafagafogigante.dungeon.entity.creatures.HealthState.UNINJURED + "'", healthState7.equals(org.mafagafogigante.dungeon.entity.creatures.HealthState.UNINJURED));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "CreatureHealth{integrity=43/100}"+ "'", str10.equals("CreatureHealth{integrity=43/100}"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "CreatureHealth{integrity=43/100}"+ "'", str11.equals("CreatureHealth{integrity=43/100}"));

  }

  @Test
  public void test143() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test143"); }

    org.mafagafogigante.dungeon.entity.Weight weight1 = org.mafagafogigante.dungeon.entity.Weight.newInstance((double)'#');
    org.mafagafogigante.dungeon.entity.Weight weight3 = org.mafagafogigante.dungeon.entity.Weight.newInstance((double)'#');
    org.mafagafogigante.dungeon.entity.Weight weight4 = weight1.add(weight3);
    org.mafagafogigante.dungeon.entity.creatures.CreaturePreset creaturePreset5 = new org.mafagafogigante.dungeon.entity.creatures.CreaturePreset();
    org.mafagafogigante.dungeon.game.Id id6 = null;
    creaturePreset5.setWeaponId(id6);
    creaturePreset5.setAttack(57);
    org.mafagafogigante.dungeon.entity.Luminosity luminosity10 = creaturePreset5.getLuminosity();
    int i11 = creaturePreset5.getInventoryItemLimit();
    org.mafagafogigante.dungeon.game.PartOfDay partOfDay12 = org.mafagafogigante.dungeon.game.PartOfDay.NIGHT;
    org.mafagafogigante.dungeon.entity.Luminosity luminosity13 = partOfDay12.getLuminosity();
    org.mafagafogigante.dungeon.game.Name name14 = partOfDay12.getName();
    java.lang.String str16 = name14.getQuantifiedName((int)'a');
    java.lang.String str17 = name14.getSingular();
    java.lang.String str18 = name14.getPlural();
    org.mafagafogigante.dungeon.entity.items.ItemPreset itemPreset19 = new org.mafagafogigante.dungeon.entity.items.ItemPreset();
    org.mafagafogigante.dungeon.entity.Integrity integrity20 = itemPreset19.getIntegrity();
    org.mafagafogigante.dungeon.entity.Integrity integrity21 = null;
    itemPreset19.setIntegrity(integrity21);
    org.mafagafogigante.dungeon.entity.Integrity integrity23 = itemPreset19.getIntegrity();
    org.mafagafogigante.dungeon.util.Percentage percentage24 = itemPreset19.getHitRate();
    boolean b25 = name14.equals((java.lang.Object)percentage24);
    creaturePreset5.setName(name14);
    org.mafagafogigante.dungeon.util.Percentage percentage28 = new org.mafagafogigante.dungeon.util.Percentage((double)'#');
    boolean b30 = percentage28.equals((java.lang.Object)10.0d);
    org.mafagafogigante.dungeon.entity.Luminosity luminosity31 = new org.mafagafogigante.dungeon.entity.Luminosity(percentage28);
    creaturePreset5.setVisibility(percentage28);
    org.mafagafogigante.dungeon.entity.Weight weight33 = weight4.multiply(percentage28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(weight1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(weight3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(weight4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(luminosity10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 0);
    org.junit.Assert.assertTrue("'" + partOfDay12 + "' != '" + org.mafagafogigante.dungeon.game.PartOfDay.NIGHT + "'", partOfDay12.equals(org.mafagafogigante.dungeon.game.PartOfDay.NIGHT));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(luminosity13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(name14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "a few Nights"+ "'", str16.equals("a few Nights"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "Night"+ "'", str17.equals("Night"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "Nights"+ "'", str18.equals("Nights"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(integrity20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(integrity23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(percentage24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(weight33);

  }

  @Test
  public void test144() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test144"); }

    // The following exception was thrown during execution in test generation
    try {
    org.mafagafogigante.dungeon.entity.items.IntegrityState integrityState2 = org.mafagafogigante.dungeon.entity.items.IntegrityState.getIntegrityState(82800, 34);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  @Test
  public void test145() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test145"); }

    org.mafagafogigante.dungeon.entity.items.ItemPreset itemPreset0 = new org.mafagafogigante.dungeon.entity.items.ItemPreset();
    org.mafagafogigante.dungeon.entity.Integrity integrity1 = itemPreset0.getIntegrity();
    org.mafagafogigante.dungeon.entity.Integrity integrity2 = null;
    itemPreset0.setIntegrity(integrity2);
    org.mafagafogigante.dungeon.util.Percentage percentage4 = itemPreset0.getVisibility();
    java.lang.String str5 = itemPreset0.getType();
    itemPreset0.setIntegrityDecrementOnHit((int)(short)100);
    org.mafagafogigante.dungeon.entity.TagSet<org.mafagafogigante.dungeon.entity.items.Item.Tag> tagset_tag8 = itemPreset0.getTagSet();
    org.mafagafogigante.dungeon.entity.Weight weight10 = org.mafagafogigante.dungeon.entity.Weight.newInstance((double)(byte)-1);
    itemPreset0.setWeight(weight10);
    java.lang.String str12 = weight10.toString();
    org.mafagafogigante.dungeon.entity.Integrity integrity15 = new org.mafagafogigante.dungeon.entity.Integrity(1, 0);
    boolean b16 = integrity15.isMaximum();
    org.mafagafogigante.dungeon.entity.items.Item item17 = null;
    org.mafagafogigante.dungeon.entity.items.ItemIntegrity itemIntegrity18 = org.mafagafogigante.dungeon.entity.items.ItemIntegrity.makeItemIntegrity(integrity15, item17);
    int i19 = integrity15.getCurrent();
    org.mafagafogigante.dungeon.entity.Integrity integrity20 = new org.mafagafogigante.dungeon.entity.Integrity(integrity15);
    boolean b21 = weight10.equals((java.lang.Object)integrity20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(integrity1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(percentage4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(tagset_tag8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(weight10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "0 kg"+ "'", str12.equals("0 kg"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(itemIntegrity18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);

  }

  @Test
  public void test146() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test146"); }

    org.mafagafogigante.dungeon.commands.CommandDescription commandDescription2 = new org.mafagafogigante.dungeon.commands.CommandDescription("00:00:00", "the sky is cloudy");
    java.lang.String str3 = commandDescription2.getName();
    java.lang.String str4 = commandDescription2.toString();
    java.lang.String str5 = commandDescription2.getInfo();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "00:00:00"+ "'", str3.equals("00:00:00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "00:00:00 : the sky is cloudy"+ "'", str4.equals("00:00:00 : the sky is cloudy"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "the sky is cloudy"+ "'", str5.equals("the sky is cloudy"));

  }

  @Test
  public void test147() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test147"); }

    // The following exception was thrown during execution in test generation
    try {
    org.mafagafogigante.dungeon.util.Percentage percentage1 = org.mafagafogigante.dungeon.util.Percentage.fromString("773.2 GiB");
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  @Test
  public void test148() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test148"); }

    org.mafagafogigante.dungeon.stats.WorldStatistics worldStatistics0 = new org.mafagafogigante.dungeon.stats.WorldStatistics();
    org.mafagafogigante.dungeon.util.CounterMap<java.lang.String> countermap_str1 = worldStatistics0.getLocationCounter();
    int i2 = worldStatistics0.getLocationCount();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(countermap_str1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 0);

  }

  @Test
  public void test149() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test149"); }

    int i1 = org.mafagafogigante.dungeon.util.DungeonMath.safeCastLongToInteger((long)85);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 85);

  }

  @Test
  public void test150() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test150"); }

    org.mafagafogigante.dungeon.logging.DungeonLogger.warning("100");

  }

  @Test
  public void test151() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test151"); }

    org.mafagafogigante.dungeon.util.Percentage percentage0 = null;
    org.mafagafogigante.dungeon.entity.Luminosity luminosity1 = new org.mafagafogigante.dungeon.entity.Luminosity(percentage0);
    org.mafagafogigante.dungeon.entity.LightSource lightSource2 = new org.mafagafogigante.dungeon.entity.LightSource(luminosity1);
    java.lang.String str3 = lightSource2.toString();
    lightSource2.disable();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "Enabled LightSource of luminosity of null"+ "'", str3.equals("Enabled LightSource of luminosity of null"));

  }

  @Test
  public void test152() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test152"); }

    org.mafagafogigante.dungeon.game.DungeonString dungeonString1 = new org.mafagafogigante.dungeon.game.DungeonString("hi!");
    java.lang.String[] str_array6 = new java.lang.String[] { "hi!", "Damaged", "BattleStatistics{records=CounterMap{map={}}}", "" };
    dungeonString1.append(str_array6);
    org.mafagafogigante.dungeon.gui.WritingSpecifications writingSpecifications8 = null;
    org.mafagafogigante.dungeon.io.Writer.write((org.mafagafogigante.dungeon.game.Writable)dungeonString1, writingSpecifications8);
    java.lang.String[] str_array14 = new java.lang.String[] { "User: Nicholas\nTime: 15:42:12\nDate: 2017-04-09\nJava: Java version 1.8.0_121 by Oracle Corporation\nHeap: Using 34.4 MiB out of the allocated 123.0 MiB\nOS: Windows 10 (amd64) 10.0", "97 B", "DungeonString{coloredStringList=[ColoredString{string='hi!hi!DamagedBattleStatistics{records=CounterMap{map={}}}', color=java.awt.Color[r=192,g=192,b=192]}], currentColor=java.awt.Color[r=192,g=192,b=192]}", "Unarmed : UNARMED" };
    dungeonString1.append(str_array14);
    org.mafagafogigante.dungeon.gui.WritingSpecifications writingSpecifications18 = new org.mafagafogigante.dungeon.gui.WritingSpecifications(false, 32);
    boolean b19 = writingSpecifications18.shouldWait();
    java.lang.String str20 = writingSpecifications18.toString();
    org.mafagafogigante.dungeon.io.Writer.write((org.mafagafogigante.dungeon.game.Writable)dungeonString1, writingSpecifications18);
    java.lang.String str22 = writingSpecifications18.toString();
    boolean b23 = writingSpecifications18.shouldWait();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + "WritingSpecifications{scrollDown=false}"+ "'", str20.equals("WritingSpecifications{scrollDown=false}"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "WritingSpecifications{scrollDown=false}"+ "'", str22.equals("WritingSpecifications{scrollDown=false}"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);

  }

  @Test
  public void test153() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test153"); }

    org.mafagafogigante.dungeon.commands.CommandHistory commandHistory0 = new org.mafagafogigante.dungeon.commands.CommandHistory();
    java.lang.String str2 = commandHistory0.getLastSimilarCommand("");
    java.lang.String str4 = commandHistory0.getLastSimilarCommand("Unarmed : UNARMED");
    java.lang.String str6 = commandHistory0.getLastSimilarCommand("Broken");
    java.lang.String str8 = commandHistory0.getLastSimilarCommand("day 10 of month 10 of the year 100");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str8);

  }

  @Test
  public void test154() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test154"); }

    org.mafagafogigante.dungeon.game.Id id0 = null;
    org.mafagafogigante.dungeon.achievements.BattleStatisticsQuery battleStatisticsQuery2 = new org.mafagafogigante.dungeon.achievements.BattleStatisticsQuery();
    org.mafagafogigante.dungeon.stats.CauseOfDeath causeOfDeath3 = org.mafagafogigante.dungeon.stats.CauseOfDeath.getUnarmedCauseOfDeath();
    battleStatisticsQuery2.setCauseOfDeath(causeOfDeath3);
    org.mafagafogigante.dungeon.game.PartOfDay partOfDay5 = org.mafagafogigante.dungeon.game.PartOfDay.NIGHT;
    org.mafagafogigante.dungeon.stats.BattleRecord battleRecord6 = new org.mafagafogigante.dungeon.stats.BattleRecord(id0, "", causeOfDeath3, partOfDay5);
    org.mafagafogigante.dungeon.stats.CauseOfDeath causeOfDeath7 = battleRecord6.getCauseOfDeath();
    org.mafagafogigante.dungeon.game.PartOfDay partOfDay8 = battleRecord6.getPartOfDay();
    java.lang.String str9 = battleRecord6.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(causeOfDeath3);
    org.junit.Assert.assertTrue("'" + partOfDay5 + "' != '" + org.mafagafogigante.dungeon.game.PartOfDay.NIGHT + "'", partOfDay5.equals(org.mafagafogigante.dungeon.game.PartOfDay.NIGHT));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(causeOfDeath7);
    org.junit.Assert.assertTrue("'" + partOfDay8 + "' != '" + org.mafagafogigante.dungeon.game.PartOfDay.NIGHT + "'", partOfDay8.equals(org.mafagafogigante.dungeon.game.PartOfDay.NIGHT));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "BattleEntry{id=null, type='', causeOfDeath=Unarmed : UNARMED, partOfDay=Night}"+ "'", str9.equals("BattleEntry{id=null, type='', causeOfDeath=Unarmed : UNARMED, partOfDay=Night}"));

  }

//  @Test
//  public void test155() throws Throwable {
//
//    if (debug) { System.out.format("%n%s%n","RegressionTest2.test155"); }
//
//    org.mafagafogigante.dungeon.util.CounterMap<java.util.RandomAccess> countermap_randomAccess0 = new org.mafagafogigante.dungeon.util.CounterMap<java.util.RandomAccess>();
//    org.mafagafogigante.dungeon.entity.creatures.CreaturePreset creaturePreset1 = new org.mafagafogigante.dungeon.entity.creatures.CreaturePreset();
//    org.mafagafogigante.dungeon.game.Id id2 = null;
//    creaturePreset1.setWeaponId(id2);
//    creaturePreset1.setAttack(57);
//    org.mafagafogigante.dungeon.entity.Luminosity luminosity6 = creaturePreset1.getLuminosity();
//    org.mafagafogigante.dungeon.entity.creatures.CreaturePreset creaturePreset7 = new org.mafagafogigante.dungeon.entity.creatures.CreaturePreset();
//    org.mafagafogigante.dungeon.game.Id id8 = null;
//    creaturePreset7.setWeaponId(id8);
//    creaturePreset7.setAttack(57);
//    org.mafagafogigante.dungeon.game.Id[] id_array12 = new org.mafagafogigante.dungeon.game.Id[] {  };
//    java.util.ArrayList<org.mafagafogigante.dungeon.game.Id> arraylist_id13 = new java.util.ArrayList<org.mafagafogigante.dungeon.game.Id>();
//    boolean b14 = java.util.Collections.addAll((java.util.Collection<org.mafagafogigante.dungeon.game.Id>)arraylist_id13, id_array12);
//    creaturePreset7.setItems((java.util.List<org.mafagafogigante.dungeon.game.Id>)arraylist_id13);
//    creaturePreset1.setItems((java.util.List<org.mafagafogigante.dungeon.game.Id>)arraylist_id13);
//    countermap_randomAccess0.incrementCounter((java.util.RandomAccess)arraylist_id13, (java.lang.Integer)10);
//    boolean b19 = countermap_randomAccess0.isNotEmpty();
//    org.mafagafogigante.dungeon.entity.creatures.CreaturePreset creaturePreset20 = new org.mafagafogigante.dungeon.entity.creatures.CreaturePreset();
//    org.mafagafogigante.dungeon.game.Id id21 = null;
//    creaturePreset20.setWeaponId(id21);
//    creaturePreset20.setAttack(57);
//    org.mafagafogigante.dungeon.entity.Luminosity luminosity25 = creaturePreset20.getLuminosity();
//    int i26 = creaturePreset20.getInventoryItemLimit();
//    org.mafagafogigante.dungeon.entity.creatures.CreaturePreset creaturePreset27 = new org.mafagafogigante.dungeon.entity.creatures.CreaturePreset();
//    org.mafagafogigante.dungeon.game.Id id28 = null;
//    creaturePreset27.setWeaponId(id28);
//    creaturePreset27.setAttack(57);
//    org.mafagafogigante.dungeon.entity.Luminosity luminosity32 = creaturePreset27.getLuminosity();
//    creaturePreset27.setInventoryItemLimit(57);
//    org.mafagafogigante.dungeon.entity.creatures.Drop[] drop_array35 = new org.mafagafogigante.dungeon.entity.creatures.Drop[] {  };
//    java.util.ArrayList<org.mafagafogigante.dungeon.entity.creatures.Drop> arraylist_drop36 = new java.util.ArrayList<org.mafagafogigante.dungeon.entity.creatures.Drop>();
//    boolean b37 = java.util.Collections.addAll((java.util.Collection<org.mafagafogigante.dungeon.entity.creatures.Drop>)arraylist_drop36, drop_array35);
//    creaturePreset27.setDropList((java.util.List<org.mafagafogigante.dungeon.entity.creatures.Drop>)arraylist_drop36);
//    creaturePreset20.setDropList((java.util.List<org.mafagafogigante.dungeon.entity.creatures.Drop>)arraylist_drop36);
//    countermap_randomAccess0.incrementCounter((java.util.RandomAccess)arraylist_drop36, (java.lang.Integer)43200);
//    
//    // Regression assertion (captures the current behavior of the code)
//    org.junit.Assert.assertNotNull(luminosity6);
//    
//    // Regression assertion (captures the current behavior of the code)
//    org.junit.Assert.assertNotNull(id_array12);
//    
//    // Regression assertion (captures the current behavior of the code)
//    org.junit.Assert.assertTrue(b14 == false);
//    
//    // Regression assertion (captures the current behavior of the code)
//    org.junit.Assert.assertTrue(b19 == true);
//    
//    // Regression assertion (captures the current behavior of the code)
//    org.junit.Assert.assertNotNull(luminosity25);
//    
//    // Regression assertion (captures the current behavior of the code)
//    org.junit.Assert.assertTrue(i26 == 0);
//    
//    // Regression assertion (captures the current behavior of the code)
//    org.junit.Assert.assertNotNull(luminosity32);
//    
//    // Regression assertion (captures the current behavior of the code)
//    org.junit.Assert.assertNotNull(drop_array35);
//    
//    // Regression assertion (captures the current behavior of the code)
//    org.junit.Assert.assertTrue(b37 == false);
//
//  }

  @Test
  public void test156() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test156"); }

    org.mafagafogigante.dungeon.game.DungeonString dungeonString2 = new org.mafagafogigante.dungeon.game.DungeonString("hi!");
    java.lang.String[] str_array7 = new java.lang.String[] { "hi!", "Damaged", "BattleStatistics{records=CounterMap{map={}}}", "" };
    dungeonString2.append(str_array7);
    java.lang.String[] str_array14 = new java.lang.String[] { "hi!", "visibilityCriteria=VisibilityCriteria{[]}", "visibilityCriteria=VisibilityCriteria{[]}", "Damaged", "hi!" };
    org.mafagafogigante.dungeon.util.Table table15 = new org.mafagafogigante.dungeon.util.Table(str_array14);
    dungeonString2.append(str_array14);
    org.mafagafogigante.dungeon.world.VisibilityCriterion[] visibilityCriterion_array17 = new org.mafagafogigante.dungeon.world.VisibilityCriterion[] {  };
    org.mafagafogigante.dungeon.world.VisibilityCriteria visibilityCriteria18 = new org.mafagafogigante.dungeon.world.VisibilityCriteria(visibilityCriterion_array17);
    org.mafagafogigante.dungeon.entity.creatures.Creature creature19 = null;
    org.mafagafogigante.dungeon.entity.creatures.Observer observer20 = new org.mafagafogigante.dungeon.entity.creatures.Observer(creature19);
    boolean b21 = visibilityCriteria18.isMetBy(observer20);
    org.mafagafogigante.dungeon.entity.items.Item[] item_array22 = new org.mafagafogigante.dungeon.entity.items.Item[] {  };
    java.util.ArrayList<org.mafagafogigante.dungeon.entity.items.Item> arraylist_item23 = new java.util.ArrayList<org.mafagafogigante.dungeon.entity.items.Item>();
    boolean b24 = java.util.Collections.addAll((java.util.Collection<org.mafagafogigante.dungeon.entity.items.Item>)arraylist_item23, item_array22);
    org.mafagafogigante.dungeon.game.DungeonString dungeonString26 = new org.mafagafogigante.dungeon.game.DungeonString("hi!");
    observer20.writeItemSight((java.util.List<org.mafagafogigante.dungeon.entity.items.Item>)arraylist_item23, dungeonString26);
    org.mafagafogigante.dungeon.world.VisibilityCriterion[] visibilityCriterion_array28 = new org.mafagafogigante.dungeon.world.VisibilityCriterion[] {  };
    org.mafagafogigante.dungeon.world.VisibilityCriteria visibilityCriteria29 = new org.mafagafogigante.dungeon.world.VisibilityCriteria(visibilityCriterion_array28);
    org.mafagafogigante.dungeon.entity.creatures.Creature creature30 = null;
    org.mafagafogigante.dungeon.entity.creatures.Observer observer31 = new org.mafagafogigante.dungeon.entity.creatures.Observer(creature30);
    boolean b32 = visibilityCriteria29.isMetBy(observer31);
    org.mafagafogigante.dungeon.entity.items.Item[] item_array33 = new org.mafagafogigante.dungeon.entity.items.Item[] {  };
    java.util.ArrayList<org.mafagafogigante.dungeon.entity.items.Item> arraylist_item34 = new java.util.ArrayList<org.mafagafogigante.dungeon.entity.items.Item>();
    boolean b35 = java.util.Collections.addAll((java.util.Collection<org.mafagafogigante.dungeon.entity.items.Item>)arraylist_item34, item_array33);
    org.mafagafogigante.dungeon.game.DungeonString dungeonString37 = new org.mafagafogigante.dungeon.game.DungeonString("hi!");
    observer31.writeItemSight((java.util.List<org.mafagafogigante.dungeon.entity.items.Item>)arraylist_item34, dungeonString37);
    org.mafagafogigante.dungeon.game.DungeonString dungeonString40 = new org.mafagafogigante.dungeon.game.DungeonString("");
    java.util.List<org.mafagafogigante.dungeon.game.ColoredString> list_coloredString41 = dungeonString40.toColoredStringList();
    observer20.writeItemSight((java.util.List<org.mafagafogigante.dungeon.entity.items.Item>)arraylist_item34, dungeonString40);
    org.mafagafogigante.dungeon.gui.WritingSpecifications writingSpecifications45 = new org.mafagafogigante.dungeon.gui.WritingSpecifications(false, 32);
    boolean b46 = writingSpecifications45.shouldWait();
    int i47 = writingSpecifications45.getWait();
    org.mafagafogigante.dungeon.io.Writer.write((org.mafagafogigante.dungeon.game.Writable)dungeonString40, writingSpecifications45);
    org.mafagafogigante.dungeon.date.Date date54 = new org.mafagafogigante.dungeon.date.Date(10L, 100L, 100L);
    org.mafagafogigante.dungeon.date.Date date58 = new org.mafagafogigante.dungeon.date.Date(10L, 100L, 100L);
    int i59 = date54.compareTo(date58);
    org.mafagafogigante.dungeon.game.PartOfDay partOfDay60 = org.mafagafogigante.dungeon.game.PartOfDay.getCorrespondingConstant(date54);
    java.lang.String[] str_array66 = new java.lang.String[] { "hi!", "visibilityCriteria=VisibilityCriteria{[]}", "visibilityCriteria=VisibilityCriteria{[]}", "Damaged", "hi!" };
    org.mafagafogigante.dungeon.util.Table table67 = new org.mafagafogigante.dungeon.util.Table(str_array66);
    java.util.List<org.mafagafogigante.dungeon.game.ColoredString> list_coloredString68 = table67.toColoredStringList();
    org.mafagafogigante.dungeon.game.ColoredString coloredString69 = org.mafagafogigante.dungeon.game.Random.select(list_coloredString68);
    boolean b70 = date54.equals((java.lang.Object)coloredString69);
    java.awt.Color color71 = coloredString69.getColor();
    org.mafagafogigante.dungeon.game.ColoredString coloredString72 = new org.mafagafogigante.dungeon.game.ColoredString("User: Nicholas\nTime: 15:42:12\nDate: 2017-04-09\nJava: Java version 1.8.0_121 by Oracle Corporation\nHeap: Using 41.5 MiB out of the allocated 154.5 MiB\nOS: Windows 10 (amd64) 10.0", color71);
    org.mafagafogigante.dungeon.game.ColoredString coloredString73 = new org.mafagafogigante.dungeon.game.ColoredString("Unarmed : UNARMED", color71);
    dungeonString40.setColor(color71);
    dungeonString2.setColor(color71);
    org.mafagafogigante.dungeon.game.LocationDescription locationDescription76 = new org.mafagafogigante.dungeon.game.LocationDescription('4', color71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(visibilityCriterion_array17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(item_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(visibilityCriterion_array28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(item_array33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_coloredString41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i47 == 32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i59 == 0);
    org.junit.Assert.assertTrue("'" + partOfDay60 + "' != '" + org.mafagafogigante.dungeon.game.PartOfDay.MIDNIGHT + "'", partOfDay60.equals(org.mafagafogigante.dungeon.game.PartOfDay.MIDNIGHT));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_coloredString68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(coloredString69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color71);

  }

  @Test
  public void test157() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test157"); }

    org.mafagafogigante.dungeon.util.CounterMap<java.lang.String> countermap_str0 = new org.mafagafogigante.dungeon.util.CounterMap<java.lang.String>();

  }

  @Test
  public void test158() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test158"); }

    org.mafagafogigante.dungeon.stats.BattleStatistics battleStatistics0 = new org.mafagafogigante.dungeon.stats.BattleStatistics();
    org.mafagafogigante.dungeon.achievements.BattleStatisticsRequirement battleStatisticsRequirement1 = null;
    boolean b2 = battleStatistics0.satisfies(battleStatisticsRequirement1);
    org.mafagafogigante.dungeon.achievements.BattleStatisticsQuery battleStatisticsQuery3 = new org.mafagafogigante.dungeon.achievements.BattleStatisticsQuery();
    org.mafagafogigante.dungeon.achievements.BattleStatisticsRequirement battleStatisticsRequirement5 = new org.mafagafogigante.dungeon.achievements.BattleStatisticsRequirement(battleStatisticsQuery3, (int)(byte)100);
    boolean b6 = battleStatistics0.satisfies(battleStatisticsRequirement5);
    org.mafagafogigante.dungeon.achievements.BattleStatisticsQuery battleStatisticsQuery7 = battleStatisticsRequirement5.getQuery();
    org.mafagafogigante.dungeon.achievements.BattleStatisticsRequirement battleStatisticsRequirement9 = new org.mafagafogigante.dungeon.achievements.BattleStatisticsRequirement(battleStatisticsQuery7, 90);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(battleStatisticsQuery7);

  }

  @Test
  public void test159() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test159"); }

    org.mafagafogigante.dungeon.stats.Statistics statistics0 = new org.mafagafogigante.dungeon.stats.Statistics();
    statistics0.writeStatistics();
    org.mafagafogigante.dungeon.stats.WorldStatistics worldStatistics2 = statistics0.getWorldStatistics();
    statistics0.writeStatistics();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(worldStatistics2);

  }

  @Test
  public void test160() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test160"); }

    org.mafagafogigante.dungeon.util.SystemInformation systemInformation0 = new org.mafagafogigante.dungeon.util.SystemInformation();
    java.util.List<org.mafagafogigante.dungeon.game.ColoredString> list_coloredString1 = systemInformation0.toColoredStringList();
    org.mafagafogigante.dungeon.gui.WritingSpecifications writingSpecifications2 = null;
    org.mafagafogigante.dungeon.io.Writer.write((org.mafagafogigante.dungeon.game.Writable)systemInformation0, writingSpecifications2);
    java.lang.String str4 = systemInformation0.toString();
    java.lang.String str5 = systemInformation0.toString();
    java.lang.String str6 = systemInformation0.toString();
    java.util.List<org.mafagafogigante.dungeon.game.ColoredString> list_coloredString7 = systemInformation0.toColoredStringList();
    java.util.List<org.mafagafogigante.dungeon.game.ColoredString> list_coloredString8 = systemInformation0.toColoredStringList();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_coloredString1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "User: Nicholas\nTime: 15:44:56\nDate: 2017-04-09\nJava: Java version 1.8.0_121 by Oracle Corporation\nHeap: Using 48.3 MiB out of the allocated 109.5 MiB\nOS: Windows 10 (amd64) 10.0"+ "'", str4.equals("User: Nicholas\nTime: 15:44:56\nDate: 2017-04-09\nJava: Java version 1.8.0_121 by Oracle Corporation\nHeap: Using 48.3 MiB out of the allocated 109.5 MiB\nOS: Windows 10 (amd64) 10.0"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "User: Nicholas\nTime: 15:44:56\nDate: 2017-04-09\nJava: Java version 1.8.0_121 by Oracle Corporation\nHeap: Using 48.3 MiB out of the allocated 109.5 MiB\nOS: Windows 10 (amd64) 10.0"+ "'", str5.equals("User: Nicholas\nTime: 15:44:56\nDate: 2017-04-09\nJava: Java version 1.8.0_121 by Oracle Corporation\nHeap: Using 48.3 MiB out of the allocated 109.5 MiB\nOS: Windows 10 (amd64) 10.0"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "User: Nicholas\nTime: 15:44:56\nDate: 2017-04-09\nJava: Java version 1.8.0_121 by Oracle Corporation\nHeap: Using 48.3 MiB out of the allocated 109.5 MiB\nOS: Windows 10 (amd64) 10.0"+ "'", str6.equals("User: Nicholas\nTime: 15:44:56\nDate: 2017-04-09\nJava: Java version 1.8.0_121 by Oracle Corporation\nHeap: Using 48.3 MiB out of the allocated 109.5 MiB\nOS: Windows 10 (amd64) 10.0"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_coloredString7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_coloredString8);

  }

  @Test
  public void test161() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test161"); }

    org.mafagafogigante.dungeon.entity.Integrity integrity2 = new org.mafagafogigante.dungeon.entity.Integrity(1, 0);
    boolean b3 = integrity2.isMaximum();
    org.mafagafogigante.dungeon.entity.items.Item item4 = null;
    org.mafagafogigante.dungeon.entity.items.ItemIntegrity itemIntegrity5 = org.mafagafogigante.dungeon.entity.items.ItemIntegrity.makeItemIntegrity(integrity2, item4);
    org.mafagafogigante.dungeon.util.Percentage percentage6 = itemIntegrity5.toPercentage();
    boolean b7 = itemIntegrity5.isBroken();
    int i8 = itemIntegrity5.getCurrent();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(itemIntegrity5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(percentage6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 0);

  }

  @Test
  public void test162() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test162"); }

    org.mafagafogigante.dungeon.entity.Weight weight1 = org.mafagafogigante.dungeon.entity.Weight.newInstance((double)'#');
    org.mafagafogigante.dungeon.entity.Weight weight3 = org.mafagafogigante.dungeon.entity.Weight.newInstance((double)'#');
    org.mafagafogigante.dungeon.entity.Weight weight4 = weight1.add(weight3);
    org.mafagafogigante.dungeon.entity.items.ItemPreset itemPreset5 = new org.mafagafogigante.dungeon.entity.items.ItemPreset();
    org.mafagafogigante.dungeon.entity.Integrity integrity6 = itemPreset5.getIntegrity();
    org.mafagafogigante.dungeon.entity.Integrity integrity7 = null;
    itemPreset5.setIntegrity(integrity7);
    org.mafagafogigante.dungeon.util.Percentage percentage9 = itemPreset5.getVisibility();
    java.lang.String str10 = itemPreset5.getType();
    itemPreset5.setIntegrityDecrementOnHit((int)(short)100);
    org.mafagafogigante.dungeon.util.Percentage percentage14 = new org.mafagafogigante.dungeon.util.Percentage((double)57);
    itemPreset5.setVisibility(percentage14);
    org.mafagafogigante.dungeon.util.Percentage percentage17 = new org.mafagafogigante.dungeon.util.Percentage((double)57);
    int i18 = percentage14.compareTo(percentage17);
    org.mafagafogigante.dungeon.entity.Weight weight19 = weight4.multiply(percentage14);
    org.mafagafogigante.dungeon.entity.items.ItemPreset itemPreset20 = new org.mafagafogigante.dungeon.entity.items.ItemPreset();
    org.mafagafogigante.dungeon.entity.Integrity integrity21 = itemPreset20.getIntegrity();
    org.mafagafogigante.dungeon.entity.Integrity integrity22 = null;
    itemPreset20.setIntegrity(integrity22);
    org.mafagafogigante.dungeon.util.Percentage percentage24 = itemPreset20.getVisibility();
    org.mafagafogigante.dungeon.entity.Integrity integrity25 = itemPreset20.getIntegrity();
    java.lang.String str26 = itemPreset20.getText();
    org.mafagafogigante.dungeon.game.Name name27 = null;
    itemPreset20.setName(name27);
    org.mafagafogigante.dungeon.entity.items.ItemPreset itemPreset29 = new org.mafagafogigante.dungeon.entity.items.ItemPreset();
    org.mafagafogigante.dungeon.entity.Integrity integrity30 = itemPreset29.getIntegrity();
    org.mafagafogigante.dungeon.entity.Integrity integrity31 = null;
    itemPreset29.setIntegrity(integrity31);
    org.mafagafogigante.dungeon.util.Percentage percentage33 = itemPreset29.getVisibility();
    java.lang.String str34 = itemPreset29.getType();
    itemPreset29.setIntegrityDecrementOnHit((int)(short)100);
    org.mafagafogigante.dungeon.util.Percentage percentage38 = new org.mafagafogigante.dungeon.util.Percentage((double)57);
    itemPreset29.setVisibility(percentage38);
    boolean b40 = org.mafagafogigante.dungeon.game.Random.roll(percentage38);
    itemPreset20.setVisibility(percentage38);
    boolean b42 = percentage14.biggerThanOrEqualTo(percentage38);
    org.mafagafogigante.dungeon.entity.items.ItemPreset itemPreset43 = new org.mafagafogigante.dungeon.entity.items.ItemPreset();
    org.mafagafogigante.dungeon.entity.Integrity integrity44 = itemPreset43.getIntegrity();
    org.mafagafogigante.dungeon.entity.Luminosity luminosity45 = itemPreset43.getLuminosity();
    org.mafagafogigante.dungeon.util.Percentage percentage47 = new org.mafagafogigante.dungeon.util.Percentage((double)57);
    itemPreset43.setVisibility(percentage47);
    org.mafagafogigante.dungeon.entity.Luminosity luminosity49 = new org.mafagafogigante.dungeon.entity.Luminosity(percentage47);
    boolean b50 = percentage38.biggerThanOrEqualTo(percentage47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(weight1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(weight3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(weight4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(integrity6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(percentage9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(weight19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(integrity21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(percentage24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(integrity25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(integrity30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(percentage33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(integrity44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(luminosity45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b50 == true);

  }

  @Test
  public void test163() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test163"); }

    org.mafagafogigante.dungeon.game.DungeonString dungeonString1 = new org.mafagafogigante.dungeon.game.DungeonString("01:00:00");

  }

  @Test
  public void test164() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test164"); }

    org.mafagafogigante.dungeon.entity.items.ItemPreset itemPreset0 = new org.mafagafogigante.dungeon.entity.items.ItemPreset();
    org.mafagafogigante.dungeon.entity.Integrity integrity1 = itemPreset0.getIntegrity();
    org.mafagafogigante.dungeon.entity.Integrity integrity2 = null;
    itemPreset0.setIntegrity(integrity2);
    org.mafagafogigante.dungeon.util.Percentage percentage4 = itemPreset0.getVisibility();
    java.lang.String str5 = itemPreset0.getType();
    itemPreset0.setIntegrityDecrementOnHit((int)(short)100);
    org.mafagafogigante.dungeon.util.Percentage percentage8 = itemPreset0.getHitRate();
    org.mafagafogigante.dungeon.game.PartOfDay partOfDay9 = org.mafagafogigante.dungeon.game.PartOfDay.NIGHT;
    org.mafagafogigante.dungeon.entity.Luminosity luminosity10 = partOfDay9.getLuminosity();
    org.mafagafogigante.dungeon.game.Name name11 = partOfDay9.getName();
    java.lang.String str13 = name11.getQuantifiedName((int)'a');
    java.lang.String str14 = name11.getPlural();
    org.mafagafogigante.dungeon.entity.items.CreatureInventory.SimulationResult simulationResult15 = org.mafagafogigante.dungeon.entity.items.CreatureInventory.SimulationResult.ALREADY_IN_THE_INVENTORY;
    boolean b16 = name11.equals((java.lang.Object)simulationResult15);
    itemPreset0.setName(name11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(integrity1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(percentage4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(percentage8);
    org.junit.Assert.assertTrue("'" + partOfDay9 + "' != '" + org.mafagafogigante.dungeon.game.PartOfDay.NIGHT + "'", partOfDay9.equals(org.mafagafogigante.dungeon.game.PartOfDay.NIGHT));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(luminosity10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(name11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "a few Nights"+ "'", str13.equals("a few Nights"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "Nights"+ "'", str14.equals("Nights"));
    org.junit.Assert.assertTrue("'" + simulationResult15 + "' != '" + org.mafagafogigante.dungeon.entity.items.CreatureInventory.SimulationResult.ALREADY_IN_THE_INVENTORY + "'", simulationResult15.equals(org.mafagafogigante.dungeon.entity.items.CreatureInventory.SimulationResult.ALREADY_IN_THE_INVENTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);

  }

  @Test
  public void test165() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test165"); }

    org.mafagafogigante.dungeon.entity.items.ItemPreset itemPreset0 = new org.mafagafogigante.dungeon.entity.items.ItemPreset();
    org.mafagafogigante.dungeon.entity.Integrity integrity1 = itemPreset0.getIntegrity();
    itemPreset0.setIntegrityDecrementOnEat((-1));
    org.mafagafogigante.dungeon.entity.Weight weight4 = itemPreset0.getWeight();
    int i5 = itemPreset0.getNutrition();
    org.mafagafogigante.dungeon.date.Date date12 = new org.mafagafogigante.dungeon.date.Date((long)(byte)0, (long)0, (long)81, (long)10, 100L, (long)(short)1);
    java.lang.String str13 = date12.toDateString();
    org.mafagafogigante.dungeon.date.Date date17 = new org.mafagafogigante.dungeon.date.Date(10L, 100L, 100L);
    org.mafagafogigante.dungeon.date.Date date21 = new org.mafagafogigante.dungeon.date.Date(10L, 100L, 100L);
    int i22 = date17.compareTo(date21);
    org.mafagafogigante.dungeon.game.PartOfDay partOfDay23 = org.mafagafogigante.dungeon.game.PartOfDay.getCorrespondingConstant(date17);
    long long24 = date17.getYear();
    org.mafagafogigante.dungeon.date.Duration duration25 = new org.mafagafogigante.dungeon.date.Duration(date12, date17);
    long long26 = date17.getTime();
    org.mafagafogigante.dungeon.entity.creatures.CreaturePreset creaturePreset27 = new org.mafagafogigante.dungeon.entity.creatures.CreaturePreset();
    org.mafagafogigante.dungeon.game.Id id28 = null;
    creaturePreset27.setWeaponId(id28);
    org.mafagafogigante.dungeon.game.PartOfDay partOfDay30 = org.mafagafogigante.dungeon.game.PartOfDay.NIGHT;
    org.mafagafogigante.dungeon.entity.Luminosity luminosity31 = partOfDay30.getLuminosity();
    org.mafagafogigante.dungeon.game.Name name32 = partOfDay30.getName();
    org.mafagafogigante.dungeon.game.QuantificationMode quantificationMode34 = org.mafagafogigante.dungeon.game.QuantificationMode.NUMBER;
    java.lang.String str35 = name32.getQuantifiedName((int)'4', quantificationMode34);
    creaturePreset27.setName(name32);
    creaturePreset27.setAttack(97);
    boolean b39 = date17.equals((java.lang.Object)97);
    // The following exception was thrown during execution in test generation
    try {
    org.mafagafogigante.dungeon.entity.items.Item item40 = new org.mafagafogigante.dungeon.entity.items.Item(itemPreset0, date17);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(integrity1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(weight4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "day 10 of month 1 of the year 1"+ "'", str13.equals("day 10 of month 1 of the year 1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i22 == 0);
    org.junit.Assert.assertTrue("'" + partOfDay23 + "' != '" + org.mafagafogigante.dungeon.game.PartOfDay.MIDNIGHT + "'", partOfDay23.equals(org.mafagafogigante.dungeon.game.PartOfDay.MIDNIGHT));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long24 == 10L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long26 == 86313600000L);
    org.junit.Assert.assertTrue("'" + partOfDay30 + "' != '" + org.mafagafogigante.dungeon.game.PartOfDay.NIGHT + "'", partOfDay30.equals(org.mafagafogigante.dungeon.game.PartOfDay.NIGHT));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(luminosity31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(name32);
    org.junit.Assert.assertTrue("'" + quantificationMode34 + "' != '" + org.mafagafogigante.dungeon.game.QuantificationMode.NUMBER + "'", quantificationMode34.equals(org.mafagafogigante.dungeon.game.QuantificationMode.NUMBER));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str35 + "' != '" + "52 Nights"+ "'", str35.equals("52 Nights"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == false);

  }

  @Test
  public void test166() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test166"); }

    org.mafagafogigante.dungeon.schema.JsonRule jsonRule0 = org.mafagafogigante.dungeon.schema.rules.JsonRuleFactory.makeBooleanRule();
    org.mafagafogigante.dungeon.schema.JsonRule jsonRule1 = org.mafagafogigante.dungeon.schema.rules.JsonRuleFactory.makeVariableArrayRule(jsonRule0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonRule0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonRule1);

  }

  @Test
  public void test167() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test167"); }

    org.mafagafogigante.dungeon.io.Writer.write("0/1");

  }

  @Test
  public void test168() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test168"); }

    org.mafagafogigante.dungeon.game.PartOfDay partOfDay0 = org.mafagafogigante.dungeon.game.PartOfDay.NIGHT;
    org.mafagafogigante.dungeon.entity.Luminosity luminosity1 = partOfDay0.getLuminosity();
    org.mafagafogigante.dungeon.world.LuminosityVisibilityCriterion luminosityVisibilityCriterion2 = new org.mafagafogigante.dungeon.world.LuminosityVisibilityCriterion(luminosity1);
    org.mafagafogigante.dungeon.game.PartOfDay partOfDay3 = org.mafagafogigante.dungeon.game.PartOfDay.NIGHT;
    org.mafagafogigante.dungeon.entity.Luminosity luminosity4 = partOfDay3.getLuminosity();
    org.mafagafogigante.dungeon.world.LuminosityVisibilityCriterion luminosityVisibilityCriterion5 = new org.mafagafogigante.dungeon.world.LuminosityVisibilityCriterion(luminosity4);
    org.mafagafogigante.dungeon.util.Percentage percentage7 = new org.mafagafogigante.dungeon.util.Percentage((double)'#');
    boolean b9 = percentage7.equals((java.lang.Object)10.0d);
    org.mafagafogigante.dungeon.entity.Luminosity luminosity10 = new org.mafagafogigante.dungeon.entity.Luminosity(percentage7);
    org.mafagafogigante.dungeon.world.LuminosityVisibilityCriterion luminosityVisibilityCriterion11 = new org.mafagafogigante.dungeon.world.LuminosityVisibilityCriterion(luminosity10);
    org.mafagafogigante.dungeon.util.Percentage percentage13 = new org.mafagafogigante.dungeon.util.Percentage((double)'#');
    boolean b15 = percentage13.equals((java.lang.Object)10.0d);
    org.mafagafogigante.dungeon.entity.Luminosity luminosity16 = new org.mafagafogigante.dungeon.entity.Luminosity(percentage13);
    org.mafagafogigante.dungeon.world.LuminosityVisibilityCriterion luminosityVisibilityCriterion17 = new org.mafagafogigante.dungeon.world.LuminosityVisibilityCriterion(luminosity16);
    org.mafagafogigante.dungeon.game.PartOfDay partOfDay18 = org.mafagafogigante.dungeon.game.PartOfDay.NIGHT;
    org.mafagafogigante.dungeon.entity.Luminosity luminosity19 = partOfDay18.getLuminosity();
    org.mafagafogigante.dungeon.world.LuminosityVisibilityCriterion luminosityVisibilityCriterion20 = new org.mafagafogigante.dungeon.world.LuminosityVisibilityCriterion(luminosity19);
    org.mafagafogigante.dungeon.game.PartOfDay partOfDay21 = org.mafagafogigante.dungeon.game.PartOfDay.NIGHT;
    org.mafagafogigante.dungeon.entity.Luminosity luminosity22 = partOfDay21.getLuminosity();
    org.mafagafogigante.dungeon.world.LuminosityVisibilityCriterion luminosityVisibilityCriterion23 = new org.mafagafogigante.dungeon.world.LuminosityVisibilityCriterion(luminosity22);
    org.mafagafogigante.dungeon.world.VisibilityCriterion[] visibilityCriterion_array24 = new org.mafagafogigante.dungeon.world.VisibilityCriterion[] { luminosityVisibilityCriterion2, luminosityVisibilityCriterion5, luminosityVisibilityCriterion11, luminosityVisibilityCriterion17, luminosityVisibilityCriterion20, luminosityVisibilityCriterion23 };
    org.mafagafogigante.dungeon.world.VisibilityCriteria visibilityCriteria25 = new org.mafagafogigante.dungeon.world.VisibilityCriteria(visibilityCriterion_array24);
    org.mafagafogigante.dungeon.world.VisibilityCriteria visibilityCriteria26 = new org.mafagafogigante.dungeon.world.VisibilityCriteria(visibilityCriterion_array24);
    java.lang.String str27 = visibilityCriteria26.toString();
    org.junit.Assert.assertTrue("'" + partOfDay0 + "' != '" + org.mafagafogigante.dungeon.game.PartOfDay.NIGHT + "'", partOfDay0.equals(org.mafagafogigante.dungeon.game.PartOfDay.NIGHT));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(luminosity1);
    org.junit.Assert.assertTrue("'" + partOfDay3 + "' != '" + org.mafagafogigante.dungeon.game.PartOfDay.NIGHT + "'", partOfDay3.equals(org.mafagafogigante.dungeon.game.PartOfDay.NIGHT));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(luminosity4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    org.junit.Assert.assertTrue("'" + partOfDay18 + "' != '" + org.mafagafogigante.dungeon.game.PartOfDay.NIGHT + "'", partOfDay18.equals(org.mafagafogigante.dungeon.game.PartOfDay.NIGHT));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(luminosity19);
    org.junit.Assert.assertTrue("'" + partOfDay21 + "' != '" + org.mafagafogigante.dungeon.game.PartOfDay.NIGHT + "'", partOfDay21.equals(org.mafagafogigante.dungeon.game.PartOfDay.NIGHT));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(luminosity22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(visibilityCriterion_array24);

  }

  @Test
  public void test169() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test169"); }

    org.mafagafogigante.dungeon.entity.items.ItemPreset itemPreset0 = new org.mafagafogigante.dungeon.entity.items.ItemPreset();
    org.mafagafogigante.dungeon.entity.Integrity integrity1 = itemPreset0.getIntegrity();
    org.mafagafogigante.dungeon.entity.Integrity integrity2 = null;
    itemPreset0.setIntegrity(integrity2);
    org.mafagafogigante.dungeon.util.Percentage percentage4 = itemPreset0.getVisibility();
    java.lang.String str5 = itemPreset0.getType();
    itemPreset0.setIntegrityDecrementOnHit((int)(short)100);
    org.mafagafogigante.dungeon.util.Percentage percentage9 = new org.mafagafogigante.dungeon.util.Percentage((double)57);
    itemPreset0.setVisibility(percentage9);
    org.mafagafogigante.dungeon.game.Id id11 = null;
    itemPreset0.setId(id11);
    itemPreset0.setPutrefactionPeriod((long)(short)1);
    org.mafagafogigante.dungeon.entity.TagSet<org.mafagafogigante.dungeon.entity.items.Item.Tag> tagset_tag15 = itemPreset0.getTagSet();
    org.mafagafogigante.dungeon.entity.items.ItemPreset itemPreset19 = new org.mafagafogigante.dungeon.entity.items.ItemPreset();
    itemPreset19.setDrinkableHealing((int)(short)0);
    org.mafagafogigante.dungeon.util.Percentage percentage23 = new org.mafagafogigante.dungeon.util.Percentage((double)57);
    itemPreset19.setVisibility(percentage23);
    double d25 = org.mafagafogigante.dungeon.util.DungeonMath.weightedAverage((double)10.0f, 100.0d, percentage23);
    org.mafagafogigante.dungeon.entity.items.ItemPreset itemPreset26 = new org.mafagafogigante.dungeon.entity.items.ItemPreset();
    org.mafagafogigante.dungeon.entity.Integrity integrity27 = itemPreset26.getIntegrity();
    org.mafagafogigante.dungeon.entity.Integrity integrity28 = null;
    itemPreset26.setIntegrity(integrity28);
    org.mafagafogigante.dungeon.util.Percentage percentage30 = itemPreset26.getVisibility();
    java.lang.String str31 = itemPreset26.getType();
    org.mafagafogigante.dungeon.entity.items.Item.Tag tag32 = org.mafagafogigante.dungeon.entity.items.Item.Tag.REPAIRABLE;
    itemPreset26.addTag(tag32);
    org.mafagafogigante.dungeon.util.Percentage percentage35 = new org.mafagafogigante.dungeon.util.Percentage((double)'#');
    boolean b37 = percentage35.equals((java.lang.Object)10.0d);
    org.mafagafogigante.dungeon.entity.Luminosity luminosity38 = new org.mafagafogigante.dungeon.entity.Luminosity(percentage35);
    itemPreset26.setVisibility(percentage35);
    boolean b40 = percentage23.biggerThanOrEqualTo(percentage35);
    org.mafagafogigante.dungeon.entity.items.WeaponComponent weaponComponent42 = new org.mafagafogigante.dungeon.entity.items.WeaponComponent((int)(short)10, percentage35, 1);
    itemPreset0.setVisibility(percentage35);
    org.mafagafogigante.dungeon.entity.Integrity integrity44 = itemPreset0.getIntegrity();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(integrity1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(percentage4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(tagset_tag15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d25 == 100.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(integrity27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(percentage30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str31);
    org.junit.Assert.assertTrue("'" + tag32 + "' != '" + org.mafagafogigante.dungeon.entity.items.Item.Tag.REPAIRABLE + "'", tag32.equals(org.mafagafogigante.dungeon.entity.items.Item.Tag.REPAIRABLE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(integrity44);

  }

  @Test
  public void test170() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test170"); }

    org.mafagafogigante.dungeon.entity.Weight weight1 = org.mafagafogigante.dungeon.entity.Weight.newInstance((double)38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(weight1);

  }

  @Test
  public void test171() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test171"); }

    org.mafagafogigante.dungeon.entity.items.FoodComponent foodComponent2 = new org.mafagafogigante.dungeon.entity.items.FoodComponent(82800, (int)' ');
    int i3 = foodComponent2.getIntegrityDecrementOnEat();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 32);

  }

  @Test
  public void test172() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test172"); }

    org.mafagafogigante.dungeon.entity.creatures.CreaturePreset creaturePreset0 = new org.mafagafogigante.dungeon.entity.creatures.CreaturePreset();
    org.mafagafogigante.dungeon.game.Id id1 = null;
    creaturePreset0.setWeaponId(id1);
    creaturePreset0.setAttack(57);
    org.mafagafogigante.dungeon.entity.Luminosity luminosity5 = creaturePreset0.getLuminosity();
    org.mafagafogigante.dungeon.entity.creatures.CreaturePreset creaturePreset6 = new org.mafagafogigante.dungeon.entity.creatures.CreaturePreset();
    org.mafagafogigante.dungeon.game.Id id7 = null;
    creaturePreset6.setWeaponId(id7);
    creaturePreset6.setAttack(57);
    org.mafagafogigante.dungeon.game.Id[] id_array11 = new org.mafagafogigante.dungeon.game.Id[] {  };
    java.util.ArrayList<org.mafagafogigante.dungeon.game.Id> arraylist_id12 = new java.util.ArrayList<org.mafagafogigante.dungeon.game.Id>();
    boolean b13 = java.util.Collections.addAll((java.util.Collection<org.mafagafogigante.dungeon.game.Id>)arraylist_id12, id_array11);
    creaturePreset6.setItems((java.util.List<org.mafagafogigante.dungeon.game.Id>)arraylist_id12);
    creaturePreset0.setItems((java.util.List<org.mafagafogigante.dungeon.game.Id>)arraylist_id12);
    org.mafagafogigante.dungeon.entity.items.ItemPreset itemPreset16 = new org.mafagafogigante.dungeon.entity.items.ItemPreset();
    org.mafagafogigante.dungeon.entity.Integrity integrity17 = itemPreset16.getIntegrity();
    org.mafagafogigante.dungeon.entity.Luminosity luminosity18 = itemPreset16.getLuminosity();
    org.mafagafogigante.dungeon.util.Percentage percentage20 = new org.mafagafogigante.dungeon.util.Percentage((double)57);
    itemPreset16.setVisibility(percentage20);
    creaturePreset0.setVisibility(percentage20);
    org.mafagafogigante.dungeon.entity.creatures.AttackAlgorithmId attackAlgorithmId23 = creaturePreset0.getAttackAlgorithmId();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(luminosity5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(id_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(integrity17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(luminosity18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(attackAlgorithmId23);

  }

  @Test
  public void test173() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test173"); }

    java.awt.Color color1 = null;
    org.mafagafogigante.dungeon.game.LocationDescription locationDescription2 = new org.mafagafogigante.dungeon.game.LocationDescription('4', color1);
    java.awt.Color color3 = locationDescription2.getColor();
    java.lang.String str4 = locationDescription2.toString();
    locationDescription2.setInfo("WritingSpecifications{scrollDown=false}");
    java.awt.Color color7 = locationDescription2.getColor();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(color3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "LocationDescription{symbol=4, color=null, info='You don't discover anything.'}"+ "'", str4.equals("LocationDescription{symbol=4, color=null, info='You don't discover anything.'}"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(color7);

  }

  @Test
  public void test174() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test174"); }

    org.mafagafogigante.dungeon.entity.items.ItemPreset itemPreset0 = new org.mafagafogigante.dungeon.entity.items.ItemPreset();
    org.mafagafogigante.dungeon.entity.Integrity integrity1 = itemPreset0.getIntegrity();
    org.mafagafogigante.dungeon.util.Percentage percentage2 = itemPreset0.getVisibility();
    org.mafagafogigante.dungeon.entity.Integrity integrity3 = itemPreset0.getIntegrity();
    boolean b4 = itemPreset0.isUnique();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(integrity1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(percentage2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(integrity3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);

  }

  @Test
  public void test175() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test175"); }

    org.mafagafogigante.dungeon.entity.creatures.CreaturePreset creaturePreset0 = new org.mafagafogigante.dungeon.entity.creatures.CreaturePreset();
    org.mafagafogigante.dungeon.game.Id id1 = null;
    creaturePreset0.setWeaponId(id1);
    creaturePreset0.setAttack((int)(short)100);
    org.mafagafogigante.dungeon.game.Id id5 = creaturePreset0.getWeaponId();
    org.mafagafogigante.dungeon.entity.Luminosity luminosity6 = creaturePreset0.getLuminosity();
    org.mafagafogigante.dungeon.util.Percentage percentage8 = new org.mafagafogigante.dungeon.util.Percentage((double)57);
    java.lang.String str9 = percentage8.toString();
    creaturePreset0.setVisibility(percentage8);
    org.mafagafogigante.dungeon.entity.creatures.CreaturePreset creaturePreset11 = new org.mafagafogigante.dungeon.entity.creatures.CreaturePreset();
    org.mafagafogigante.dungeon.game.Id id12 = null;
    creaturePreset11.setWeaponId(id12);
    creaturePreset11.setAttack(57);
    org.mafagafogigante.dungeon.entity.Luminosity luminosity16 = creaturePreset11.getLuminosity();
    creaturePreset11.setInventoryItemLimit(57);
    org.mafagafogigante.dungeon.util.Percentage percentage20 = new org.mafagafogigante.dungeon.util.Percentage((double)'#');
    boolean b22 = percentage20.equals((java.lang.Object)10.0d);
    org.mafagafogigante.dungeon.entity.Luminosity luminosity23 = new org.mafagafogigante.dungeon.entity.Luminosity(percentage20);
    org.mafagafogigante.dungeon.util.Percentage percentage24 = luminosity23.toPercentage();
    java.lang.String str25 = percentage24.toString();
    creaturePreset11.setVisibility(percentage24);
    org.mafagafogigante.dungeon.entity.creatures.CreaturePreset creaturePreset27 = new org.mafagafogigante.dungeon.entity.creatures.CreaturePreset();
    org.mafagafogigante.dungeon.game.Id id28 = null;
    creaturePreset27.setWeaponId(id28);
    creaturePreset27.setAttack(57);
    org.mafagafogigante.dungeon.entity.Luminosity luminosity32 = creaturePreset27.getLuminosity();
    org.mafagafogigante.dungeon.entity.creatures.CreaturePreset creaturePreset33 = new org.mafagafogigante.dungeon.entity.creatures.CreaturePreset();
    org.mafagafogigante.dungeon.game.Id id34 = null;
    creaturePreset33.setWeaponId(id34);
    creaturePreset33.setAttack(57);
    org.mafagafogigante.dungeon.game.Id[] id_array38 = new org.mafagafogigante.dungeon.game.Id[] {  };
    java.util.ArrayList<org.mafagafogigante.dungeon.game.Id> arraylist_id39 = new java.util.ArrayList<org.mafagafogigante.dungeon.game.Id>();
    boolean b40 = java.util.Collections.addAll((java.util.Collection<org.mafagafogigante.dungeon.game.Id>)arraylist_id39, id_array38);
    creaturePreset33.setItems((java.util.List<org.mafagafogigante.dungeon.game.Id>)arraylist_id39);
    creaturePreset27.setItems((java.util.List<org.mafagafogigante.dungeon.game.Id>)arraylist_id39);
    int i43 = creaturePreset27.getHealth();
    org.mafagafogigante.dungeon.util.Percentage percentage45 = new org.mafagafogigante.dungeon.util.Percentage((double)57);
    java.lang.String str46 = percentage45.toString();
    org.mafagafogigante.dungeon.util.Percentage percentage48 = new org.mafagafogigante.dungeon.util.Percentage((double)100);
    org.mafagafogigante.dungeon.entity.items.ItemPreset itemPreset49 = new org.mafagafogigante.dungeon.entity.items.ItemPreset();
    org.mafagafogigante.dungeon.entity.Integrity integrity50 = itemPreset49.getIntegrity();
    org.mafagafogigante.dungeon.entity.Integrity integrity51 = null;
    itemPreset49.setIntegrity(integrity51);
    org.mafagafogigante.dungeon.util.Percentage percentage53 = itemPreset49.getVisibility();
    java.lang.String str54 = itemPreset49.getType();
    itemPreset49.setIntegrityDecrementOnHit((int)(short)100);
    org.mafagafogigante.dungeon.util.Percentage percentage58 = new org.mafagafogigante.dungeon.util.Percentage((double)57);
    itemPreset49.setVisibility(percentage58);
    boolean b60 = org.mafagafogigante.dungeon.game.Random.roll(percentage58);
    int i61 = percentage48.compareTo(percentage58);
    java.lang.String str62 = percentage58.toString();
    org.mafagafogigante.dungeon.util.Percentage percentage63 = percentage45.multiply(percentage58);
    creaturePreset27.setVisibility(percentage45);
    org.mafagafogigante.dungeon.entity.creatures.CreaturePreset creaturePreset65 = new org.mafagafogigante.dungeon.entity.creatures.CreaturePreset();
    org.mafagafogigante.dungeon.game.Id id66 = null;
    creaturePreset65.setWeaponId(id66);
    creaturePreset65.setAttack(57);
    org.mafagafogigante.dungeon.game.Id[] id_array70 = new org.mafagafogigante.dungeon.game.Id[] {  };
    java.util.ArrayList<org.mafagafogigante.dungeon.game.Id> arraylist_id71 = new java.util.ArrayList<org.mafagafogigante.dungeon.game.Id>();
    boolean b72 = java.util.Collections.addAll((java.util.Collection<org.mafagafogigante.dungeon.game.Id>)arraylist_id71, id_array70);
    creaturePreset65.setItems((java.util.List<org.mafagafogigante.dungeon.game.Id>)arraylist_id71);
    creaturePreset27.setItems((java.util.List<org.mafagafogigante.dungeon.game.Id>)arraylist_id71);
    creaturePreset11.setItems((java.util.List<org.mafagafogigante.dungeon.game.Id>)arraylist_id71);
    creaturePreset0.setItems((java.util.List<org.mafagafogigante.dungeon.game.Id>)arraylist_id71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(id5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(luminosity6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "100.00%"+ "'", str9.equals("100.00%"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(luminosity16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(percentage24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + "100.00%"+ "'", str25.equals("100.00%"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(luminosity32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(id_array38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i43 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str46 + "' != '" + "100.00%"+ "'", str46.equals("100.00%"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(integrity50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(percentage53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b60 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i61 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str62 + "' != '" + "100.00%"+ "'", str62.equals("100.00%"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(percentage63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(id_array70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b72 == false);

  }

  @Test
  public void test176() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test176"); }

    org.mafagafogigante.dungeon.commands.CommandDescription commandDescription2 = new org.mafagafogigante.dungeon.commands.CommandDescription("CounterMap{map={}}", "None");

  }

  @Test
  public void test177() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test177"); }

    // The following exception was thrown during execution in test generation
    try {
    org.mafagafogigante.dungeon.date.Duration duration1 = org.mafagafogigante.dungeon.date.DungeonTimeParser.parsePeriod("{101, 10, 10}");
      org.junit.Assert.fail("Expected exception of type org.mafagafogigante.dungeon.date.DungeonTimeParser.InvalidMultiplierException");
    } catch (org.mafagafogigante.dungeon.date.DungeonTimeParser.InvalidMultiplierException e) {
      // Expected exception.
    }

  }

  @Test
  public void test178() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test178"); }

    org.mafagafogigante.dungeon.commands.CommandDescription commandDescription2 = new org.mafagafogigante.dungeon.commands.CommandDescription("00:00:00", "the sky is cloudy");
    java.lang.String str3 = commandDescription2.getName();
    java.lang.String str4 = commandDescription2.getInfo();
    java.lang.String str5 = commandDescription2.toString();
    java.lang.String str6 = commandDescription2.getInfo();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "00:00:00"+ "'", str3.equals("00:00:00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "the sky is cloudy"+ "'", str4.equals("the sky is cloudy"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "00:00:00 : the sky is cloudy"+ "'", str5.equals("00:00:00 : the sky is cloudy"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "the sky is cloudy"+ "'", str6.equals("the sky is cloudy"));

  }

  @Test
  public void test179() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test179"); }

    org.mafagafogigante.dungeon.entity.items.ItemUsageEffect itemUsageEffect1 = new org.mafagafogigante.dungeon.entity.items.ItemUsageEffect((int)(byte)-1);

  }

  @Test
  public void test180() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test180"); }

    org.mafagafogigante.dungeon.util.NonNegativeInteger nonNegativeInteger1 = new org.mafagafogigante.dungeon.util.NonNegativeInteger((java.lang.Integer)0);
    java.lang.Integer i2 = nonNegativeInteger1.toInteger();
    java.lang.String str3 = nonNegativeInteger1.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i2 + "' != '" + 0+ "'", i2.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "0"+ "'", str3.equals("0"));

  }

  @Test
  public void test181() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test181"); }

    org.mafagafogigante.dungeon.schema.JsonRule jsonRule1 = org.mafagafogigante.dungeon.schema.rules.JsonRuleFactory.makeStringLengthRule((-1));
    org.mafagafogigante.dungeon.schema.JsonRule jsonRule2 = org.mafagafogigante.dungeon.schema.rules.JsonRuleFactory.makeVariableArrayRule(jsonRule1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonRule1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonRule2);

  }

  @Test
  public void test182() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test182"); }

    org.mafagafogigante.dungeon.commands.CommandHistory commandHistory0 = new org.mafagafogigante.dungeon.commands.CommandHistory();
    java.lang.String str2 = commandHistory0.getLastSimilarCommand("");
    java.lang.String str4 = commandHistory0.getLastSimilarCommand("Unarmed : UNARMED");
    org.mafagafogigante.dungeon.commands.CommandHistory.Cursor cursor5 = commandHistory0.getCursor();
    org.mafagafogigante.dungeon.commands.CommandHistory.Cursor cursor6 = cursor5.moveUp();
    org.mafagafogigante.dungeon.commands.CommandHistory.Cursor cursor7 = cursor5.moveUp();
    java.lang.String str8 = cursor7.getSelectedCommand();
    java.lang.String str9 = cursor7.getSelectedCommand();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(cursor5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(cursor6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(cursor7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str9);

  }

  @Test
  public void test183() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test183"); }

    org.mafagafogigante.dungeon.util.NonNegativeInteger nonNegativeInteger1 = new org.mafagafogigante.dungeon.util.NonNegativeInteger((java.lang.Integer)34);

  }

  @Test
  public void test184() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test184"); }

    org.mafagafogigante.dungeon.util.CounterMap<org.mafagafogigante.dungeon.world.Weather> countermap_weather0 = new org.mafagafogigante.dungeon.util.CounterMap<org.mafagafogigante.dungeon.world.Weather>();
    org.mafagafogigante.dungeon.world.Weather weather1 = null;
    int i2 = countermap_weather0.getCounter(weather1);
    java.util.Set<org.mafagafogigante.dungeon.world.Weather> set_weather3 = countermap_weather0.keySet();
    org.mafagafogigante.dungeon.date.Date date4 = null;
    org.mafagafogigante.dungeon.world.Weather weather5 = new org.mafagafogigante.dungeon.world.Weather(date4);
    int i6 = countermap_weather0.getCounter(weather5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_weather3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 0);

  }

  @Test
  public void test185() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test185"); }

    org.mafagafogigante.dungeon.entity.items.ItemPreset itemPreset0 = new org.mafagafogigante.dungeon.entity.items.ItemPreset();
    org.mafagafogigante.dungeon.entity.Luminosity luminosity1 = itemPreset0.getLuminosity();
    org.mafagafogigante.dungeon.entity.Integrity integrity4 = new org.mafagafogigante.dungeon.entity.Integrity(1, 0);
    java.lang.String str5 = integrity4.toString();
    itemPreset0.setIntegrity(integrity4);
    org.mafagafogigante.dungeon.game.Id id7 = itemPreset0.getId();
    itemPreset0.setDrinkableHealing((int)(short)0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(luminosity1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "0/1"+ "'", str5.equals("0/1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(id7);

  }

  @Test
  public void test186() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test186"); }

    org.mafagafogigante.dungeon.entity.Integrity integrity2 = new org.mafagafogigante.dungeon.entity.Integrity((int)(byte)1, (int)(byte)0);
    boolean b3 = integrity2.isMaximum();
    boolean b4 = integrity2.isMaximum();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);

  }

  @Test
  public void test187() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test187"); }

    // The following exception was thrown during execution in test generation
    try {
    org.mafagafogigante.dungeon.game.Engine.rollDateAndRefresh((-1));
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  @Test
  public void test188() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test188"); }

    org.mafagafogigante.dungeon.entity.items.ItemPreset itemPreset0 = new org.mafagafogigante.dungeon.entity.items.ItemPreset();
    org.mafagafogigante.dungeon.entity.Integrity integrity1 = itemPreset0.getIntegrity();
    org.mafagafogigante.dungeon.util.Percentage percentage2 = itemPreset0.getVisibility();
    java.lang.String str3 = itemPreset0.getType();
    itemPreset0.setDrinkableHealing(10);
    org.mafagafogigante.dungeon.game.Id id6 = itemPreset0.getId();
    itemPreset0.setText("You don't discover anything.");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(integrity1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(percentage2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(id6);

  }

  @Test
  public void test189() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test189"); }

    org.mafagafogigante.dungeon.entity.Integrity integrity2 = new org.mafagafogigante.dungeon.entity.Integrity(1, 0);
    boolean b3 = integrity2.isMaximum();
    org.mafagafogigante.dungeon.entity.items.Item item4 = null;
    org.mafagafogigante.dungeon.entity.items.ItemIntegrity itemIntegrity5 = org.mafagafogigante.dungeon.entity.items.ItemIntegrity.makeItemIntegrity(integrity2, item4);
    int i6 = integrity2.getCurrent();
    org.mafagafogigante.dungeon.entity.items.Item item7 = null;
    org.mafagafogigante.dungeon.entity.items.ItemIntegrity itemIntegrity8 = org.mafagafogigante.dungeon.entity.items.ItemIntegrity.makeItemIntegrity(integrity2, item7);
    int i9 = itemIntegrity8.getMaximum();
    boolean b10 = itemIntegrity8.isBroken();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(itemIntegrity5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(itemIntegrity8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);

  }

  @Test
  public void test190() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test190"); }

    org.mafagafogigante.dungeon.entity.items.ItemPreset itemPreset0 = new org.mafagafogigante.dungeon.entity.items.ItemPreset();
    org.mafagafogigante.dungeon.entity.Integrity integrity1 = itemPreset0.getIntegrity();
    org.mafagafogigante.dungeon.entity.Integrity integrity2 = null;
    itemPreset0.setIntegrity(integrity2);
    org.mafagafogigante.dungeon.util.Percentage percentage4 = itemPreset0.getVisibility();
    org.mafagafogigante.dungeon.entity.Integrity integrity5 = itemPreset0.getIntegrity();
    java.lang.String str6 = itemPreset0.getText();
    org.mafagafogigante.dungeon.game.Name name7 = null;
    itemPreset0.setName(name7);
    boolean b9 = itemPreset0.isUnique();
    org.mafagafogigante.dungeon.game.Id id10 = itemPreset0.getSpellId();
    org.mafagafogigante.dungeon.entity.Integrity integrity13 = new org.mafagafogigante.dungeon.entity.Integrity(1, 0);
    java.lang.String str14 = integrity13.toString();
    java.lang.String str15 = integrity13.toString();
    boolean b16 = integrity13.isMaximum();
    itemPreset0.setIntegrity(integrity13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(integrity1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(percentage4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(integrity5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(id10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "0/1"+ "'", str14.equals("0/1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "0/1"+ "'", str15.equals("0/1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);

  }

  @Test
  public void test191() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test191"); }

    org.mafagafogigante.dungeon.game.PartOfDay partOfDay0 = org.mafagafogigante.dungeon.game.PartOfDay.NIGHT;
    org.mafagafogigante.dungeon.entity.Luminosity luminosity1 = partOfDay0.getLuminosity();
    org.mafagafogigante.dungeon.game.Name name2 = partOfDay0.getName();
    java.lang.String str4 = name2.getQuantifiedName((int)'a');
    java.lang.String str6 = name2.getQuantifiedName((int)(short)10);
    org.junit.Assert.assertTrue("'" + partOfDay0 + "' != '" + org.mafagafogigante.dungeon.game.PartOfDay.NIGHT + "'", partOfDay0.equals(org.mafagafogigante.dungeon.game.PartOfDay.NIGHT));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(luminosity1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(name2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "a few Nights"+ "'", str4.equals("a few Nights"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "a few Nights"+ "'", str6.equals("a few Nights"));

  }

  @Test
  public void test192() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test192"); }

    org.mafagafogigante.dungeon.schema.JsonRule[] jsonRule_array0 = new org.mafagafogigante.dungeon.schema.JsonRule[] {  };
    org.mafagafogigante.dungeon.schema.JsonRule jsonRule1 = org.mafagafogigante.dungeon.schema.rules.JsonRuleFactory.makeGroupRule(jsonRule_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonRule_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonRule1);

  }

  @Test
  public void test193() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test193"); }

    org.mafagafogigante.dungeon.game.BlockedEntrances blockedEntrances0 = new org.mafagafogigante.dungeon.game.BlockedEntrances();
    org.mafagafogigante.dungeon.game.Point point4 = new org.mafagafogigante.dungeon.game.Point(100, 10, (int)(byte)10);
    java.lang.String str5 = point4.toString();
    org.mafagafogigante.dungeon.game.Direction direction6 = org.mafagafogigante.dungeon.game.Direction.EAST;
    boolean b8 = direction6.equalsIgnoreCase("Damaged");
    org.mafagafogigante.dungeon.game.Point point9 = new org.mafagafogigante.dungeon.game.Point(point4, direction6);
    boolean b10 = blockedEntrances0.isBlocked(direction6);
    java.lang.String str11 = blockedEntrances0.toString();
    java.lang.String str12 = blockedEntrances0.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "{100, 10, 10}"+ "'", str5.equals("{100, 10, 10}"));
    org.junit.Assert.assertTrue("'" + direction6 + "' != '" + org.mafagafogigante.dungeon.game.Direction.EAST + "'", direction6.equals(org.mafagafogigante.dungeon.game.Direction.EAST));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "None"+ "'", str11.equals("None"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "None"+ "'", str12.equals("None"));

  }

  @Test
  public void test194() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test194"); }

    org.mafagafogigante.dungeon.game.Id id0 = null;
    org.mafagafogigante.dungeon.achievements.BattleStatisticsQuery battleStatisticsQuery2 = new org.mafagafogigante.dungeon.achievements.BattleStatisticsQuery();
    org.mafagafogigante.dungeon.stats.CauseOfDeath causeOfDeath3 = org.mafagafogigante.dungeon.stats.CauseOfDeath.getUnarmedCauseOfDeath();
    battleStatisticsQuery2.setCauseOfDeath(causeOfDeath3);
    org.mafagafogigante.dungeon.game.PartOfDay partOfDay5 = org.mafagafogigante.dungeon.game.PartOfDay.NIGHT;
    org.mafagafogigante.dungeon.stats.BattleRecord battleRecord6 = new org.mafagafogigante.dungeon.stats.BattleRecord(id0, "", causeOfDeath3, partOfDay5);
    java.lang.String str7 = battleRecord6.getType();
    org.mafagafogigante.dungeon.game.PartOfDay partOfDay8 = battleRecord6.getPartOfDay();
    java.lang.String str9 = battleRecord6.getType();
    org.mafagafogigante.dungeon.game.PartOfDay partOfDay10 = battleRecord6.getPartOfDay();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(causeOfDeath3);
    org.junit.Assert.assertTrue("'" + partOfDay5 + "' != '" + org.mafagafogigante.dungeon.game.PartOfDay.NIGHT + "'", partOfDay5.equals(org.mafagafogigante.dungeon.game.PartOfDay.NIGHT));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + ""+ "'", str7.equals(""));
    org.junit.Assert.assertTrue("'" + partOfDay8 + "' != '" + org.mafagafogigante.dungeon.game.PartOfDay.NIGHT + "'", partOfDay8.equals(org.mafagafogigante.dungeon.game.PartOfDay.NIGHT));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + ""+ "'", str9.equals(""));
    org.junit.Assert.assertTrue("'" + partOfDay10 + "' != '" + org.mafagafogigante.dungeon.game.PartOfDay.NIGHT + "'", partOfDay10.equals(org.mafagafogigante.dungeon.game.PartOfDay.NIGHT));

  }

  @Test
  public void test195() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test195"); }

    org.mafagafogigante.dungeon.stats.BattleStatistics battleStatistics0 = new org.mafagafogigante.dungeon.stats.BattleStatistics();
    org.mafagafogigante.dungeon.achievements.BattleStatisticsRequirement battleStatisticsRequirement1 = null;
    boolean b2 = battleStatistics0.satisfies(battleStatisticsRequirement1);
    java.lang.String str3 = battleStatistics0.toString();
    org.mafagafogigante.dungeon.util.CounterMap<org.mafagafogigante.dungeon.stats.CauseOfDeath> countermap_causeOfDeath4 = battleStatistics0.getKillsByCauseOfDeath();
    java.util.Set<org.mafagafogigante.dungeon.stats.CauseOfDeath> set_causeOfDeath5 = countermap_causeOfDeath4.keySet();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "BattleStatistics{records=CounterMap{map={}}}"+ "'", str3.equals("BattleStatistics{records=CounterMap{map={}}}"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(countermap_causeOfDeath4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_causeOfDeath5);

  }

  @Test
  public void test196() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test196"); }

    org.mafagafogigante.dungeon.date.Date date6 = new org.mafagafogigante.dungeon.date.Date(85496399L, 10L, 830217600000L, (long)100, (long)152, 86400000L);

  }

  @Test
  public void test197() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test197"); }

    org.mafagafogigante.dungeon.stats.BattleStatistics battleStatistics0 = new org.mafagafogigante.dungeon.stats.BattleStatistics();
    org.mafagafogigante.dungeon.achievements.BattleStatisticsRequirement battleStatisticsRequirement1 = null;
    boolean b2 = battleStatistics0.satisfies(battleStatisticsRequirement1);
    org.mafagafogigante.dungeon.achievements.BattleStatisticsQuery battleStatisticsQuery3 = new org.mafagafogigante.dungeon.achievements.BattleStatisticsQuery();
    org.mafagafogigante.dungeon.achievements.BattleStatisticsRequirement battleStatisticsRequirement5 = new org.mafagafogigante.dungeon.achievements.BattleStatisticsRequirement(battleStatisticsQuery3, (int)(byte)100);
    boolean b6 = battleStatistics0.satisfies(battleStatisticsRequirement5);
    org.mafagafogigante.dungeon.achievements.BattleStatisticsQuery battleStatisticsQuery7 = battleStatisticsRequirement5.getQuery();
    org.mafagafogigante.dungeon.game.Id id8 = null;
    battleStatisticsQuery7.setId(id8);
    org.mafagafogigante.dungeon.game.Id id10 = null;
    org.mafagafogigante.dungeon.achievements.BattleStatisticsQuery battleStatisticsQuery12 = new org.mafagafogigante.dungeon.achievements.BattleStatisticsQuery();
    org.mafagafogigante.dungeon.stats.CauseOfDeath causeOfDeath13 = org.mafagafogigante.dungeon.stats.CauseOfDeath.getUnarmedCauseOfDeath();
    battleStatisticsQuery12.setCauseOfDeath(causeOfDeath13);
    org.mafagafogigante.dungeon.game.PartOfDay partOfDay15 = org.mafagafogigante.dungeon.game.PartOfDay.NIGHT;
    org.mafagafogigante.dungeon.stats.BattleRecord battleRecord16 = new org.mafagafogigante.dungeon.stats.BattleRecord(id10, "", causeOfDeath13, partOfDay15);
    java.lang.String str17 = battleRecord16.getType();
    boolean b18 = battleStatisticsQuery7.matches(battleRecord16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(battleStatisticsQuery7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(causeOfDeath13);
    org.junit.Assert.assertTrue("'" + partOfDay15 + "' != '" + org.mafagafogigante.dungeon.game.PartOfDay.NIGHT + "'", partOfDay15.equals(org.mafagafogigante.dungeon.game.PartOfDay.NIGHT));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + ""+ "'", str17.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);

  }

  @Test
  public void test198() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test198"); }

    org.mafagafogigante.dungeon.commands.CommandHistory commandHistory0 = new org.mafagafogigante.dungeon.commands.CommandHistory();
    java.lang.String str2 = commandHistory0.getLastSimilarCommand("");
    java.lang.String str4 = commandHistory0.getLastSimilarCommand("35 kg");
    org.mafagafogigante.dungeon.commands.CommandHistory.Cursor cursor5 = commandHistory0.getCursor();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(cursor5);

  }

//  @Test
//  public void test199() throws Throwable {
//
//    if (debug) { System.out.format("%n%s%n","RegressionTest2.test199"); }
//
//    org.mafagafogigante.dungeon.entity.creatures.CreaturePreset creaturePreset0 = new org.mafagafogigante.dungeon.entity.creatures.CreaturePreset();
//    org.mafagafogigante.dungeon.game.Id id1 = null;
//    creaturePreset0.setWeaponId(id1);
//    creaturePreset0.setAttack(57);
//    org.mafagafogigante.dungeon.entity.Luminosity luminosity5 = creaturePreset0.getLuminosity();
//    creaturePreset0.setInventoryItemLimit(57);
//    org.mafagafogigante.dungeon.entity.creatures.Drop[] drop_array8 = new org.mafagafogigante.dungeon.entity.creatures.Drop[] {  };
//    java.util.ArrayList<org.mafagafogigante.dungeon.entity.creatures.Drop> arraylist_drop9 = new java.util.ArrayList<org.mafagafogigante.dungeon.entity.creatures.Drop>();
//    boolean b10 = java.util.Collections.addAll((java.util.Collection<org.mafagafogigante.dungeon.entity.creatures.Drop>)arraylist_drop9, drop_array8);
//    creaturePreset0.setDropList((java.util.List<org.mafagafogigante.dungeon.entity.creatures.Drop>)arraylist_drop9);
//    int i12 = creaturePreset0.getInventoryItemLimit();
//    org.mafagafogigante.dungeon.entity.TagSet<org.mafagafogigante.dungeon.entity.creatures.Creature.Tag> tagset_tag13 = null;
//    creaturePreset0.setTagSet(tagset_tag13);
//    org.mafagafogigante.dungeon.entity.items.ItemPreset itemPreset15 = new org.mafagafogigante.dungeon.entity.items.ItemPreset();
//    org.mafagafogigante.dungeon.entity.Integrity integrity16 = itemPreset15.getIntegrity();
//    org.mafagafogigante.dungeon.entity.Integrity integrity17 = null;
//    itemPreset15.setIntegrity(integrity17);
//    org.mafagafogigante.dungeon.util.Percentage percentage19 = itemPreset15.getVisibility();
//    java.lang.String str20 = itemPreset15.getType();
//    itemPreset15.setIntegrityDecrementOnHit((int)(short)100);
//    org.mafagafogigante.dungeon.entity.TagSet<org.mafagafogigante.dungeon.entity.items.Item.Tag> tagset_tag23 = itemPreset15.getTagSet();
//    org.mafagafogigante.dungeon.entity.Weight weight25 = org.mafagafogigante.dungeon.entity.Weight.newInstance((double)(byte)-1);
//    itemPreset15.setWeight(weight25);
//    creaturePreset0.setWeight(weight25);
//    
//    // Regression assertion (captures the current behavior of the code)
//    org.junit.Assert.assertNotNull(luminosity5);
//    
//    // Regression assertion (captures the current behavior of the code)
//    org.junit.Assert.assertNotNull(drop_array8);
//    
//    // Regression assertion (captures the current behavior of the code)
//    org.junit.Assert.assertTrue(b10 == false);
//    
//    // Regression assertion (captures the current behavior of the code)
//    org.junit.Assert.assertTrue(i12 == 57);
//    
//    // Regression assertion (captures the current behavior of the code)
//    org.junit.Assert.assertNull(integrity16);
//    
//    // Regression assertion (captures the current behavior of the code)
//    org.junit.Assert.assertNull(percentage19);
//    
//    // Regression assertion (captures the current behavior of the code)
//    org.junit.Assert.assertNull(str20);
//    
//    // Regression assertion (captures the current behavior of the code)
//    org.junit.Assert.assertNotNull(tagset_tag23);
//    
//    // Regression assertion (captures the current behavior of the code)
//    org.junit.Assert.assertNotNull(weight25);
//
//  }

  @Test
  public void test200() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test200"); }

    org.mafagafogigante.dungeon.entity.items.ItemPreset itemPreset2 = new org.mafagafogigante.dungeon.entity.items.ItemPreset();
    itemPreset2.setDrinkableHealing((int)(short)0);
    org.mafagafogigante.dungeon.util.Percentage percentage6 = new org.mafagafogigante.dungeon.util.Percentage((double)57);
    itemPreset2.setVisibility(percentage6);
    double d8 = org.mafagafogigante.dungeon.util.DungeonMath.weightedAverage((double)10.0f, 100.0d, percentage6);
    boolean b9 = org.mafagafogigante.dungeon.game.Random.roll(percentage6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d8 == 100.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);

  }

  @Test
  public void test201() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test201"); }

    org.mafagafogigante.dungeon.entity.Weight weight1 = org.mafagafogigante.dungeon.entity.Weight.newInstance((double)'#');
    org.mafagafogigante.dungeon.entity.Weight weight3 = org.mafagafogigante.dungeon.entity.Weight.newInstance((double)'#');
    org.mafagafogigante.dungeon.entity.Weight weight4 = weight1.add(weight3);
    java.lang.String str5 = weight4.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(weight1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(weight3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(weight4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "70 kg"+ "'", str5.equals("70 kg"));

  }

  @Test
  public void test202() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test202"); }

    org.mafagafogigante.dungeon.commands.IssuedCommand issuedCommand1 = new org.mafagafogigante.dungeon.commands.IssuedCommand("BattleStatistics{records=CounterMap{map={}}}");
    org.mafagafogigante.dungeon.commands.PreparedIssuedCommand preparedIssuedCommand2 = org.mafagafogigante.dungeon.commands.IssuedCommandProcessor.prepareIssuedCommand(issuedCommand1);
    java.util.List<java.lang.String> list_str3 = issuedCommand1.getTokens();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(preparedIssuedCommand2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_str3);

  }

  @Test
  public void test203() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test203"); }

    org.mafagafogigante.dungeon.entity.items.ItemPreset itemPreset0 = new org.mafagafogigante.dungeon.entity.items.ItemPreset();
    org.mafagafogigante.dungeon.entity.Integrity integrity1 = itemPreset0.getIntegrity();
    org.mafagafogigante.dungeon.entity.Integrity integrity2 = null;
    itemPreset0.setIntegrity(integrity2);
    org.mafagafogigante.dungeon.util.Percentage percentage4 = itemPreset0.getVisibility();
    java.lang.String str5 = itemPreset0.getType();
    itemPreset0.setIntegrityDecrementOnHit((int)(short)100);
    org.mafagafogigante.dungeon.entity.TagSet<org.mafagafogigante.dungeon.entity.items.Item.Tag> tagset_tag8 = itemPreset0.getTagSet();
    org.mafagafogigante.dungeon.entity.Weight weight10 = org.mafagafogigante.dungeon.entity.Weight.newInstance((double)(byte)-1);
    itemPreset0.setWeight(weight10);
    org.mafagafogigante.dungeon.entity.items.ItemPreset itemPreset12 = new org.mafagafogigante.dungeon.entity.items.ItemPreset();
    org.mafagafogigante.dungeon.entity.Integrity integrity13 = itemPreset12.getIntegrity();
    org.mafagafogigante.dungeon.entity.Integrity integrity14 = null;
    itemPreset12.setIntegrity(integrity14);
    org.mafagafogigante.dungeon.util.Percentage percentage17 = new org.mafagafogigante.dungeon.util.Percentage((double)'#');
    itemPreset12.setHitRate(percentage17);
    itemPreset0.setHitRate(percentage17);
    org.mafagafogigante.dungeon.entity.Luminosity luminosity20 = itemPreset0.getLuminosity();
    itemPreset0.setText("{10, 97, 0}");
    itemPreset0.setDrinkableDoses(3600);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(integrity1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(percentage4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(tagset_tag8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(weight10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(integrity13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(luminosity20);

  }

  @Test
  public void test204() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test204"); }

    org.mafagafogigante.dungeon.schema.JsonRule jsonRule2 = org.mafagafogigante.dungeon.schema.rules.JsonRuleFactory.makeBoundIntegerRule(3600, 152);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonRule2);

  }

  @Test
  public void test205() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test205"); }

    org.mafagafogigante.dungeon.date.Date date3 = new org.mafagafogigante.dungeon.date.Date(10L, 100L, 100L);
    org.mafagafogigante.dungeon.date.Date date7 = new org.mafagafogigante.dungeon.date.Date(10L, 100L, 100L);
    int i8 = date3.compareTo(date7);
    org.mafagafogigante.dungeon.game.PartOfDay partOfDay9 = org.mafagafogigante.dungeon.game.PartOfDay.getCorrespondingConstant(date3);
    java.lang.String[] str_array15 = new java.lang.String[] { "hi!", "visibilityCriteria=VisibilityCriteria{[]}", "visibilityCriteria=VisibilityCriteria{[]}", "Damaged", "hi!" };
    org.mafagafogigante.dungeon.util.Table table16 = new org.mafagafogigante.dungeon.util.Table(str_array15);
    java.util.List<org.mafagafogigante.dungeon.game.ColoredString> list_coloredString17 = table16.toColoredStringList();
    org.mafagafogigante.dungeon.game.ColoredString coloredString18 = org.mafagafogigante.dungeon.game.Random.select(list_coloredString17);
    boolean b19 = date3.equals((java.lang.Object)coloredString18);
    org.mafagafogigante.dungeon.date.Date date23 = new org.mafagafogigante.dungeon.date.Date(10L, 100L, 100L);
    org.mafagafogigante.dungeon.date.Date date27 = new org.mafagafogigante.dungeon.date.Date(10L, 100L, 100L);
    int i28 = date23.compareTo(date27);
    org.mafagafogigante.dungeon.game.PartOfDay partOfDay29 = org.mafagafogigante.dungeon.game.PartOfDay.getCorrespondingConstant(date23);
    long long30 = date23.getYear();
    org.mafagafogigante.dungeon.date.Date date34 = new org.mafagafogigante.dungeon.date.Date(10L, 100L, 100L);
    org.mafagafogigante.dungeon.date.Date date38 = new org.mafagafogigante.dungeon.date.Date(10L, 100L, 100L);
    int i39 = date34.compareTo(date38);
    long long40 = date34.getYear();
    int i41 = date23.compareTo(date34);
    org.mafagafogigante.dungeon.date.Duration duration42 = new org.mafagafogigante.dungeon.date.Duration(date3, date34);
    org.mafagafogigante.dungeon.date.Date date47 = new org.mafagafogigante.dungeon.date.Date(10L, 100L, 100L);
    org.mafagafogigante.dungeon.date.Date date51 = new org.mafagafogigante.dungeon.date.Date(10L, 100L, 100L);
    int i52 = date47.compareTo(date51);
    org.mafagafogigante.dungeon.game.PartOfDay partOfDay53 = org.mafagafogigante.dungeon.game.PartOfDay.getCorrespondingConstant(date47);
    long long54 = date47.getYear();
    org.mafagafogigante.dungeon.date.Date date58 = new org.mafagafogigante.dungeon.date.Date(10L, 100L, 100L);
    org.mafagafogigante.dungeon.date.Date date62 = new org.mafagafogigante.dungeon.date.Date(10L, 100L, 100L);
    int i63 = date58.compareTo(date62);
    long long64 = date58.getYear();
    int i65 = date47.compareTo(date58);
    org.mafagafogigante.dungeon.date.DungeonTimeUnit dungeonTimeUnit67 = org.mafagafogigante.dungeon.date.DungeonTimeUnit.HOUR;
    org.mafagafogigante.dungeon.date.Date date68 = date58.minus(35, dungeonTimeUnit67);
    org.mafagafogigante.dungeon.date.Date date69 = date34.plus(3, dungeonTimeUnit67);
    long long70 = date69.getMonth();
    org.mafagafogigante.dungeon.world.Weather weather71 = new org.mafagafogigante.dungeon.world.Weather(date69);
    org.mafagafogigante.dungeon.game.PartOfDay partOfDay72 = org.mafagafogigante.dungeon.game.PartOfDay.getCorrespondingConstant(date69);
    java.lang.String str73 = date69.toTimeString();
    java.lang.String str74 = date69.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 0);
    org.junit.Assert.assertTrue("'" + partOfDay9 + "' != '" + org.mafagafogigante.dungeon.game.PartOfDay.MIDNIGHT + "'", partOfDay9.equals(org.mafagafogigante.dungeon.game.PartOfDay.MIDNIGHT));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_coloredString17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(coloredString18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 0);
    org.junit.Assert.assertTrue("'" + partOfDay29 + "' != '" + org.mafagafogigante.dungeon.game.PartOfDay.MIDNIGHT + "'", partOfDay29.equals(org.mafagafogigante.dungeon.game.PartOfDay.MIDNIGHT));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long30 == 10L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i39 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long40 == 10L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i41 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i52 == 0);
    org.junit.Assert.assertTrue("'" + partOfDay53 + "' != '" + org.mafagafogigante.dungeon.game.PartOfDay.MIDNIGHT + "'", partOfDay53.equals(org.mafagafogigante.dungeon.game.PartOfDay.MIDNIGHT));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long54 == 10L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i63 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long64 == 10L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i65 == 0);
    org.junit.Assert.assertTrue("'" + dungeonTimeUnit67 + "' != '" + org.mafagafogigante.dungeon.date.DungeonTimeUnit.HOUR + "'", dungeonTimeUnit67.equals(org.mafagafogigante.dungeon.date.DungeonTimeUnit.HOUR));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(date68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(date69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long70 == 10L);
    org.junit.Assert.assertTrue("'" + partOfDay72 + "' != '" + org.mafagafogigante.dungeon.game.PartOfDay.NIGHT + "'", partOfDay72.equals(org.mafagafogigante.dungeon.game.PartOfDay.NIGHT));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str73 + "' != '" + "03:00:00"+ "'", str73.equals("03:00:00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str74 + "' != '" + "10-10-10 03:00:00"+ "'", str74.equals("10-10-10 03:00:00"));

  }

//  @Test
//  public void test206() throws Throwable {
//
//    if (debug) { System.out.format("%n%s%n","RegressionTest2.test206"); }
//
//    org.mafagafogigante.dungeon.entity.creatures.CreaturePreset creaturePreset0 = new org.mafagafogigante.dungeon.entity.creatures.CreaturePreset();
//    org.mafagafogigante.dungeon.game.Id id1 = null;
//    creaturePreset0.setWeaponId(id1);
//    creaturePreset0.setAttack(57);
//    org.mafagafogigante.dungeon.entity.Luminosity luminosity5 = creaturePreset0.getLuminosity();
//    creaturePreset0.setInventoryItemLimit(57);
//    org.mafagafogigante.dungeon.util.Percentage percentage9 = new org.mafagafogigante.dungeon.util.Percentage((double)'#');
//    boolean b11 = percentage9.equals((java.lang.Object)10.0d);
//    org.mafagafogigante.dungeon.entity.Luminosity luminosity12 = new org.mafagafogigante.dungeon.entity.Luminosity(percentage9);
//    org.mafagafogigante.dungeon.util.Percentage percentage13 = luminosity12.toPercentage();
//    java.lang.String str14 = percentage13.toString();
//    creaturePreset0.setVisibility(percentage13);
//    java.lang.String str16 = creaturePreset0.getType();
//    java.util.List<org.mafagafogigante.dungeon.entity.creatures.Drop> list_drop17 = creaturePreset0.getDropList();
//    // The following exception was thrown during execution in test generation
//    try {
//    org.mafagafogigante.dungeon.entity.creatures.Creature creature18 = new org.mafagafogigante.dungeon.entity.creatures.Creature(creaturePreset0);
//      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
//    } catch (java.lang.IllegalArgumentException e) {
//      // Expected exception.
//    }
//    
//    
//    // Regression assertion (captures the current behavior of the code)
//    org.junit.Assert.assertNotNull(luminosity5);
//    
//    // Regression assertion (captures the current behavior of the code)
//    org.junit.Assert.assertTrue(b11 == false);
//    
//    // Regression assertion (captures the current behavior of the code)
//    org.junit.Assert.assertNotNull(percentage13);
//    
//    // Regression assertion (captures the current behavior of the code)
//    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "100.00%"+ "'", str14.equals("100.00%"));
//    
//    // Regression assertion (captures the current behavior of the code)
//    org.junit.Assert.assertNull(str16);
//    
//    // Regression assertion (captures the current behavior of the code)
//    org.junit.Assert.assertNull(list_drop17);
//
//  }

  @Test
  public void test207() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test207"); }

    org.mafagafogigante.dungeon.entity.Luminosity luminosity0 = null;
    org.mafagafogigante.dungeon.world.LuminosityVisibilityCriterion luminosityVisibilityCriterion1 = new org.mafagafogigante.dungeon.world.LuminosityVisibilityCriterion(luminosity0);

  }

  @Test
  public void test208() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test208"); }

    org.mafagafogigante.dungeon.entity.Weight weight1 = org.mafagafogigante.dungeon.entity.Weight.newInstance((double)(byte)-1);
    org.mafagafogigante.dungeon.entity.items.ItemPreset itemPreset2 = new org.mafagafogigante.dungeon.entity.items.ItemPreset();
    org.mafagafogigante.dungeon.entity.Integrity integrity3 = itemPreset2.getIntegrity();
    org.mafagafogigante.dungeon.entity.Integrity integrity4 = null;
    itemPreset2.setIntegrity(integrity4);
    org.mafagafogigante.dungeon.util.Percentage percentage6 = itemPreset2.getVisibility();
    boolean b7 = itemPreset2.isUnique();
    org.mafagafogigante.dungeon.entity.Weight weight9 = org.mafagafogigante.dungeon.entity.Weight.newInstance((double)(byte)-1);
    org.mafagafogigante.dungeon.entity.Weight weight10 = org.mafagafogigante.dungeon.entity.Weight.ZERO;
    org.mafagafogigante.dungeon.entity.Weight weight11 = weight9.add(weight10);
    java.lang.String str12 = weight11.toString();
    itemPreset2.setWeight(weight11);
    int i14 = weight1.compareTo(weight11);
    org.mafagafogigante.dungeon.entity.Weight weight16 = org.mafagafogigante.dungeon.entity.Weight.newInstance((double)(byte)-1);
    org.mafagafogigante.dungeon.entity.Weight weight17 = org.mafagafogigante.dungeon.entity.Weight.ZERO;
    org.mafagafogigante.dungeon.entity.Weight weight18 = weight16.add(weight17);
    int i19 = weight1.compareTo(weight18);
    org.mafagafogigante.dungeon.entity.Weight weight20 = org.mafagafogigante.dungeon.entity.Weight.ZERO;
    org.mafagafogigante.dungeon.entity.Weight weight22 = org.mafagafogigante.dungeon.entity.Weight.newInstance((double)(byte)-1);
    int i23 = weight20.compareTo(weight22);
    org.mafagafogigante.dungeon.entity.Weight weight24 = weight1.add(weight22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(weight1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(integrity3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(percentage6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(weight9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(weight10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(weight11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "0 kg"+ "'", str12.equals("0 kg"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(weight16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(weight17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(weight18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(weight20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(weight22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i23 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(weight24);

  }

//  @Test
//  public void test209() throws Throwable {
//
//    if (debug) { System.out.format("%n%s%n","RegressionTest2.test209"); }
//
//    org.mafagafogigante.dungeon.util.CounterMap<java.util.RandomAccess> countermap_randomAccess0 = new org.mafagafogigante.dungeon.util.CounterMap<java.util.RandomAccess>();
//    org.mafagafogigante.dungeon.entity.creatures.CreaturePreset creaturePreset1 = new org.mafagafogigante.dungeon.entity.creatures.CreaturePreset();
//    org.mafagafogigante.dungeon.game.Id id2 = null;
//    creaturePreset1.setWeaponId(id2);
//    creaturePreset1.setAttack(57);
//    org.mafagafogigante.dungeon.entity.Luminosity luminosity6 = creaturePreset1.getLuminosity();
//    org.mafagafogigante.dungeon.entity.creatures.CreaturePreset creaturePreset7 = new org.mafagafogigante.dungeon.entity.creatures.CreaturePreset();
//    org.mafagafogigante.dungeon.game.Id id8 = null;
//    creaturePreset7.setWeaponId(id8);
//    creaturePreset7.setAttack(57);
//    org.mafagafogigante.dungeon.game.Id[] id_array12 = new org.mafagafogigante.dungeon.game.Id[] {  };
//    java.util.ArrayList<org.mafagafogigante.dungeon.game.Id> arraylist_id13 = new java.util.ArrayList<org.mafagafogigante.dungeon.game.Id>();
//    boolean b14 = java.util.Collections.addAll((java.util.Collection<org.mafagafogigante.dungeon.game.Id>)arraylist_id13, id_array12);
//    creaturePreset7.setItems((java.util.List<org.mafagafogigante.dungeon.game.Id>)arraylist_id13);
//    creaturePreset1.setItems((java.util.List<org.mafagafogigante.dungeon.game.Id>)arraylist_id13);
//    countermap_randomAccess0.incrementCounter((java.util.RandomAccess)arraylist_id13, (java.lang.Integer)10);
//    org.mafagafogigante.dungeon.world.VisibilityCriterion[] visibilityCriterion_array19 = new org.mafagafogigante.dungeon.world.VisibilityCriterion[] {  };
//    org.mafagafogigante.dungeon.world.VisibilityCriteria visibilityCriteria20 = new org.mafagafogigante.dungeon.world.VisibilityCriteria(visibilityCriterion_array19);
//    org.mafagafogigante.dungeon.entity.creatures.Creature creature21 = null;
//    org.mafagafogigante.dungeon.entity.creatures.Observer observer22 = new org.mafagafogigante.dungeon.entity.creatures.Observer(creature21);
//    boolean b23 = visibilityCriteria20.isMetBy(observer22);
//    org.mafagafogigante.dungeon.entity.items.Item[] item_array24 = new org.mafagafogigante.dungeon.entity.items.Item[] {  };
//    java.util.ArrayList<org.mafagafogigante.dungeon.entity.items.Item> arraylist_item25 = new java.util.ArrayList<org.mafagafogigante.dungeon.entity.items.Item>();
//    boolean b26 = java.util.Collections.addAll((java.util.Collection<org.mafagafogigante.dungeon.entity.items.Item>)arraylist_item25, item_array24);
//    org.mafagafogigante.dungeon.game.DungeonString dungeonString28 = new org.mafagafogigante.dungeon.game.DungeonString("hi!");
//    java.lang.String[] str_array33 = new java.lang.String[] { "hi!", "Damaged", "BattleStatistics{records=CounterMap{map={}}}", "" };
//    dungeonString28.append(str_array33);
//    observer22.writeItemSight((java.util.List<org.mafagafogigante.dungeon.entity.items.Item>)arraylist_item25, dungeonString28);
//    org.mafagafogigante.dungeon.entity.creatures.Creature[] creature_array36 = new org.mafagafogigante.dungeon.entity.creatures.Creature[] {  };
//    java.util.ArrayList<org.mafagafogigante.dungeon.entity.creatures.Creature> arraylist_creature37 = new java.util.ArrayList<org.mafagafogigante.dungeon.entity.creatures.Creature>();
//    boolean b38 = java.util.Collections.addAll((java.util.Collection<org.mafagafogigante.dungeon.entity.creatures.Creature>)arraylist_creature37, creature_array36);
//    org.mafagafogigante.dungeon.game.DungeonString dungeonString40 = new org.mafagafogigante.dungeon.game.DungeonString("hi!");
//    java.lang.String[] str_array45 = new java.lang.String[] { "hi!", "Damaged", "BattleStatistics{records=CounterMap{map={}}}", "" };
//    dungeonString40.append(str_array45);
//    java.lang.String str47 = dungeonString40.toString();
//    org.mafagafogigante.dungeon.game.Point point51 = new org.mafagafogigante.dungeon.game.Point(10, (int)'a', 0);
//    java.lang.String[] str_array54 = new java.lang.String[] { "", "" };
//    org.mafagafogigante.dungeon.util.Table table55 = new org.mafagafogigante.dungeon.util.Table(str_array54);
//    boolean b56 = point51.equals((java.lang.Object)str_array54);
//    dungeonString40.append(str_array54);
//    observer22.writeCreatureSight((java.util.List<org.mafagafogigante.dungeon.entity.creatures.Creature>)arraylist_creature37, dungeonString40);
//    int i59 = countermap_randomAccess0.getCounter((java.util.RandomAccess)arraylist_creature37);
//    org.mafagafogigante.dungeon.entity.creatures.Creature creature60 = null;
//    org.mafagafogigante.dungeon.entity.creatures.Observer observer61 = new org.mafagafogigante.dungeon.entity.creatures.Observer(creature60);
//    org.mafagafogigante.dungeon.entity.items.Item[] item_array62 = new org.mafagafogigante.dungeon.entity.items.Item[] {  };
//    java.util.ArrayList<org.mafagafogigante.dungeon.entity.items.Item> arraylist_item63 = new java.util.ArrayList<org.mafagafogigante.dungeon.entity.items.Item>();
//    boolean b64 = java.util.Collections.addAll((java.util.Collection<org.mafagafogigante.dungeon.entity.items.Item>)arraylist_item63, item_array62);
//    org.mafagafogigante.dungeon.game.DungeonString dungeonString66 = new org.mafagafogigante.dungeon.game.DungeonString("hi!");
//    java.lang.String[] str_array71 = new java.lang.String[] { "hi!", "Damaged", "BattleStatistics{records=CounterMap{map={}}}", "" };
//    dungeonString66.append(str_array71);
//    observer61.writeItemSight((java.util.List<org.mafagafogigante.dungeon.entity.items.Item>)arraylist_item63, dungeonString66);
//    countermap_randomAccess0.incrementCounter((java.util.RandomAccess)arraylist_item63);
//    org.mafagafogigante.dungeon.entity.creatures.CreaturePreset creaturePreset75 = new org.mafagafogigante.dungeon.entity.creatures.CreaturePreset();
//    org.mafagafogigante.dungeon.game.Id id76 = null;
//    creaturePreset75.setWeaponId(id76);
//    org.mafagafogigante.dungeon.game.Id id78 = creaturePreset75.getId();
//    org.mafagafogigante.dungeon.entity.Luminosity luminosity79 = creaturePreset75.getLuminosity();
//    org.mafagafogigante.dungeon.entity.creatures.Drop[] drop_array80 = new org.mafagafogigante.dungeon.entity.creatures.Drop[] {  };
//    java.util.ArrayList<org.mafagafogigante.dungeon.entity.creatures.Drop> arraylist_drop81 = new java.util.ArrayList<org.mafagafogigante.dungeon.entity.creatures.Drop>();
//    boolean b82 = java.util.Collections.addAll((java.util.Collection<org.mafagafogigante.dungeon.entity.creatures.Drop>)arraylist_drop81, drop_array80);
//    creaturePreset75.setDropList((java.util.List<org.mafagafogigante.dungeon.entity.creatures.Drop>)arraylist_drop81);
//    countermap_randomAccess0.incrementCounter((java.util.RandomAccess)arraylist_drop81, (java.lang.Integer)22041);
//    
//    // Regression assertion (captures the current behavior of the code)
//    org.junit.Assert.assertNotNull(luminosity6);
//    
//    // Regression assertion (captures the current behavior of the code)
//    org.junit.Assert.assertNotNull(id_array12);
//    
//    // Regression assertion (captures the current behavior of the code)
//    org.junit.Assert.assertTrue(b14 == false);
//    
//    // Regression assertion (captures the current behavior of the code)
//    org.junit.Assert.assertNotNull(visibilityCriterion_array19);
//    
//    // Regression assertion (captures the current behavior of the code)
//    org.junit.Assert.assertTrue(b23 == true);
//    
//    // Regression assertion (captures the current behavior of the code)
//    org.junit.Assert.assertNotNull(item_array24);
//    
//    // Regression assertion (captures the current behavior of the code)
//    org.junit.Assert.assertTrue(b26 == false);
//    
//    // Regression assertion (captures the current behavior of the code)
//    org.junit.Assert.assertNotNull(str_array33);
//    
//    // Regression assertion (captures the current behavior of the code)
//    org.junit.Assert.assertNotNull(creature_array36);
//    
//    // Regression assertion (captures the current behavior of the code)
//    org.junit.Assert.assertTrue(b38 == false);
//    
//    // Regression assertion (captures the current behavior of the code)
//    org.junit.Assert.assertNotNull(str_array45);
//    
//    // Regression assertion (captures the current behavior of the code)
//    org.junit.Assert.assertTrue("'" + str47 + "' != '" + "DungeonString{coloredStringList=[ColoredString{string='hi!hi!DamagedBattleStatistics{records=CounterMap{map={}}}', color=java.awt.Color[r=192,g=192,b=192]}], currentColor=java.awt.Color[r=192,g=192,b=192]}"+ "'", str47.equals("DungeonString{coloredStringList=[ColoredString{string='hi!hi!DamagedBattleStatistics{records=CounterMap{map={}}}', color=java.awt.Color[r=192,g=192,b=192]}], currentColor=java.awt.Color[r=192,g=192,b=192]}"));
//    
//    // Regression assertion (captures the current behavior of the code)
//    org.junit.Assert.assertNotNull(str_array54);
//    
//    // Regression assertion (captures the current behavior of the code)
//    org.junit.Assert.assertTrue(b56 == false);
//    
//    // Regression assertion (captures the current behavior of the code)
//    org.junit.Assert.assertTrue(i59 == 10);
//    
//    // Regression assertion (captures the current behavior of the code)
//    org.junit.Assert.assertNotNull(item_array62);
//    
//    // Regression assertion (captures the current behavior of the code)
//    org.junit.Assert.assertTrue(b64 == false);
//    
//    // Regression assertion (captures the current behavior of the code)
//    org.junit.Assert.assertNotNull(str_array71);
//    
//    // Regression assertion (captures the current behavior of the code)
//    org.junit.Assert.assertNull(id78);
//    
//    // Regression assertion (captures the current behavior of the code)
//    org.junit.Assert.assertNotNull(luminosity79);
//    
//    // Regression assertion (captures the current behavior of the code)
//    org.junit.Assert.assertNotNull(drop_array80);
//    
//    // Regression assertion (captures the current behavior of the code)
//    org.junit.Assert.assertTrue(b82 == false);
//
//  }

  @Test
  public void test210() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test210"); }

    org.mafagafogigante.dungeon.date.Date date6 = new org.mafagafogigante.dungeon.date.Date((long)100, 100L, (long)81, (long)(byte)-1, (long)152, (-1L));
    org.mafagafogigante.dungeon.date.Date date10 = new org.mafagafogigante.dungeon.date.Date((long)97, (long)(byte)-1, (long)'#');
    org.mafagafogigante.dungeon.stats.BattleStatistics battleStatistics11 = new org.mafagafogigante.dungeon.stats.BattleStatistics();
    org.mafagafogigante.dungeon.achievements.BattleStatisticsRequirement battleStatisticsRequirement12 = null;
    boolean b13 = battleStatistics11.satisfies(battleStatisticsRequirement12);
    java.lang.String str14 = battleStatistics11.toString();
    org.mafagafogigante.dungeon.achievements.BattleStatisticsQuery battleStatisticsQuery15 = new org.mafagafogigante.dungeon.achievements.BattleStatisticsQuery();
    org.mafagafogigante.dungeon.achievements.BattleStatisticsRequirement battleStatisticsRequirement17 = new org.mafagafogigante.dungeon.achievements.BattleStatisticsRequirement(battleStatisticsQuery15, (int)(byte)100);
    boolean b18 = battleStatistics11.satisfies(battleStatisticsRequirement17);
    org.mafagafogigante.dungeon.util.CounterMap<org.mafagafogigante.dungeon.stats.CauseOfDeath> countermap_causeOfDeath19 = battleStatistics11.getKillsByCauseOfDeath();
    org.mafagafogigante.dungeon.util.CounterMap<org.mafagafogigante.dungeon.stats.CauseOfDeath> countermap_causeOfDeath20 = battleStatistics11.getKillsByCauseOfDeath();
    boolean b21 = date10.equals((java.lang.Object)countermap_causeOfDeath20);
    org.mafagafogigante.dungeon.date.DungeonTimeUnit dungeonTimeUnit23 = org.mafagafogigante.dungeon.date.DungeonTimeUnit.YEAR;
    org.mafagafogigante.dungeon.date.Date date24 = date10.plus(45056, dungeonTimeUnit23);
    org.mafagafogigante.dungeon.date.Duration duration25 = new org.mafagafogigante.dungeon.date.Duration(date6, date24);
    java.lang.String str26 = date6.toDateString();
    org.mafagafogigante.dungeon.date.Date date30 = new org.mafagafogigante.dungeon.date.Date(10L, 100L, 100L);
    org.mafagafogigante.dungeon.date.Date date34 = new org.mafagafogigante.dungeon.date.Date(10L, 100L, 100L);
    int i35 = date30.compareTo(date34);
    long long36 = date34.getDay();
    org.mafagafogigante.dungeon.game.PartOfDay partOfDay37 = org.mafagafogigante.dungeon.game.PartOfDay.NIGHT;
    int i38 = org.mafagafogigante.dungeon.game.PartOfDay.getSecondsToNext(date34, partOfDay37);
    long long39 = date34.getYear();
    int i40 = date6.compareTo(date34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "BattleStatistics{records=CounterMap{map={}}}"+ "'", str14.equals("BattleStatistics{records=CounterMap{map={}}}"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(countermap_causeOfDeath19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(countermap_causeOfDeath20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    org.junit.Assert.assertTrue("'" + dungeonTimeUnit23 + "' != '" + org.mafagafogigante.dungeon.date.DungeonTimeUnit.YEAR + "'", dungeonTimeUnit23.equals(org.mafagafogigante.dungeon.date.DungeonTimeUnit.YEAR));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(date24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "day 10 of month 10 of the year 100"+ "'", str26.equals("day 10 of month 10 of the year 100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long36 == 10L);
    org.junit.Assert.assertTrue("'" + partOfDay37 + "' != '" + org.mafagafogigante.dungeon.game.PartOfDay.NIGHT + "'", partOfDay37.equals(org.mafagafogigante.dungeon.game.PartOfDay.NIGHT));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i38 == 3600);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long39 == 10L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i40 == 1);

  }

  @Test
  public void test211() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test211"); }

    org.mafagafogigante.dungeon.entity.creatures.CreaturePreset creaturePreset0 = new org.mafagafogigante.dungeon.entity.creatures.CreaturePreset();
    org.mafagafogigante.dungeon.game.Id id1 = null;
    creaturePreset0.setWeaponId(id1);
    creaturePreset0.setAttack((int)(short)100);
    org.mafagafogigante.dungeon.game.Id id5 = creaturePreset0.getWeaponId();
    double d6 = creaturePreset0.getInventoryWeightLimit();
    creaturePreset0.setType("-23--4-00 00:00:00");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(id5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d6 == 0.0d);

  }

  @Test
  public void test212() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test212"); }

    org.mafagafogigante.dungeon.game.BlockedEntrances blockedEntrances0 = new org.mafagafogigante.dungeon.game.BlockedEntrances();
    org.mafagafogigante.dungeon.game.BlockedEntrances blockedEntrances1 = new org.mafagafogigante.dungeon.game.BlockedEntrances(blockedEntrances0);
    org.mafagafogigante.dungeon.game.Direction direction2 = org.mafagafogigante.dungeon.game.Direction.EAST;
    java.lang.String str3 = direction2.toString();
    java.lang.String str4 = direction2.toString();
    blockedEntrances0.block(direction2);
    java.lang.String str6 = direction2.toString();
    org.junit.Assert.assertTrue("'" + direction2 + "' != '" + org.mafagafogigante.dungeon.game.Direction.EAST + "'", direction2.equals(org.mafagafogigante.dungeon.game.Direction.EAST));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "East"+ "'", str3.equals("East"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "East"+ "'", str4.equals("East"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "East"+ "'", str6.equals("East"));

  }

  @Test
  public void test213() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test213"); }

    org.mafagafogigante.dungeon.entity.items.FoodComponent foodComponent2 = new org.mafagafogigante.dungeon.entity.items.FoodComponent(0, 32);

  }

  @Test
  public void test214() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test214"); }

    java.lang.String[] str_array3 = new java.lang.String[] { "Damaged", "visibilityCriteria=VisibilityCriteria{[]}", "hi!" };
    java.util.ArrayList<java.lang.String> arraylist_str4 = new java.util.ArrayList<java.lang.String>();
    boolean b5 = java.util.Collections.addAll((java.util.Collection<java.lang.String>)arraylist_str4, str_array3);
    org.mafagafogigante.dungeon.io.Split split6 = org.mafagafogigante.dungeon.io.Split.splitOnOn((java.util.List<java.lang.String>)arraylist_str4);
    org.mafagafogigante.dungeon.io.Split split7 = org.mafagafogigante.dungeon.io.Split.splitOnOn((java.util.List<java.lang.String>)arraylist_str4);
    java.util.List<java.lang.String> list_str8 = split7.getBefore();
    org.mafagafogigante.dungeon.io.Split split9 = org.mafagafogigante.dungeon.io.Split.splitOnOn(list_str8);
    java.util.List<java.lang.String> list_str10 = split9.getBefore();
    java.util.List<java.lang.String> list_str11 = split9.getAfter();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(split6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(split7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_str8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(split9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_str10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_str11);

  }

  @Test
  public void test215() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test215"); }

    org.mafagafogigante.dungeon.date.Date date3 = new org.mafagafogigante.dungeon.date.Date(10L, 100L, 100L);
    org.mafagafogigante.dungeon.date.Date date7 = new org.mafagafogigante.dungeon.date.Date(10L, 100L, 100L);
    int i8 = date3.compareTo(date7);
    org.mafagafogigante.dungeon.game.PartOfDay partOfDay9 = org.mafagafogigante.dungeon.game.PartOfDay.getCorrespondingConstant(date3);
    java.lang.String[] str_array15 = new java.lang.String[] { "hi!", "visibilityCriteria=VisibilityCriteria{[]}", "visibilityCriteria=VisibilityCriteria{[]}", "Damaged", "hi!" };
    org.mafagafogigante.dungeon.util.Table table16 = new org.mafagafogigante.dungeon.util.Table(str_array15);
    java.util.List<org.mafagafogigante.dungeon.game.ColoredString> list_coloredString17 = table16.toColoredStringList();
    org.mafagafogigante.dungeon.game.ColoredString coloredString18 = org.mafagafogigante.dungeon.game.Random.select(list_coloredString17);
    boolean b19 = date3.equals((java.lang.Object)coloredString18);
    org.mafagafogigante.dungeon.date.Date date23 = new org.mafagafogigante.dungeon.date.Date(10L, 100L, 100L);
    org.mafagafogigante.dungeon.date.Date date27 = new org.mafagafogigante.dungeon.date.Date(10L, 100L, 100L);
    int i28 = date23.compareTo(date27);
    org.mafagafogigante.dungeon.game.PartOfDay partOfDay29 = org.mafagafogigante.dungeon.game.PartOfDay.getCorrespondingConstant(date23);
    long long30 = date23.getYear();
    org.mafagafogigante.dungeon.date.Date date34 = new org.mafagafogigante.dungeon.date.Date(10L, 100L, 100L);
    org.mafagafogigante.dungeon.date.Date date38 = new org.mafagafogigante.dungeon.date.Date(10L, 100L, 100L);
    int i39 = date34.compareTo(date38);
    long long40 = date34.getYear();
    int i41 = date23.compareTo(date34);
    org.mafagafogigante.dungeon.date.Duration duration42 = new org.mafagafogigante.dungeon.date.Duration(date3, date34);
    org.mafagafogigante.dungeon.date.Date date47 = new org.mafagafogigante.dungeon.date.Date(10L, 100L, 100L);
    org.mafagafogigante.dungeon.date.Date date51 = new org.mafagafogigante.dungeon.date.Date(10L, 100L, 100L);
    int i52 = date47.compareTo(date51);
    org.mafagafogigante.dungeon.game.PartOfDay partOfDay53 = org.mafagafogigante.dungeon.game.PartOfDay.getCorrespondingConstant(date47);
    long long54 = date47.getYear();
    org.mafagafogigante.dungeon.date.Date date58 = new org.mafagafogigante.dungeon.date.Date(10L, 100L, 100L);
    org.mafagafogigante.dungeon.date.Date date62 = new org.mafagafogigante.dungeon.date.Date(10L, 100L, 100L);
    int i63 = date58.compareTo(date62);
    long long64 = date58.getYear();
    int i65 = date47.compareTo(date58);
    org.mafagafogigante.dungeon.date.DungeonTimeUnit dungeonTimeUnit67 = org.mafagafogigante.dungeon.date.DungeonTimeUnit.HOUR;
    org.mafagafogigante.dungeon.date.Date date68 = date58.minus(35, dungeonTimeUnit67);
    org.mafagafogigante.dungeon.date.Date date69 = date34.plus(3, dungeonTimeUnit67);
    long long70 = date69.getMonth();
    org.mafagafogigante.dungeon.world.Weather weather71 = new org.mafagafogigante.dungeon.world.Weather(date69);
    org.mafagafogigante.dungeon.date.Date date78 = new org.mafagafogigante.dungeon.date.Date(1L, (long)100, (long)(short)1, (long)(byte)100, (long)' ', (long)'#');
    // The following exception was thrown during execution in test generation
    try {
    org.mafagafogigante.dungeon.world.WeatherCondition weatherCondition79 = weather71.getCurrentCondition(date78);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 0);
    org.junit.Assert.assertTrue("'" + partOfDay9 + "' != '" + org.mafagafogigante.dungeon.game.PartOfDay.MIDNIGHT + "'", partOfDay9.equals(org.mafagafogigante.dungeon.game.PartOfDay.MIDNIGHT));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_coloredString17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(coloredString18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 0);
    org.junit.Assert.assertTrue("'" + partOfDay29 + "' != '" + org.mafagafogigante.dungeon.game.PartOfDay.MIDNIGHT + "'", partOfDay29.equals(org.mafagafogigante.dungeon.game.PartOfDay.MIDNIGHT));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long30 == 10L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i39 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long40 == 10L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i41 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i52 == 0);
    org.junit.Assert.assertTrue("'" + partOfDay53 + "' != '" + org.mafagafogigante.dungeon.game.PartOfDay.MIDNIGHT + "'", partOfDay53.equals(org.mafagafogigante.dungeon.game.PartOfDay.MIDNIGHT));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long54 == 10L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i63 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long64 == 10L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i65 == 0);
    org.junit.Assert.assertTrue("'" + dungeonTimeUnit67 + "' != '" + org.mafagafogigante.dungeon.date.DungeonTimeUnit.HOUR + "'", dungeonTimeUnit67.equals(org.mafagafogigante.dungeon.date.DungeonTimeUnit.HOUR));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(date68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(date69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long70 == 10L);

  }

  @Test
  public void test216() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test216"); }

    org.mafagafogigante.dungeon.entity.items.ItemPreset itemPreset1 = new org.mafagafogigante.dungeon.entity.items.ItemPreset();
    org.mafagafogigante.dungeon.entity.Integrity integrity2 = itemPreset1.getIntegrity();
    org.mafagafogigante.dungeon.entity.Integrity integrity3 = null;
    itemPreset1.setIntegrity(integrity3);
    org.mafagafogigante.dungeon.util.Percentage percentage5 = itemPreset1.getVisibility();
    java.lang.String str6 = itemPreset1.getType();
    itemPreset1.setIntegrityDecrementOnHit((int)(short)100);
    org.mafagafogigante.dungeon.entity.TagSet<org.mafagafogigante.dungeon.entity.items.Item.Tag> tagset_tag9 = itemPreset1.getTagSet();
    org.mafagafogigante.dungeon.entity.Weight weight11 = org.mafagafogigante.dungeon.entity.Weight.newInstance((double)(byte)-1);
    itemPreset1.setWeight(weight11);
    org.mafagafogigante.dungeon.entity.items.ItemPreset itemPreset13 = new org.mafagafogigante.dungeon.entity.items.ItemPreset();
    org.mafagafogigante.dungeon.entity.Integrity integrity14 = itemPreset13.getIntegrity();
    org.mafagafogigante.dungeon.entity.Integrity integrity15 = null;
    itemPreset13.setIntegrity(integrity15);
    org.mafagafogigante.dungeon.util.Percentage percentage18 = new org.mafagafogigante.dungeon.util.Percentage((double)'#');
    itemPreset13.setHitRate(percentage18);
    itemPreset1.setHitRate(percentage18);
    org.mafagafogigante.dungeon.entity.items.WeaponComponent weaponComponent22 = new org.mafagafogigante.dungeon.entity.items.WeaponComponent(97, percentage18, 3);
    org.mafagafogigante.dungeon.util.Percentage percentage23 = weaponComponent22.getHitRate();
    int i24 = weaponComponent22.getIntegrityDecrementOnHit();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(integrity2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(percentage5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(tagset_tag9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(weight11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(integrity14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(percentage23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i24 == 3);

  }

  @Test
  public void test217() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test217"); }

    org.mafagafogigante.dungeon.entity.creatures.CreaturePresetFactory[] creaturePresetFactory_array0 = new org.mafagafogigante.dungeon.entity.creatures.CreaturePresetFactory[] {  };
    org.mafagafogigante.dungeon.entity.creatures.CreatureFactory creatureFactory1 = new org.mafagafogigante.dungeon.entity.creatures.CreatureFactory(creaturePresetFactory_array0);
    org.mafagafogigante.dungeon.entity.creatures.CreatureFactory creatureFactory2 = new org.mafagafogigante.dungeon.entity.creatures.CreatureFactory(creaturePresetFactory_array0);
    org.mafagafogigante.dungeon.entity.creatures.CorpseItemPresetFactory corpseItemPresetFactory3 = new org.mafagafogigante.dungeon.entity.creatures.CorpseItemPresetFactory(creatureFactory2);
    java.util.Collection<org.mafagafogigante.dungeon.entity.items.ItemPreset> collection_itemPreset4 = corpseItemPresetFactory3.getItemPresets();
    java.util.Collection<org.mafagafogigante.dungeon.entity.items.ItemPreset> collection_itemPreset5 = corpseItemPresetFactory3.getItemPresets();
    org.mafagafogigante.dungeon.entity.creatures.CreaturePresetFactory[] creaturePresetFactory_array6 = new org.mafagafogigante.dungeon.entity.creatures.CreaturePresetFactory[] {  };
    org.mafagafogigante.dungeon.entity.creatures.CreatureFactory creatureFactory7 = new org.mafagafogigante.dungeon.entity.creatures.CreatureFactory(creaturePresetFactory_array6);
    org.mafagafogigante.dungeon.entity.creatures.CreatureFactory creatureFactory8 = new org.mafagafogigante.dungeon.entity.creatures.CreatureFactory(creaturePresetFactory_array6);
    org.mafagafogigante.dungeon.entity.creatures.CorpseItemPresetFactory corpseItemPresetFactory9 = new org.mafagafogigante.dungeon.entity.creatures.CorpseItemPresetFactory(creatureFactory8);
    org.mafagafogigante.dungeon.entity.creatures.CreaturePresetFactory[] creaturePresetFactory_array10 = new org.mafagafogigante.dungeon.entity.creatures.CreaturePresetFactory[] {  };
    org.mafagafogigante.dungeon.entity.creatures.CreatureFactory creatureFactory11 = new org.mafagafogigante.dungeon.entity.creatures.CreatureFactory(creaturePresetFactory_array10);
    org.mafagafogigante.dungeon.entity.creatures.CreatureFactory creatureFactory12 = new org.mafagafogigante.dungeon.entity.creatures.CreatureFactory(creaturePresetFactory_array10);
    org.mafagafogigante.dungeon.entity.creatures.CorpseItemPresetFactory corpseItemPresetFactory13 = new org.mafagafogigante.dungeon.entity.creatures.CorpseItemPresetFactory(creatureFactory12);
    org.mafagafogigante.dungeon.entity.items.ItemPresetFactory[] itemPresetFactory_array14 = new org.mafagafogigante.dungeon.entity.items.ItemPresetFactory[] { corpseItemPresetFactory3, corpseItemPresetFactory9, corpseItemPresetFactory13 };
    org.mafagafogigante.dungeon.entity.items.ItemFactory itemFactory15 = new org.mafagafogigante.dungeon.entity.items.ItemFactory(itemPresetFactory_array14);
    org.mafagafogigante.dungeon.game.Id id16 = null;
    org.mafagafogigante.dungeon.date.Date date20 = new org.mafagafogigante.dungeon.date.Date(10L, 100L, 100L);
    org.mafagafogigante.dungeon.date.Date date24 = new org.mafagafogigante.dungeon.date.Date(10L, 100L, 100L);
    int i25 = date20.compareTo(date24);
    org.mafagafogigante.dungeon.game.PartOfDay partOfDay26 = org.mafagafogigante.dungeon.game.PartOfDay.getCorrespondingConstant(date20);
    long long27 = date20.getHour();
    // The following exception was thrown during execution in test generation
    try {
    org.mafagafogigante.dungeon.entity.items.Item item28 = itemFactory15.makeItem(id16, date20);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(creaturePresetFactory_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection_itemPreset4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection_itemPreset5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(creaturePresetFactory_array6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(creaturePresetFactory_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(itemPresetFactory_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == 0);
    org.junit.Assert.assertTrue("'" + partOfDay26 + "' != '" + org.mafagafogigante.dungeon.game.PartOfDay.MIDNIGHT + "'", partOfDay26.equals(org.mafagafogigante.dungeon.game.PartOfDay.MIDNIGHT));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long27 == 0L);

  }

  @Test
  public void test218() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test218"); }

    org.mafagafogigante.dungeon.util.ShuffledRange shuffledRange2 = new org.mafagafogigante.dungeon.util.ShuffledRange(57600, 46719);

  }

  @Test
  public void test219() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test219"); }

    org.mafagafogigante.dungeon.date.Date date3 = new org.mafagafogigante.dungeon.date.Date(10L, 100L, 100L);
    org.mafagafogigante.dungeon.date.Date date7 = new org.mafagafogigante.dungeon.date.Date(10L, 100L, 100L);
    int i8 = date3.compareTo(date7);
    long long9 = date7.getDay();
    org.mafagafogigante.dungeon.game.PartOfDay partOfDay10 = org.mafagafogigante.dungeon.game.PartOfDay.NIGHT;
    int i11 = org.mafagafogigante.dungeon.game.PartOfDay.getSecondsToNext(date7, partOfDay10);
    long long12 = date7.getYear();
    long long13 = date7.getDay();
    org.mafagafogigante.dungeon.date.Date date17 = new org.mafagafogigante.dungeon.date.Date((long)97, (long)(byte)-1, (long)'#');
    org.mafagafogigante.dungeon.stats.BattleStatistics battleStatistics18 = new org.mafagafogigante.dungeon.stats.BattleStatistics();
    org.mafagafogigante.dungeon.achievements.BattleStatisticsRequirement battleStatisticsRequirement19 = null;
    boolean b20 = battleStatistics18.satisfies(battleStatisticsRequirement19);
    java.lang.String str21 = battleStatistics18.toString();
    org.mafagafogigante.dungeon.achievements.BattleStatisticsQuery battleStatisticsQuery22 = new org.mafagafogigante.dungeon.achievements.BattleStatisticsQuery();
    org.mafagafogigante.dungeon.achievements.BattleStatisticsRequirement battleStatisticsRequirement24 = new org.mafagafogigante.dungeon.achievements.BattleStatisticsRequirement(battleStatisticsQuery22, (int)(byte)100);
    boolean b25 = battleStatistics18.satisfies(battleStatisticsRequirement24);
    org.mafagafogigante.dungeon.util.CounterMap<org.mafagafogigante.dungeon.stats.CauseOfDeath> countermap_causeOfDeath26 = battleStatistics18.getKillsByCauseOfDeath();
    org.mafagafogigante.dungeon.util.CounterMap<org.mafagafogigante.dungeon.stats.CauseOfDeath> countermap_causeOfDeath27 = battleStatistics18.getKillsByCauseOfDeath();
    boolean b28 = date17.equals((java.lang.Object)countermap_causeOfDeath27);
    org.mafagafogigante.dungeon.date.DungeonTimeUnit dungeonTimeUnit30 = org.mafagafogigante.dungeon.date.DungeonTimeUnit.YEAR;
    org.mafagafogigante.dungeon.date.Date date31 = date17.plus(45056, dungeonTimeUnit30);
    org.mafagafogigante.dungeon.date.Duration duration32 = new org.mafagafogigante.dungeon.date.Duration(date7, date31);
    org.mafagafogigante.dungeon.date.Date date36 = new org.mafagafogigante.dungeon.date.Date(10L, 100L, 100L);
    org.mafagafogigante.dungeon.date.Date date40 = new org.mafagafogigante.dungeon.date.Date(10L, 100L, 100L);
    int i41 = date36.compareTo(date40);
    org.mafagafogigante.dungeon.game.PartOfDay partOfDay42 = org.mafagafogigante.dungeon.game.PartOfDay.getCorrespondingConstant(date36);
    java.lang.String[] str_array48 = new java.lang.String[] { "hi!", "visibilityCriteria=VisibilityCriteria{[]}", "visibilityCriteria=VisibilityCriteria{[]}", "Damaged", "hi!" };
    org.mafagafogigante.dungeon.util.Table table49 = new org.mafagafogigante.dungeon.util.Table(str_array48);
    java.util.List<org.mafagafogigante.dungeon.game.ColoredString> list_coloredString50 = table49.toColoredStringList();
    org.mafagafogigante.dungeon.game.ColoredString coloredString51 = org.mafagafogigante.dungeon.game.Random.select(list_coloredString50);
    boolean b52 = date36.equals((java.lang.Object)coloredString51);
    org.mafagafogigante.dungeon.date.Date date56 = new org.mafagafogigante.dungeon.date.Date(10L, 100L, 100L);
    org.mafagafogigante.dungeon.date.Date date60 = new org.mafagafogigante.dungeon.date.Date(10L, 100L, 100L);
    int i61 = date56.compareTo(date60);
    org.mafagafogigante.dungeon.game.PartOfDay partOfDay62 = org.mafagafogigante.dungeon.game.PartOfDay.getCorrespondingConstant(date56);
    long long63 = date56.getYear();
    org.mafagafogigante.dungeon.date.Date date67 = new org.mafagafogigante.dungeon.date.Date(10L, 100L, 100L);
    org.mafagafogigante.dungeon.date.Date date71 = new org.mafagafogigante.dungeon.date.Date(10L, 100L, 100L);
    int i72 = date67.compareTo(date71);
    long long73 = date67.getYear();
    int i74 = date56.compareTo(date67);
    org.mafagafogigante.dungeon.date.Duration duration75 = new org.mafagafogigante.dungeon.date.Duration(date36, date67);
    java.lang.String str76 = duration75.toString();
    org.mafagafogigante.dungeon.entity.items.ItemPreset itemPreset77 = new org.mafagafogigante.dungeon.entity.items.ItemPreset();
    org.mafagafogigante.dungeon.entity.Integrity integrity78 = itemPreset77.getIntegrity();
    org.mafagafogigante.dungeon.entity.Integrity integrity79 = null;
    itemPreset77.setIntegrity(integrity79);
    org.mafagafogigante.dungeon.util.Percentage percentage81 = itemPreset77.getVisibility();
    boolean b82 = itemPreset77.isUnique();
    org.mafagafogigante.dungeon.entity.Weight weight84 = org.mafagafogigante.dungeon.entity.Weight.newInstance((double)(byte)-1);
    org.mafagafogigante.dungeon.entity.Weight weight85 = org.mafagafogigante.dungeon.entity.Weight.ZERO;
    org.mafagafogigante.dungeon.entity.Weight weight86 = weight84.add(weight85);
    java.lang.String str87 = weight86.toString();
    itemPreset77.setWeight(weight86);
    boolean b89 = duration75.equals((java.lang.Object)weight86);
    long long90 = duration75.getSeconds();
    int i91 = duration32.compareTo(duration75);
    long long92 = duration32.getSeconds();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long9 == 10L);
    org.junit.Assert.assertTrue("'" + partOfDay10 + "' != '" + org.mafagafogigante.dungeon.game.PartOfDay.NIGHT + "'", partOfDay10.equals(org.mafagafogigante.dungeon.game.PartOfDay.NIGHT));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 3600);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long12 == 10L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long13 == 10L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "BattleStatistics{records=CounterMap{map={}}}"+ "'", str21.equals("BattleStatistics{records=CounterMap{map={}}}"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(countermap_causeOfDeath26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(countermap_causeOfDeath27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == false);
    org.junit.Assert.assertTrue("'" + dungeonTimeUnit30 + "' != '" + org.mafagafogigante.dungeon.date.DungeonTimeUnit.YEAR + "'", dungeonTimeUnit30.equals(org.mafagafogigante.dungeon.date.DungeonTimeUnit.YEAR));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(date31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i41 == 0);
    org.junit.Assert.assertTrue("'" + partOfDay42 + "' != '" + org.mafagafogigante.dungeon.game.PartOfDay.MIDNIGHT + "'", partOfDay42.equals(org.mafagafogigante.dungeon.game.PartOfDay.MIDNIGHT));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_coloredString50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(coloredString51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i61 == 0);
    org.junit.Assert.assertTrue("'" + partOfDay62 + "' != '" + org.mafagafogigante.dungeon.game.PartOfDay.MIDNIGHT + "'", partOfDay62.equals(org.mafagafogigante.dungeon.game.PartOfDay.MIDNIGHT));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long63 == 10L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i72 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long73 == 10L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i74 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str76 + "' != '" + "Less than a day"+ "'", str76.equals("Less than a day"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(integrity78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(percentage81);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b82 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(weight84);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(weight85);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(weight86);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str87 + "' != '" + "0 kg"+ "'", str87.equals("0 kg"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b89 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long90 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i91 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long92 == 390027744000L);

  }

  @Test
  public void test220() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test220"); }

    org.mafagafogigante.dungeon.stats.CauseOfDeath causeOfDeath0 = org.mafagafogigante.dungeon.stats.CauseOfDeath.getUnarmedCauseOfDeath();
    org.mafagafogigante.dungeon.achievements.BattleStatisticsQuery battleStatisticsQuery1 = new org.mafagafogigante.dungeon.achievements.BattleStatisticsQuery();
    battleStatisticsQuery1.setType("Damaged");
    battleStatisticsQuery1.setType("");
    boolean b6 = causeOfDeath0.equals((java.lang.Object)battleStatisticsQuery1);
    org.mafagafogigante.dungeon.game.PartOfDay partOfDay7 = org.mafagafogigante.dungeon.game.PartOfDay.AFTERNOON;
    battleStatisticsQuery1.setPartOfDay(partOfDay7);
    org.mafagafogigante.dungeon.game.Name name9 = partOfDay7.getName();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(causeOfDeath0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    org.junit.Assert.assertTrue("'" + partOfDay7 + "' != '" + org.mafagafogigante.dungeon.game.PartOfDay.AFTERNOON + "'", partOfDay7.equals(org.mafagafogigante.dungeon.game.PartOfDay.AFTERNOON));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(name9);

  }

  @Test
  public void test221() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test221"); }

    org.mafagafogigante.dungeon.entity.Entity[] entity_array0 = new org.mafagafogigante.dungeon.entity.Entity[] {  };
    java.util.ArrayList<org.mafagafogigante.dungeon.entity.Entity> arraylist_entity1 = new java.util.ArrayList<org.mafagafogigante.dungeon.entity.Entity>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.mafagafogigante.dungeon.entity.Entity>)arraylist_entity1, entity_array0);
    org.mafagafogigante.dungeon.entity.Luminosity luminosity3 = org.mafagafogigante.dungeon.entity.Luminosity.resultantLuminosity((java.util.Collection<org.mafagafogigante.dungeon.entity.Entity>)arraylist_entity1);
    org.mafagafogigante.dungeon.entity.Luminosity luminosity4 = org.mafagafogigante.dungeon.entity.Luminosity.resultantLuminosity((java.util.Collection<org.mafagafogigante.dungeon.entity.Entity>)arraylist_entity1);
    org.mafagafogigante.dungeon.entity.Luminosity luminosity5 = org.mafagafogigante.dungeon.entity.Luminosity.resultantLuminosity((java.util.Collection<org.mafagafogigante.dungeon.entity.Entity>)arraylist_entity1);
    org.mafagafogigante.dungeon.entity.Luminosity luminosity6 = org.mafagafogigante.dungeon.entity.Luminosity.resultantLuminosity((java.util.Collection<org.mafagafogigante.dungeon.entity.Entity>)arraylist_entity1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(entity_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(luminosity3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(luminosity4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(luminosity5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(luminosity6);

  }

  @Test
  public void test222() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test222"); }

    org.mafagafogigante.dungeon.game.MinimumBoundingRectangle minimumBoundingRectangle2 = new org.mafagafogigante.dungeon.game.MinimumBoundingRectangle(17518, 45056);
    int i3 = minimumBoundingRectangle2.getWidth();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 17518);

  }

  @Test
  public void test223() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test223"); }

    org.mafagafogigante.dungeon.game.Id id0 = null;
    org.mafagafogigante.dungeon.achievements.BattleStatisticsQuery battleStatisticsQuery2 = new org.mafagafogigante.dungeon.achievements.BattleStatisticsQuery();
    org.mafagafogigante.dungeon.stats.CauseOfDeath causeOfDeath3 = org.mafagafogigante.dungeon.stats.CauseOfDeath.getUnarmedCauseOfDeath();
    battleStatisticsQuery2.setCauseOfDeath(causeOfDeath3);
    org.mafagafogigante.dungeon.game.PartOfDay partOfDay5 = org.mafagafogigante.dungeon.game.PartOfDay.NIGHT;
    org.mafagafogigante.dungeon.stats.BattleRecord battleRecord6 = new org.mafagafogigante.dungeon.stats.BattleRecord(id0, "", causeOfDeath3, partOfDay5);
    java.lang.String str7 = battleRecord6.getType();
    org.mafagafogigante.dungeon.game.Id id8 = battleRecord6.getId();
    org.mafagafogigante.dungeon.stats.CauseOfDeath causeOfDeath9 = battleRecord6.getCauseOfDeath();
    boolean b11 = battleRecord6.equals((java.lang.Object)"773.2 GiB");
    org.mafagafogigante.dungeon.stats.WorldStatistics worldStatistics12 = new org.mafagafogigante.dungeon.stats.WorldStatistics();
    org.mafagafogigante.dungeon.util.CounterMap<java.lang.String> countermap_str13 = worldStatistics12.getSpawnCounter();
    java.util.Set<java.lang.String> set_str14 = countermap_str13.keySet();
    int i16 = countermap_str13.getCounter("Unarmed : UNARMED");
    boolean b17 = battleRecord6.equals((java.lang.Object)i16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(causeOfDeath3);
    org.junit.Assert.assertTrue("'" + partOfDay5 + "' != '" + org.mafagafogigante.dungeon.game.PartOfDay.NIGHT + "'", partOfDay5.equals(org.mafagafogigante.dungeon.game.PartOfDay.NIGHT));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + ""+ "'", str7.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(id8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(causeOfDeath9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(countermap_str13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_str14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);

  }

  @Test
  public void test224() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test224"); }

    org.mafagafogigante.dungeon.entity.items.ItemPreset itemPreset0 = new org.mafagafogigante.dungeon.entity.items.ItemPreset();
    org.mafagafogigante.dungeon.entity.Integrity integrity1 = itemPreset0.getIntegrity();
    itemPreset0.setIntegrityDecrementOnEat((-1));
    org.mafagafogigante.dungeon.entity.Weight weight4 = itemPreset0.getWeight();
    itemPreset0.setDrinkableHealing((int)(byte)1);
    org.mafagafogigante.dungeon.entity.items.ItemPreset itemPreset7 = new org.mafagafogigante.dungeon.entity.items.ItemPreset();
    org.mafagafogigante.dungeon.entity.Integrity integrity8 = itemPreset7.getIntegrity();
    org.mafagafogigante.dungeon.entity.Integrity integrity9 = null;
    itemPreset7.setIntegrity(integrity9);
    org.mafagafogigante.dungeon.util.Percentage percentage11 = itemPreset7.getVisibility();
    java.lang.String str12 = itemPreset7.getType();
    itemPreset7.setIntegrityDecrementOnHit((int)(short)100);
    org.mafagafogigante.dungeon.util.Percentage percentage16 = new org.mafagafogigante.dungeon.util.Percentage((double)57);
    itemPreset7.setVisibility(percentage16);
    itemPreset0.setVisibility(percentage16);
    org.mafagafogigante.dungeon.entity.items.Item.Tag tag19 = org.mafagafogigante.dungeon.entity.items.Item.Tag.REPAIRABLE;
    boolean b20 = itemPreset0.hasTag(tag19);
    itemPreset0.setUnique(false);
    org.mafagafogigante.dungeon.entity.Integrity integrity25 = new org.mafagafogigante.dungeon.entity.Integrity(100, 0);
    org.mafagafogigante.dungeon.entity.Integrity integrity26 = new org.mafagafogigante.dungeon.entity.Integrity(integrity25);
    itemPreset0.setIntegrity(integrity26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(integrity1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(weight4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(integrity8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(percentage11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str12);
    org.junit.Assert.assertTrue("'" + tag19 + "' != '" + org.mafagafogigante.dungeon.entity.items.Item.Tag.REPAIRABLE + "'", tag19.equals(org.mafagafogigante.dungeon.entity.items.Item.Tag.REPAIRABLE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);

  }

  @Test
  public void test225() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test225"); }

    org.mafagafogigante.dungeon.date.Date date3 = new org.mafagafogigante.dungeon.date.Date(10L, 100L, 100L);
    org.mafagafogigante.dungeon.date.Date date7 = new org.mafagafogigante.dungeon.date.Date(10L, 100L, 100L);
    int i8 = date3.compareTo(date7);
    java.lang.String str9 = date3.toTimeString();
    org.mafagafogigante.dungeon.date.Date date13 = new org.mafagafogigante.dungeon.date.Date(10L, 100L, 100L);
    org.mafagafogigante.dungeon.date.Date date17 = new org.mafagafogigante.dungeon.date.Date(10L, 100L, 100L);
    int i18 = date13.compareTo(date17);
    org.mafagafogigante.dungeon.game.PartOfDay partOfDay19 = org.mafagafogigante.dungeon.game.PartOfDay.getCorrespondingConstant(date13);
    long long20 = date13.getYear();
    org.mafagafogigante.dungeon.date.Date date24 = new org.mafagafogigante.dungeon.date.Date(10L, 100L, 100L);
    org.mafagafogigante.dungeon.date.Date date28 = new org.mafagafogigante.dungeon.date.Date(10L, 100L, 100L);
    int i29 = date24.compareTo(date28);
    long long30 = date24.getYear();
    int i31 = date13.compareTo(date24);
    java.lang.String str32 = date24.toDateString();
    int i33 = date3.compareTo(date24);
    java.lang.String str34 = date3.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "00:00:00"+ "'", str9.equals("00:00:00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 0);
    org.junit.Assert.assertTrue("'" + partOfDay19 + "' != '" + org.mafagafogigante.dungeon.game.PartOfDay.MIDNIGHT + "'", partOfDay19.equals(org.mafagafogigante.dungeon.game.PartOfDay.MIDNIGHT));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long20 == 10L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i29 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long30 == 10L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i31 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str32 + "' != '" + "day 10 of month 10 of the year 10"+ "'", str32.equals("day 10 of month 10 of the year 10"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i33 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str34 + "' != '" + "10-10-10 00:00:00"+ "'", str34.equals("10-10-10 00:00:00"));

  }

  @Test
  public void test226() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test226"); }

    org.mafagafogigante.dungeon.stats.WorldStatistics worldStatistics0 = new org.mafagafogigante.dungeon.stats.WorldStatistics();
    org.mafagafogigante.dungeon.util.CounterMap<java.lang.String> countermap_str1 = worldStatistics0.getSpawnCounter();
    worldStatistics0.addSpawn("Unarmed : UNARMED");
    org.mafagafogigante.dungeon.util.CounterMap<java.lang.String> countermap_str4 = worldStatistics0.getSpawnCounter();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(countermap_str1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(countermap_str4);

  }

  @Test
  public void test227() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test227"); }

    org.mafagafogigante.dungeon.game.MinimumBoundingRectangle minimumBoundingRectangle2 = new org.mafagafogigante.dungeon.game.MinimumBoundingRectangle(85, 32);
    int i3 = minimumBoundingRectangle2.getWidth();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 85);

  }

  @Test
  public void test228() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test228"); }

    org.mafagafogigante.dungeon.schema.JsonRule jsonRule2 = org.mafagafogigante.dungeon.schema.rules.JsonRuleFactory.makeBoundDoubleRule((double)46719, 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonRule2);

  }

  @Test
  public void test229() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test229"); }

    org.mafagafogigante.dungeon.entity.creatures.Creature creature1 = null;
    org.mafagafogigante.dungeon.entity.creatures.CreatureHealth creatureHealth2 = org.mafagafogigante.dungeon.entity.creatures.CreatureHealth.makeCreatureHealth(100, creature1);
    boolean b3 = creatureHealth2.isAlive();
    java.lang.String str4 = creatureHealth2.toString();
    org.mafagafogigante.dungeon.util.Percentage percentage5 = creatureHealth2.toPercentage();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(creatureHealth2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "CreatureHealth{integrity=100/100}"+ "'", str4.equals("CreatureHealth{integrity=100/100}"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(percentage5);

  }

  @Test
  public void test230() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test230"); }

    org.mafagafogigante.dungeon.util.CounterMap<org.mafagafogigante.dungeon.stats.WorldStatistics> countermap_worldStatistics0 = new org.mafagafogigante.dungeon.util.CounterMap<org.mafagafogigante.dungeon.stats.WorldStatistics>();
    org.mafagafogigante.dungeon.stats.WorldStatistics worldStatistics1 = new org.mafagafogigante.dungeon.stats.WorldStatistics();
    int i2 = worldStatistics1.getLocationCount();
    org.mafagafogigante.dungeon.util.CounterMap<java.lang.String> countermap_str3 = worldStatistics1.getSpawnCounter();
    countermap_worldStatistics0.incrementCounter(worldStatistics1);
    org.mafagafogigante.dungeon.util.CounterMap<org.mafagafogigante.dungeon.stats.WorldStatistics> countermap_worldStatistics5 = new org.mafagafogigante.dungeon.util.CounterMap<org.mafagafogigante.dungeon.stats.WorldStatistics>();
    org.mafagafogigante.dungeon.stats.WorldStatistics worldStatistics6 = new org.mafagafogigante.dungeon.stats.WorldStatistics();
    int i7 = worldStatistics6.getLocationCount();
    org.mafagafogigante.dungeon.util.CounterMap<java.lang.String> countermap_str8 = worldStatistics6.getSpawnCounter();
    countermap_worldStatistics5.incrementCounter(worldStatistics6);
    int i10 = countermap_worldStatistics0.getCounter(worldStatistics6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(countermap_str3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(countermap_str8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 0);

  }

  @Test
  public void test231() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test231"); }

    org.mafagafogigante.dungeon.stats.Statistics statistics0 = null;
    org.mafagafogigante.dungeon.achievements.AchievementTracker achievementTracker1 = new org.mafagafogigante.dungeon.achievements.AchievementTracker(statistics0);
    org.mafagafogigante.dungeon.achievements.AchievementStore achievementStore2 = null;
    org.mafagafogigante.dungeon.date.Date date6 = new org.mafagafogigante.dungeon.date.Date(10L, 100L, 100L);
    org.mafagafogigante.dungeon.date.Date date10 = new org.mafagafogigante.dungeon.date.Date(10L, 100L, 100L);
    int i11 = date6.compareTo(date10);
    org.mafagafogigante.dungeon.game.PartOfDay partOfDay12 = org.mafagafogigante.dungeon.game.PartOfDay.getCorrespondingConstant(date6);
    long long13 = date6.getYear();
    long long14 = date6.getMonth();
    long long15 = date6.getDay();
    org.mafagafogigante.dungeon.world.Weather weather16 = new org.mafagafogigante.dungeon.world.Weather(date6);
    org.mafagafogigante.dungeon.date.Date date20 = new org.mafagafogigante.dungeon.date.Date(10L, 100L, 100L);
    org.mafagafogigante.dungeon.date.Date date24 = new org.mafagafogigante.dungeon.date.Date(10L, 100L, 100L);
    int i25 = date20.compareTo(date24);
    org.mafagafogigante.dungeon.game.PartOfDay partOfDay26 = org.mafagafogigante.dungeon.game.PartOfDay.getCorrespondingConstant(date20);
    java.lang.String[] str_array32 = new java.lang.String[] { "hi!", "visibilityCriteria=VisibilityCriteria{[]}", "visibilityCriteria=VisibilityCriteria{[]}", "Damaged", "hi!" };
    org.mafagafogigante.dungeon.util.Table table33 = new org.mafagafogigante.dungeon.util.Table(str_array32);
    java.util.List<org.mafagafogigante.dungeon.game.ColoredString> list_coloredString34 = table33.toColoredStringList();
    org.mafagafogigante.dungeon.game.ColoredString coloredString35 = org.mafagafogigante.dungeon.game.Random.select(list_coloredString34);
    boolean b36 = date20.equals((java.lang.Object)coloredString35);
    org.mafagafogigante.dungeon.date.Date date40 = new org.mafagafogigante.dungeon.date.Date(10L, 100L, 100L);
    org.mafagafogigante.dungeon.date.Date date44 = new org.mafagafogigante.dungeon.date.Date(10L, 100L, 100L);
    int i45 = date40.compareTo(date44);
    org.mafagafogigante.dungeon.game.PartOfDay partOfDay46 = org.mafagafogigante.dungeon.game.PartOfDay.getCorrespondingConstant(date40);
    long long47 = date40.getYear();
    org.mafagafogigante.dungeon.date.Date date51 = new org.mafagafogigante.dungeon.date.Date(10L, 100L, 100L);
    org.mafagafogigante.dungeon.date.Date date55 = new org.mafagafogigante.dungeon.date.Date(10L, 100L, 100L);
    int i56 = date51.compareTo(date55);
    long long57 = date51.getYear();
    int i58 = date40.compareTo(date51);
    org.mafagafogigante.dungeon.date.Duration duration59 = new org.mafagafogigante.dungeon.date.Duration(date20, date51);
    org.mafagafogigante.dungeon.date.Date date64 = new org.mafagafogigante.dungeon.date.Date(10L, 100L, 100L);
    org.mafagafogigante.dungeon.date.Date date68 = new org.mafagafogigante.dungeon.date.Date(10L, 100L, 100L);
    int i69 = date64.compareTo(date68);
    org.mafagafogigante.dungeon.game.PartOfDay partOfDay70 = org.mafagafogigante.dungeon.game.PartOfDay.getCorrespondingConstant(date64);
    long long71 = date64.getYear();
    org.mafagafogigante.dungeon.date.Date date75 = new org.mafagafogigante.dungeon.date.Date(10L, 100L, 100L);
    org.mafagafogigante.dungeon.date.Date date79 = new org.mafagafogigante.dungeon.date.Date(10L, 100L, 100L);
    int i80 = date75.compareTo(date79);
    long long81 = date75.getYear();
    int i82 = date64.compareTo(date75);
    org.mafagafogigante.dungeon.date.DungeonTimeUnit dungeonTimeUnit84 = org.mafagafogigante.dungeon.date.DungeonTimeUnit.HOUR;
    org.mafagafogigante.dungeon.date.Date date85 = date75.minus(35, dungeonTimeUnit84);
    org.mafagafogigante.dungeon.date.Date date86 = date51.plus(3, dungeonTimeUnit84);
    long long87 = date86.getMonth();
    org.mafagafogigante.dungeon.world.Weather weather88 = new org.mafagafogigante.dungeon.world.Weather(date86);
    org.mafagafogigante.dungeon.game.PartOfDay partOfDay89 = org.mafagafogigante.dungeon.game.PartOfDay.getCorrespondingConstant(date86);
    java.lang.String str90 = date86.toTimeString();
    org.mafagafogigante.dungeon.world.WeatherCondition weatherCondition91 = weather16.getCurrentCondition(date86);
    // The following exception was thrown during execution in test generation
    try {
    achievementTracker1.update(achievementStore2, date86);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 0);
    org.junit.Assert.assertTrue("'" + partOfDay12 + "' != '" + org.mafagafogigante.dungeon.game.PartOfDay.MIDNIGHT + "'", partOfDay12.equals(org.mafagafogigante.dungeon.game.PartOfDay.MIDNIGHT));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long13 == 10L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long14 == 10L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long15 == 10L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == 0);
    org.junit.Assert.assertTrue("'" + partOfDay26 + "' != '" + org.mafagafogigante.dungeon.game.PartOfDay.MIDNIGHT + "'", partOfDay26.equals(org.mafagafogigante.dungeon.game.PartOfDay.MIDNIGHT));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_coloredString34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(coloredString35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i45 == 0);
    org.junit.Assert.assertTrue("'" + partOfDay46 + "' != '" + org.mafagafogigante.dungeon.game.PartOfDay.MIDNIGHT + "'", partOfDay46.equals(org.mafagafogigante.dungeon.game.PartOfDay.MIDNIGHT));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long47 == 10L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i56 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long57 == 10L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i58 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i69 == 0);
    org.junit.Assert.assertTrue("'" + partOfDay70 + "' != '" + org.mafagafogigante.dungeon.game.PartOfDay.MIDNIGHT + "'", partOfDay70.equals(org.mafagafogigante.dungeon.game.PartOfDay.MIDNIGHT));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long71 == 10L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i80 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long81 == 10L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i82 == 0);
    org.junit.Assert.assertTrue("'" + dungeonTimeUnit84 + "' != '" + org.mafagafogigante.dungeon.date.DungeonTimeUnit.HOUR + "'", dungeonTimeUnit84.equals(org.mafagafogigante.dungeon.date.DungeonTimeUnit.HOUR));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(date85);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(date86);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long87 == 10L);
    org.junit.Assert.assertTrue("'" + partOfDay89 + "' != '" + org.mafagafogigante.dungeon.game.PartOfDay.NIGHT + "'", partOfDay89.equals(org.mafagafogigante.dungeon.game.PartOfDay.NIGHT));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str90 + "' != '" + "03:00:00"+ "'", str90.equals("03:00:00"));
    org.junit.Assert.assertTrue("'" + weatherCondition91 + "' != '" + org.mafagafogigante.dungeon.world.WeatherCondition.OVERCAST + "'", weatherCondition91.equals(org.mafagafogigante.dungeon.world.WeatherCondition.OVERCAST));

  }

  @Test
  public void test232() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test232"); }

    org.mafagafogigante.dungeon.entity.Integrity integrity2 = new org.mafagafogigante.dungeon.entity.Integrity(1, 0);
    boolean b3 = integrity2.isMaximum();
    org.mafagafogigante.dungeon.entity.items.Item item4 = null;
    org.mafagafogigante.dungeon.entity.items.ItemIntegrity itemIntegrity5 = org.mafagafogigante.dungeon.entity.items.ItemIntegrity.makeItemIntegrity(integrity2, item4);
    org.mafagafogigante.dungeon.util.Percentage percentage6 = itemIntegrity5.toPercentage();
    boolean b7 = itemIntegrity5.isPerfect();
    boolean b8 = itemIntegrity5.isBroken();
    int i9 = itemIntegrity5.getMaximum();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(itemIntegrity5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(percentage6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 1);

  }

  @Test
  public void test233() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test233"); }

    org.mafagafogigante.dungeon.entity.creatures.CreaturePresetFactory[] creaturePresetFactory_array0 = new org.mafagafogigante.dungeon.entity.creatures.CreaturePresetFactory[] {  };
    org.mafagafogigante.dungeon.entity.creatures.CreatureFactory creatureFactory1 = new org.mafagafogigante.dungeon.entity.creatures.CreatureFactory(creaturePresetFactory_array0);
    org.mafagafogigante.dungeon.date.Date date5 = new org.mafagafogigante.dungeon.date.Date(10L, 100L, 100L);
    org.mafagafogigante.dungeon.date.Date date9 = new org.mafagafogigante.dungeon.date.Date(10L, 100L, 100L);
    int i10 = date5.compareTo(date9);
    org.mafagafogigante.dungeon.game.PartOfDay partOfDay11 = org.mafagafogigante.dungeon.game.PartOfDay.getCorrespondingConstant(date5);
    long long12 = date5.getYear();
    org.mafagafogigante.dungeon.date.Date date16 = new org.mafagafogigante.dungeon.date.Date(10L, 100L, 100L);
    org.mafagafogigante.dungeon.date.Date date20 = new org.mafagafogigante.dungeon.date.Date(10L, 100L, 100L);
    int i21 = date16.compareTo(date20);
    long long22 = date16.getYear();
    int i23 = date5.compareTo(date16);
    org.mafagafogigante.dungeon.date.Date date27 = new org.mafagafogigante.dungeon.date.Date(10L, 100L, 100L);
    org.mafagafogigante.dungeon.date.Date date31 = new org.mafagafogigante.dungeon.date.Date(10L, 100L, 100L);
    int i32 = date27.compareTo(date31);
    long long33 = date27.getYear();
    int i34 = date5.compareTo(date27);
    org.mafagafogigante.dungeon.game.PartOfDay partOfDay35 = org.mafagafogigante.dungeon.game.PartOfDay.getCorrespondingConstant(date5);
    org.mafagafogigante.dungeon.game.World world36 = null;
    org.mafagafogigante.dungeon.stats.Statistics statistics37 = new org.mafagafogigante.dungeon.stats.Statistics();
    statistics37.writeStatistics();
    statistics37.writeStatistics();
    statistics37.writeStatistics();
    org.mafagafogigante.dungeon.commands.IssuedCommand issuedCommand42 = new org.mafagafogigante.dungeon.commands.IssuedCommand("BattleStatistics{records=CounterMap{map={}}}");
    org.mafagafogigante.dungeon.commands.PreparedIssuedCommand preparedIssuedCommand43 = org.mafagafogigante.dungeon.commands.IssuedCommandProcessor.prepareIssuedCommand(issuedCommand42);
    statistics37.addCommand(issuedCommand42);
    statistics37.writeStatistics();
    // The following exception was thrown during execution in test generation
    try {
    org.mafagafogigante.dungeon.entity.creatures.Hero hero46 = creatureFactory1.makeHero(date5, world36, statistics37);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(creaturePresetFactory_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 0);
    org.junit.Assert.assertTrue("'" + partOfDay11 + "' != '" + org.mafagafogigante.dungeon.game.PartOfDay.MIDNIGHT + "'", partOfDay11.equals(org.mafagafogigante.dungeon.game.PartOfDay.MIDNIGHT));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long12 == 10L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long22 == 10L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i23 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i32 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long33 == 10L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i34 == 0);
    org.junit.Assert.assertTrue("'" + partOfDay35 + "' != '" + org.mafagafogigante.dungeon.game.PartOfDay.MIDNIGHT + "'", partOfDay35.equals(org.mafagafogigante.dungeon.game.PartOfDay.MIDNIGHT));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(preparedIssuedCommand43);

  }

  @Test
  public void test234() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test234"); }

    org.mafagafogigante.dungeon.date.Date date6 = new org.mafagafogigante.dungeon.date.Date((long)(byte)0, (long)0, (long)81, (long)10, 100L, (long)(short)1);
    java.lang.String str7 = date6.toDateString();
    org.mafagafogigante.dungeon.date.Date date11 = new org.mafagafogigante.dungeon.date.Date(10L, 100L, 100L);
    org.mafagafogigante.dungeon.date.Date date15 = new org.mafagafogigante.dungeon.date.Date(10L, 100L, 100L);
    int i16 = date11.compareTo(date15);
    org.mafagafogigante.dungeon.game.PartOfDay partOfDay17 = org.mafagafogigante.dungeon.game.PartOfDay.getCorrespondingConstant(date11);
    long long18 = date11.getYear();
    org.mafagafogigante.dungeon.date.Duration duration19 = new org.mafagafogigante.dungeon.date.Duration(date6, date11);
    org.mafagafogigante.dungeon.entity.Weight weight21 = org.mafagafogigante.dungeon.entity.Weight.newInstance((double)(short)100);
    boolean b22 = date11.equals((java.lang.Object)(short)100);
    long long23 = date11.getYear();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "day 10 of month 1 of the year 1"+ "'", str7.equals("day 10 of month 1 of the year 1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 0);
    org.junit.Assert.assertTrue("'" + partOfDay17 + "' != '" + org.mafagafogigante.dungeon.game.PartOfDay.MIDNIGHT + "'", partOfDay17.equals(org.mafagafogigante.dungeon.game.PartOfDay.MIDNIGHT));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long18 == 10L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(weight21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long23 == 10L);

  }

  @Test
  public void test235() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test235"); }

    org.mafagafogigante.dungeon.game.DungeonString dungeonString1 = new org.mafagafogigante.dungeon.game.DungeonString("hi!");
    java.lang.String[] str_array6 = new java.lang.String[] { "hi!", "Damaged", "BattleStatistics{records=CounterMap{map={}}}", "" };
    dungeonString1.append(str_array6);
    java.awt.Color color8 = null;
    dungeonString1.setColor(color8);
    java.lang.String str10 = dungeonString1.toString();
    java.lang.String[] str_array16 = new java.lang.String[] { "hi!", "visibilityCriteria=VisibilityCriteria{[]}", "visibilityCriteria=VisibilityCriteria{[]}", "Damaged", "hi!" };
    org.mafagafogigante.dungeon.util.Table table17 = new org.mafagafogigante.dungeon.util.Table(str_array16);
    org.mafagafogigante.dungeon.gui.WritingSpecifications writingSpecifications20 = new org.mafagafogigante.dungeon.gui.WritingSpecifications(false, 32);
    boolean b21 = writingSpecifications20.shouldWait();
    org.mafagafogigante.dungeon.io.Writer.write((org.mafagafogigante.dungeon.game.Writable)table17, writingSpecifications20);
    org.mafagafogigante.dungeon.io.Writer.write((org.mafagafogigante.dungeon.game.Writable)dungeonString1, writingSpecifications20);
    dungeonString1.resetColor();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "DungeonString{coloredStringList=[ColoredString{string='hi!hi!DamagedBattleStatistics{records=CounterMap{map={}}}', color=java.awt.Color[r=192,g=192,b=192]}], currentColor=null}"+ "'", str10.equals("DungeonString{coloredStringList=[ColoredString{string='hi!hi!DamagedBattleStatistics{records=CounterMap{map={}}}', color=java.awt.Color[r=192,g=192,b=192]}], currentColor=null}"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == true);

  }

  @Test
  public void test236() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test236"); }

    org.mafagafogigante.dungeon.game.Direction direction1 = org.mafagafogigante.dungeon.game.Direction.fromAbbreviation("CreatureHealth{integrity=43/100}");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(direction1);

  }

  @Test
  public void test237() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test237"); }

    org.mafagafogigante.dungeon.entity.items.Item[] item_array0 = new org.mafagafogigante.dungeon.entity.items.Item[] {  };
    java.util.ArrayList<org.mafagafogigante.dungeon.entity.items.Item> arraylist_item1 = new java.util.ArrayList<org.mafagafogigante.dungeon.entity.items.Item>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.mafagafogigante.dungeon.entity.items.Item>)arraylist_item1, item_array0);
    java.lang.String[] str_array8 = new java.lang.String[] { "CounterMap{map={}}", "User: Nicholas\nTime: 15:42:12\nDate: 2017-04-09\nJava: Java version 1.8.0_121 by Oracle Corporation\nHeap: Using 34.4 MiB out of the allocated 123.0 MiB\nOS: Windows 10 (amd64) 10.0", "hi!", "0 ms", "User: Nicholas\nTime: 15:42:12\nDate: 2017-04-09\nJava: Java version 1.8.0_121 by Oracle Corporation\nHeap: Using 41.5 MiB out of the allocated 154.5 MiB\nOS: Windows 10 (amd64) 10.0" };
    java.util.List<org.mafagafogigante.dungeon.entity.items.Item> list_item9 = org.mafagafogigante.dungeon.entity.creatures.HeroUtils.findItems((java.util.List<org.mafagafogigante.dungeon.entity.items.Item>)arraylist_item1, str_array8);
    java.lang.String[] str_array15 = new java.lang.String[] { "hi!", "visibilityCriteria=VisibilityCriteria{[]}", "visibilityCriteria=VisibilityCriteria{[]}", "Damaged", "hi!" };
    org.mafagafogigante.dungeon.util.Table table16 = new org.mafagafogigante.dungeon.util.Table(str_array15);
    java.util.List<org.mafagafogigante.dungeon.entity.items.Item> list_item17 = org.mafagafogigante.dungeon.entity.creatures.HeroUtils.findItems(list_item9, str_array15);
    org.mafagafogigante.dungeon.util.Table table18 = new org.mafagafogigante.dungeon.util.Table(str_array15);
    // The following exception was thrown during execution in test generation
    try {
    org.mafagafogigante.dungeon.io.PoemWriter.parsePoemCommand(str_array15);
      org.junit.Assert.fail("Expected exception of type java.lang.NoClassDefFoundError");
    } catch (java.lang.NoClassDefFoundError e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(item_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_item9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_item17);

  }

  @Test
  public void test238() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test238"); }

    org.mafagafogigante.dungeon.entity.creatures.Creature creature1 = null;
    org.mafagafogigante.dungeon.entity.creatures.CreatureHealth creatureHealth2 = org.mafagafogigante.dungeon.entity.creatures.CreatureHealth.makeCreatureHealth(100, creature1);
    boolean b3 = creatureHealth2.isAlive();
    boolean b4 = creatureHealth2.isDead();
    creatureHealth2.decrementBy((int)(short)-1);
    org.mafagafogigante.dungeon.entity.creatures.HealthState healthState7 = creatureHealth2.getHealthState();
    creatureHealth2.decrementBy(57);
    java.lang.String str10 = creatureHealth2.toString();
    boolean b11 = creatureHealth2.isFull();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(creatureHealth2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    org.junit.Assert.assertTrue("'" + healthState7 + "' != '" + org.mafagafogigante.dungeon.entity.creatures.HealthState.UNINJURED + "'", healthState7.equals(org.mafagafogigante.dungeon.entity.creatures.HealthState.UNINJURED));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "CreatureHealth{integrity=43/100}"+ "'", str10.equals("CreatureHealth{integrity=43/100}"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);

  }

  @Test
  public void test239() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test239"); }

    org.mafagafogigante.dungeon.entity.items.Item[] item_array0 = new org.mafagafogigante.dungeon.entity.items.Item[] {  };
    java.util.ArrayList<org.mafagafogigante.dungeon.entity.items.Item> arraylist_item1 = new java.util.ArrayList<org.mafagafogigante.dungeon.entity.items.Item>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.mafagafogigante.dungeon.entity.items.Item>)arraylist_item1, item_array0);
    org.mafagafogigante.dungeon.game.DungeonString dungeonString4 = new org.mafagafogigante.dungeon.game.DungeonString("hi!");
    java.lang.String[] str_array9 = new java.lang.String[] { "hi!", "Damaged", "BattleStatistics{records=CounterMap{map={}}}", "" };
    dungeonString4.append(str_array9);
    java.util.List<org.mafagafogigante.dungeon.entity.items.Item> list_item11 = org.mafagafogigante.dungeon.entity.creatures.HeroUtils.findItems((java.util.List<org.mafagafogigante.dungeon.entity.items.Item>)arraylist_item1, str_array9);
    org.mafagafogigante.dungeon.game.DungeonString dungeonString13 = new org.mafagafogigante.dungeon.game.DungeonString("hi!");
    java.lang.String[] str_array18 = new java.lang.String[] { "hi!", "Damaged", "BattleStatistics{records=CounterMap{map={}}}", "" };
    dungeonString13.append(str_array18);
    java.lang.String[] str_array25 = new java.lang.String[] { "hi!", "visibilityCriteria=VisibilityCriteria{[]}", "visibilityCriteria=VisibilityCriteria{[]}", "Damaged", "hi!" };
    org.mafagafogigante.dungeon.util.Table table26 = new org.mafagafogigante.dungeon.util.Table(str_array25);
    dungeonString13.append(str_array25);
    java.util.List<org.mafagafogigante.dungeon.entity.items.Item> list_item28 = org.mafagafogigante.dungeon.entity.creatures.HeroUtils.findItems(list_item11, str_array25);
    org.mafagafogigante.dungeon.game.DungeonString dungeonString30 = new org.mafagafogigante.dungeon.game.DungeonString("hi!");
    java.lang.String[] str_array35 = new java.lang.String[] { "hi!", "Damaged", "BattleStatistics{records=CounterMap{map={}}}", "" };
    dungeonString30.append(str_array35);
    java.lang.String[] str_array42 = new java.lang.String[] { "hi!", "visibilityCriteria=VisibilityCriteria{[]}", "visibilityCriteria=VisibilityCriteria{[]}", "Damaged", "hi!" };
    org.mafagafogigante.dungeon.util.Table table43 = new org.mafagafogigante.dungeon.util.Table(str_array42);
    dungeonString30.append(str_array42);
    java.util.List<org.mafagafogigante.dungeon.entity.items.Item> list_item45 = org.mafagafogigante.dungeon.entity.creatures.HeroUtils.findItems(list_item11, str_array42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(item_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_item11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_item28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_item45);

  }

  @Test
  public void test240() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test240"); }

    org.mafagafogigante.dungeon.world.TimeVisibilityCriterion timeVisibilityCriterion2 = new org.mafagafogigante.dungeon.world.TimeVisibilityCriterion((int)'4', (int)(short)10);
    org.mafagafogigante.dungeon.world.VisibilityCriterion[] visibilityCriterion_array3 = new org.mafagafogigante.dungeon.world.VisibilityCriterion[] {  };
    org.mafagafogigante.dungeon.world.VisibilityCriteria visibilityCriteria4 = new org.mafagafogigante.dungeon.world.VisibilityCriteria(visibilityCriterion_array3);
    org.mafagafogigante.dungeon.entity.creatures.Creature creature5 = null;
    org.mafagafogigante.dungeon.entity.creatures.Observer observer6 = new org.mafagafogigante.dungeon.entity.creatures.Observer(creature5);
    boolean b7 = visibilityCriteria4.isMetBy(observer6);
    org.mafagafogigante.dungeon.world.VisibilityCriterion[] visibilityCriterion_array8 = new org.mafagafogigante.dungeon.world.VisibilityCriterion[] {  };
    org.mafagafogigante.dungeon.world.VisibilityCriteria visibilityCriteria9 = new org.mafagafogigante.dungeon.world.VisibilityCriteria(visibilityCriterion_array8);
    org.mafagafogigante.dungeon.entity.creatures.Creature creature10 = null;
    org.mafagafogigante.dungeon.entity.creatures.Observer observer11 = new org.mafagafogigante.dungeon.entity.creatures.Observer(creature10);
    boolean b12 = visibilityCriteria9.isMetBy(observer11);
    org.mafagafogigante.dungeon.entity.items.Item[] item_array13 = new org.mafagafogigante.dungeon.entity.items.Item[] {  };
    java.util.ArrayList<org.mafagafogigante.dungeon.entity.items.Item> arraylist_item14 = new java.util.ArrayList<org.mafagafogigante.dungeon.entity.items.Item>();
    boolean b15 = java.util.Collections.addAll((java.util.Collection<org.mafagafogigante.dungeon.entity.items.Item>)arraylist_item14, item_array13);
    org.mafagafogigante.dungeon.game.DungeonString dungeonString17 = new org.mafagafogigante.dungeon.game.DungeonString("hi!");
    java.lang.String[] str_array22 = new java.lang.String[] { "hi!", "Damaged", "BattleStatistics{records=CounterMap{map={}}}", "" };
    dungeonString17.append(str_array22);
    observer11.writeItemSight((java.util.List<org.mafagafogigante.dungeon.entity.items.Item>)arraylist_item14, dungeonString17);
    org.mafagafogigante.dungeon.entity.creatures.Creature[] creature_array25 = new org.mafagafogigante.dungeon.entity.creatures.Creature[] {  };
    java.util.ArrayList<org.mafagafogigante.dungeon.entity.creatures.Creature> arraylist_creature26 = new java.util.ArrayList<org.mafagafogigante.dungeon.entity.creatures.Creature>();
    boolean b27 = java.util.Collections.addAll((java.util.Collection<org.mafagafogigante.dungeon.entity.creatures.Creature>)arraylist_creature26, creature_array25);
    org.mafagafogigante.dungeon.game.DungeonString dungeonString29 = new org.mafagafogigante.dungeon.game.DungeonString("hi!");
    java.lang.String[] str_array34 = new java.lang.String[] { "hi!", "Damaged", "BattleStatistics{records=CounterMap{map={}}}", "" };
    dungeonString29.append(str_array34);
    java.lang.String str36 = dungeonString29.toString();
    org.mafagafogigante.dungeon.game.Point point40 = new org.mafagafogigante.dungeon.game.Point(10, (int)'a', 0);
    java.lang.String[] str_array43 = new java.lang.String[] { "", "" };
    org.mafagafogigante.dungeon.util.Table table44 = new org.mafagafogigante.dungeon.util.Table(str_array43);
    boolean b45 = point40.equals((java.lang.Object)str_array43);
    dungeonString29.append(str_array43);
    observer11.writeCreatureSight((java.util.List<org.mafagafogigante.dungeon.entity.creatures.Creature>)arraylist_creature26, dungeonString29);
    boolean b48 = visibilityCriteria4.isMetBy(observer11);
    // The following exception was thrown during execution in test generation
    try {
    boolean b49 = timeVisibilityCriterion2.isMetBy(observer11);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(visibilityCriterion_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(visibilityCriterion_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(item_array13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(creature_array25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str36 + "' != '" + "DungeonString{coloredStringList=[ColoredString{string='hi!hi!DamagedBattleStatistics{records=CounterMap{map={}}}', color=java.awt.Color[r=192,g=192,b=192]}], currentColor=java.awt.Color[r=192,g=192,b=192]}"+ "'", str36.equals("DungeonString{coloredStringList=[ColoredString{string='hi!hi!DamagedBattleStatistics{records=CounterMap{map={}}}', color=java.awt.Color[r=192,g=192,b=192]}], currentColor=java.awt.Color[r=192,g=192,b=192]}"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == true);

  }

  @Test
  public void test241() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test241"); }

    org.mafagafogigante.dungeon.stats.Statistics statistics0 = new org.mafagafogigante.dungeon.stats.Statistics();
    statistics0.writeStatistics();
    statistics0.writeStatistics();
    statistics0.writeStatistics();
    org.mafagafogigante.dungeon.commands.IssuedCommand issuedCommand5 = new org.mafagafogigante.dungeon.commands.IssuedCommand("BattleStatistics{records=CounterMap{map={}}}");
    org.mafagafogigante.dungeon.commands.PreparedIssuedCommand preparedIssuedCommand6 = org.mafagafogigante.dungeon.commands.IssuedCommandProcessor.prepareIssuedCommand(issuedCommand5);
    statistics0.addCommand(issuedCommand5);
    org.mafagafogigante.dungeon.commands.IssuedCommandEvaluation issuedCommandEvaluation8 = org.mafagafogigante.dungeon.commands.IssuedCommandProcessor.evaluateIssuedCommand(issuedCommand5);
    org.mafagafogigante.dungeon.commands.IssuedCommandEvaluation issuedCommandEvaluation9 = org.mafagafogigante.dungeon.commands.IssuedCommandProcessor.evaluateIssuedCommand(issuedCommand5);
    java.lang.String str10 = issuedCommandEvaluation9.toString();
    java.lang.String str11 = issuedCommandEvaluation9.toString();
    java.util.List<java.lang.String> list_str12 = issuedCommandEvaluation9.getSuggestions();
    org.mafagafogigante.dungeon.io.Split split13 = org.mafagafogigante.dungeon.io.Split.splitOnOn(list_str12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(preparedIssuedCommand6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(issuedCommandEvaluation8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(issuedCommandEvaluation9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "IssuedCommandEvaluation{valid=false, suggestions=[achievements, destroy, tutorial]}"+ "'", str10.equals("IssuedCommandEvaluation{valid=false, suggestions=[achievements, destroy, tutorial]}"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "IssuedCommandEvaluation{valid=false, suggestions=[achievements, destroy, tutorial]}"+ "'", str11.equals("IssuedCommandEvaluation{valid=false, suggestions=[achievements, destroy, tutorial]}"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_str12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(split13);

  }

  @Test
  public void test242() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test242"); }

    org.mafagafogigante.dungeon.entity.Integrity integrity2 = new org.mafagafogigante.dungeon.entity.Integrity(1, 0);
    boolean b3 = integrity2.isMaximum();
    org.mafagafogigante.dungeon.entity.items.Item item4 = null;
    org.mafagafogigante.dungeon.entity.items.ItemIntegrity itemIntegrity5 = org.mafagafogigante.dungeon.entity.items.ItemIntegrity.makeItemIntegrity(integrity2, item4);
    org.mafagafogigante.dungeon.util.Percentage percentage6 = itemIntegrity5.toPercentage();
    itemIntegrity5.incrementBy((int)(byte)10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(itemIntegrity5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(percentage6);

  }

  @Test
  public void test243() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test243"); }

    org.mafagafogigante.dungeon.date.Date date3 = new org.mafagafogigante.dungeon.date.Date(10L, 100L, 100L);
    org.mafagafogigante.dungeon.date.Date date7 = new org.mafagafogigante.dungeon.date.Date(10L, 100L, 100L);
    int i8 = date3.compareTo(date7);
    org.mafagafogigante.dungeon.game.PartOfDay partOfDay9 = org.mafagafogigante.dungeon.game.PartOfDay.getCorrespondingConstant(date3);
    java.lang.String[] str_array15 = new java.lang.String[] { "hi!", "visibilityCriteria=VisibilityCriteria{[]}", "visibilityCriteria=VisibilityCriteria{[]}", "Damaged", "hi!" };
    org.mafagafogigante.dungeon.util.Table table16 = new org.mafagafogigante.dungeon.util.Table(str_array15);
    java.util.List<org.mafagafogigante.dungeon.game.ColoredString> list_coloredString17 = table16.toColoredStringList();
    org.mafagafogigante.dungeon.game.ColoredString coloredString18 = org.mafagafogigante.dungeon.game.Random.select(list_coloredString17);
    boolean b19 = date3.equals((java.lang.Object)coloredString18);
    org.mafagafogigante.dungeon.date.Date date23 = new org.mafagafogigante.dungeon.date.Date(10L, 100L, 100L);
    org.mafagafogigante.dungeon.date.Date date27 = new org.mafagafogigante.dungeon.date.Date(10L, 100L, 100L);
    int i28 = date23.compareTo(date27);
    org.mafagafogigante.dungeon.game.PartOfDay partOfDay29 = org.mafagafogigante.dungeon.game.PartOfDay.getCorrespondingConstant(date23);
    long long30 = date23.getYear();
    org.mafagafogigante.dungeon.date.Date date34 = new org.mafagafogigante.dungeon.date.Date(10L, 100L, 100L);
    org.mafagafogigante.dungeon.date.Date date38 = new org.mafagafogigante.dungeon.date.Date(10L, 100L, 100L);
    int i39 = date34.compareTo(date38);
    long long40 = date34.getYear();
    int i41 = date23.compareTo(date34);
    org.mafagafogigante.dungeon.date.Duration duration42 = new org.mafagafogigante.dungeon.date.Duration(date3, date34);
    org.mafagafogigante.dungeon.game.PartOfDay partOfDay43 = org.mafagafogigante.dungeon.game.PartOfDay.getCorrespondingConstant(date34);
    long long44 = date34.getMonth();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 0);
    org.junit.Assert.assertTrue("'" + partOfDay9 + "' != '" + org.mafagafogigante.dungeon.game.PartOfDay.MIDNIGHT + "'", partOfDay9.equals(org.mafagafogigante.dungeon.game.PartOfDay.MIDNIGHT));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_coloredString17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(coloredString18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 0);
    org.junit.Assert.assertTrue("'" + partOfDay29 + "' != '" + org.mafagafogigante.dungeon.game.PartOfDay.MIDNIGHT + "'", partOfDay29.equals(org.mafagafogigante.dungeon.game.PartOfDay.MIDNIGHT));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long30 == 10L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i39 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long40 == 10L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i41 == 0);
    org.junit.Assert.assertTrue("'" + partOfDay43 + "' != '" + org.mafagafogigante.dungeon.game.PartOfDay.MIDNIGHT + "'", partOfDay43.equals(org.mafagafogigante.dungeon.game.PartOfDay.MIDNIGHT));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long44 == 10L);

  }

  @Test
  public void test244() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test244"); }

    org.mafagafogigante.dungeon.entity.creatures.Creature creature0 = null;
    org.mafagafogigante.dungeon.entity.items.CreatureInventory creatureInventory3 = new org.mafagafogigante.dungeon.entity.items.CreatureInventory(creature0, (int)(short)0, (double)57600);

  }

  @Test
  public void test245() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test245"); }

    org.mafagafogigante.dungeon.game.Id id0 = null;
    org.mafagafogigante.dungeon.stats.CauseOfDeath causeOfDeath2 = org.mafagafogigante.dungeon.stats.CauseOfDeath.getUnarmedCauseOfDeath();
    org.mafagafogigante.dungeon.entity.creatures.HealthState healthState3 = org.mafagafogigante.dungeon.entity.creatures.HealthState.DEAD;
    boolean b4 = causeOfDeath2.equals((java.lang.Object)healthState3);
    java.lang.String[] str_array10 = new java.lang.String[] { "hi!", "visibilityCriteria=VisibilityCriteria{[]}", "visibilityCriteria=VisibilityCriteria{[]}", "Damaged", "hi!" };
    org.mafagafogigante.dungeon.util.Table table11 = new org.mafagafogigante.dungeon.util.Table(str_array10);
    java.util.List<org.mafagafogigante.dungeon.game.ColoredString> list_coloredString12 = table11.toColoredStringList();
    boolean b13 = causeOfDeath2.equals((java.lang.Object)table11);
    org.mafagafogigante.dungeon.game.PartOfDay partOfDay14 = org.mafagafogigante.dungeon.game.PartOfDay.NOON;
    org.mafagafogigante.dungeon.stats.BattleRecord battleRecord15 = new org.mafagafogigante.dungeon.stats.BattleRecord(id0, "East", causeOfDeath2, partOfDay14);
    java.lang.String str16 = battleRecord15.toString();
    org.mafagafogigante.dungeon.game.PartOfDay partOfDay17 = battleRecord15.getPartOfDay();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(causeOfDeath2);
    org.junit.Assert.assertTrue("'" + healthState3 + "' != '" + org.mafagafogigante.dungeon.entity.creatures.HealthState.DEAD + "'", healthState3.equals(org.mafagafogigante.dungeon.entity.creatures.HealthState.DEAD));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_coloredString12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    org.junit.Assert.assertTrue("'" + partOfDay14 + "' != '" + org.mafagafogigante.dungeon.game.PartOfDay.NOON + "'", partOfDay14.equals(org.mafagafogigante.dungeon.game.PartOfDay.NOON));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "BattleEntry{id=null, type='East', causeOfDeath=Unarmed : UNARMED, partOfDay=Noon}"+ "'", str16.equals("BattleEntry{id=null, type='East', causeOfDeath=Unarmed : UNARMED, partOfDay=Noon}"));
    org.junit.Assert.assertTrue("'" + partOfDay17 + "' != '" + org.mafagafogigante.dungeon.game.PartOfDay.NOON + "'", partOfDay17.equals(org.mafagafogigante.dungeon.game.PartOfDay.NOON));

  }

  @Test
  public void test246() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test246"); }

    org.mafagafogigante.dungeon.entity.items.FoodComponent foodComponent2 = new org.mafagafogigante.dungeon.entity.items.FoodComponent((int)(short)0, 0);
    int i3 = foodComponent2.getNutrition();
    int i4 = foodComponent2.getIntegrityDecrementOnEat();
    int i5 = foodComponent2.getNutrition();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 0);

  }

  @Test
  public void test247() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test247"); }

    org.mafagafogigante.dungeon.achievements.BattleStatisticsQuery battleStatisticsQuery0 = new org.mafagafogigante.dungeon.achievements.BattleStatisticsQuery();
    org.mafagafogigante.dungeon.achievements.BattleStatisticsRequirement battleStatisticsRequirement2 = new org.mafagafogigante.dungeon.achievements.BattleStatisticsRequirement(battleStatisticsQuery0, (int)(byte)100);
    int i3 = battleStatisticsRequirement2.getCount();
    java.lang.String str4 = battleStatisticsRequirement2.toString();
    org.mafagafogigante.dungeon.achievements.BattleStatisticsQuery battleStatisticsQuery5 = battleStatisticsRequirement2.getQuery();
    java.lang.String str6 = battleStatisticsQuery5.toString();
    org.mafagafogigante.dungeon.entity.items.ItemPreset itemPreset7 = new org.mafagafogigante.dungeon.entity.items.ItemPreset();
    org.mafagafogigante.dungeon.entity.Integrity integrity8 = itemPreset7.getIntegrity();
    org.mafagafogigante.dungeon.entity.Integrity integrity9 = null;
    itemPreset7.setIntegrity(integrity9);
    org.mafagafogigante.dungeon.util.Percentage percentage11 = itemPreset7.getVisibility();
    org.mafagafogigante.dungeon.entity.Integrity integrity12 = itemPreset7.getIntegrity();
    java.lang.String str13 = itemPreset7.getText();
    java.lang.String str14 = itemPreset7.getType();
    org.mafagafogigante.dungeon.entity.Integrity integrity17 = new org.mafagafogigante.dungeon.entity.Integrity(1, 0);
    boolean b18 = integrity17.isMaximum();
    integrity17.incrementBy((int)(short)0);
    org.mafagafogigante.dungeon.util.Percentage percentage21 = integrity17.toPercentage();
    itemPreset7.setHitRate(percentage21);
    org.mafagafogigante.dungeon.game.Id id24 = new org.mafagafogigante.dungeon.game.Id("100");
    java.lang.String str25 = id24.toString();
    itemPreset7.setId(id24);
    org.mafagafogigante.dungeon.entity.items.BookComponent bookComponent28 = new org.mafagafogigante.dungeon.entity.items.BookComponent(id24, "DungeonString{coloredStringList=[ColoredString{string='hi!hi!DamagedBattleStatistics{records=CounterMap{map={}}}', color=java.awt.Color[r=192,g=192,b=192]}], currentColor=java.awt.Color[r=192,g=192,b=192]}");
    battleStatisticsQuery5.setId(id24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "BattleStatisticsRequirement{query=BattleStatisticsQuery{id=null, type='null', causeOfDeath=null, partOfDay=null}, count=100}"+ "'", str4.equals("BattleStatisticsRequirement{query=BattleStatisticsQuery{id=null, type='null', causeOfDeath=null, partOfDay=null}, count=100}"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(battleStatisticsQuery5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "BattleStatisticsQuery{id=null, type='null', causeOfDeath=null, partOfDay=null}"+ "'", str6.equals("BattleStatisticsQuery{id=null, type='null', causeOfDeath=null, partOfDay=null}"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(integrity8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(percentage11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(integrity12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(percentage21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + "100"+ "'", str25.equals("100"));

  }

  @Test
  public void test248() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test248"); }

    org.mafagafogigante.dungeon.entity.items.ItemPreset itemPreset0 = new org.mafagafogigante.dungeon.entity.items.ItemPreset();
    org.mafagafogigante.dungeon.entity.Integrity integrity1 = itemPreset0.getIntegrity();
    itemPreset0.setIntegrityDecrementOnEat((-1));
    org.mafagafogigante.dungeon.entity.Weight weight4 = itemPreset0.getWeight();
    itemPreset0.setDrinkableHealing((int)(byte)1);
    int i7 = itemPreset0.getDamage();
    itemPreset0.setDrinkableDoses(97);
    org.mafagafogigante.dungeon.game.PartOfDay partOfDay10 = org.mafagafogigante.dungeon.game.PartOfDay.NIGHT;
    org.mafagafogigante.dungeon.entity.Luminosity luminosity11 = partOfDay10.getLuminosity();
    org.mafagafogigante.dungeon.game.Name name12 = partOfDay10.getName();
    java.lang.String str14 = name12.getQuantifiedName((int)'a');
    java.lang.String str15 = name12.getSingular();
    java.lang.String str16 = name12.toString();
    java.lang.String str17 = name12.getSingular();
    java.lang.String str18 = name12.getPlural();
    java.lang.String str19 = name12.getPlural();
    java.lang.String str21 = name12.getQuantifiedName(20601);
    java.lang.String str22 = name12.toString();
    itemPreset0.setName(name12);
    org.mafagafogigante.dungeon.entity.Integrity integrity24 = itemPreset0.getIntegrity();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(integrity1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(weight4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);
    org.junit.Assert.assertTrue("'" + partOfDay10 + "' != '" + org.mafagafogigante.dungeon.game.PartOfDay.NIGHT + "'", partOfDay10.equals(org.mafagafogigante.dungeon.game.PartOfDay.NIGHT));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(luminosity11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(name12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "a few Nights"+ "'", str14.equals("a few Nights"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "Night"+ "'", str15.equals("Night"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "Night"+ "'", str16.equals("Night"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "Night"+ "'", str17.equals("Night"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "Nights"+ "'", str18.equals("Nights"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "Nights"+ "'", str19.equals("Nights"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "a few Nights"+ "'", str21.equals("a few Nights"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "Night"+ "'", str22.equals("Night"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(integrity24);

  }

  @Test
  public void test249() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test249"); }

    org.mafagafogigante.dungeon.entity.creatures.Creature creature0 = null;
    org.mafagafogigante.dungeon.entity.items.CreatureInventory creatureInventory3 = new org.mafagafogigante.dungeon.entity.items.CreatureInventory(creature0, (-1), 0.0d);
    int i4 = creatureInventory3.getItemCount();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 0);

  }

  @Test
  public void test250() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test250"); }

    org.mafagafogigante.dungeon.date.Date date3 = new org.mafagafogigante.dungeon.date.Date((long)1, (long)'a', 817201000L);
    org.mafagafogigante.dungeon.game.PartOfDay partOfDay4 = org.mafagafogigante.dungeon.game.PartOfDay.getCorrespondingConstant(date3);
    org.junit.Assert.assertTrue("'" + partOfDay4 + "' != '" + org.mafagafogigante.dungeon.game.PartOfDay.MIDNIGHT + "'", partOfDay4.equals(org.mafagafogigante.dungeon.game.PartOfDay.MIDNIGHT));

  }

  @Test
  public void test251() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test251"); }

    org.mafagafogigante.dungeon.entity.items.ItemPreset itemPreset0 = new org.mafagafogigante.dungeon.entity.items.ItemPreset();
    org.mafagafogigante.dungeon.entity.Integrity integrity1 = itemPreset0.getIntegrity();
    org.mafagafogigante.dungeon.entity.Integrity integrity2 = null;
    itemPreset0.setIntegrity(integrity2);
    org.mafagafogigante.dungeon.util.Percentage percentage4 = itemPreset0.getVisibility();
    java.lang.String str5 = itemPreset0.getType();
    itemPreset0.setIntegrityDecrementOnHit((int)(short)100);
    org.mafagafogigante.dungeon.entity.TagSet<org.mafagafogigante.dungeon.entity.items.Item.Tag> tagset_tag8 = itemPreset0.getTagSet();
    org.mafagafogigante.dungeon.entity.Weight weight10 = org.mafagafogigante.dungeon.entity.Weight.newInstance((double)(byte)-1);
    itemPreset0.setWeight(weight10);
    org.mafagafogigante.dungeon.entity.items.ItemPreset itemPreset12 = new org.mafagafogigante.dungeon.entity.items.ItemPreset();
    org.mafagafogigante.dungeon.entity.Integrity integrity13 = itemPreset12.getIntegrity();
    org.mafagafogigante.dungeon.entity.items.ItemPreset itemPreset14 = new org.mafagafogigante.dungeon.entity.items.ItemPreset();
    org.mafagafogigante.dungeon.entity.Integrity integrity15 = itemPreset14.getIntegrity();
    org.mafagafogigante.dungeon.entity.Integrity integrity16 = null;
    itemPreset14.setIntegrity(integrity16);
    org.mafagafogigante.dungeon.util.Percentage percentage18 = itemPreset14.getVisibility();
    java.lang.String str19 = itemPreset14.getType();
    org.mafagafogigante.dungeon.entity.items.Item.Tag tag20 = org.mafagafogigante.dungeon.entity.items.Item.Tag.REPAIRABLE;
    itemPreset14.addTag(tag20);
    itemPreset12.addTag(tag20);
    org.mafagafogigante.dungeon.entity.items.Item.Tag tag23 = org.mafagafogigante.dungeon.entity.items.Item.Tag.BOOK;
    itemPreset12.addTag(tag23);
    itemPreset0.addTag(tag23);
    int i26 = itemPreset0.getDamage();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(integrity1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(percentage4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(tagset_tag8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(weight10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(integrity13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(integrity15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(percentage18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str19);
    org.junit.Assert.assertTrue("'" + tag20 + "' != '" + org.mafagafogigante.dungeon.entity.items.Item.Tag.REPAIRABLE + "'", tag20.equals(org.mafagafogigante.dungeon.entity.items.Item.Tag.REPAIRABLE));
    org.junit.Assert.assertTrue("'" + tag23 + "' != '" + org.mafagafogigante.dungeon.entity.items.Item.Tag.BOOK + "'", tag23.equals(org.mafagafogigante.dungeon.entity.items.Item.Tag.BOOK));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i26 == 0);

  }

  @Test
  public void test252() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test252"); }

    org.mafagafogigante.dungeon.world.VisibilityCriterion[] visibilityCriterion_array0 = new org.mafagafogigante.dungeon.world.VisibilityCriterion[] {  };
    org.mafagafogigante.dungeon.world.VisibilityCriteria visibilityCriteria1 = new org.mafagafogigante.dungeon.world.VisibilityCriteria(visibilityCriterion_array0);
    org.mafagafogigante.dungeon.entity.creatures.Creature creature2 = null;
    org.mafagafogigante.dungeon.entity.creatures.Observer observer3 = new org.mafagafogigante.dungeon.entity.creatures.Observer(creature2);
    boolean b4 = visibilityCriteria1.isMetBy(observer3);
    org.mafagafogigante.dungeon.entity.items.Item[] item_array5 = new org.mafagafogigante.dungeon.entity.items.Item[] {  };
    java.util.ArrayList<org.mafagafogigante.dungeon.entity.items.Item> arraylist_item6 = new java.util.ArrayList<org.mafagafogigante.dungeon.entity.items.Item>();
    boolean b7 = java.util.Collections.addAll((java.util.Collection<org.mafagafogigante.dungeon.entity.items.Item>)arraylist_item6, item_array5);
    org.mafagafogigante.dungeon.game.DungeonString dungeonString9 = new org.mafagafogigante.dungeon.game.DungeonString("hi!");
    observer3.writeItemSight((java.util.List<org.mafagafogigante.dungeon.entity.items.Item>)arraylist_item6, dungeonString9);
    org.mafagafogigante.dungeon.world.VisibilityCriterion[] visibilityCriterion_array11 = new org.mafagafogigante.dungeon.world.VisibilityCriterion[] {  };
    org.mafagafogigante.dungeon.world.VisibilityCriteria visibilityCriteria12 = new org.mafagafogigante.dungeon.world.VisibilityCriteria(visibilityCriterion_array11);
    org.mafagafogigante.dungeon.entity.creatures.Creature creature13 = null;
    org.mafagafogigante.dungeon.entity.creatures.Observer observer14 = new org.mafagafogigante.dungeon.entity.creatures.Observer(creature13);
    boolean b15 = visibilityCriteria12.isMetBy(observer14);
    org.mafagafogigante.dungeon.entity.items.Item[] item_array16 = new org.mafagafogigante.dungeon.entity.items.Item[] {  };
    java.util.ArrayList<org.mafagafogigante.dungeon.entity.items.Item> arraylist_item17 = new java.util.ArrayList<org.mafagafogigante.dungeon.entity.items.Item>();
    boolean b18 = java.util.Collections.addAll((java.util.Collection<org.mafagafogigante.dungeon.entity.items.Item>)arraylist_item17, item_array16);
    org.mafagafogigante.dungeon.game.DungeonString dungeonString20 = new org.mafagafogigante.dungeon.game.DungeonString("hi!");
    observer14.writeItemSight((java.util.List<org.mafagafogigante.dungeon.entity.items.Item>)arraylist_item17, dungeonString20);
    org.mafagafogigante.dungeon.game.DungeonString dungeonString23 = new org.mafagafogigante.dungeon.game.DungeonString("");
    java.util.List<org.mafagafogigante.dungeon.game.ColoredString> list_coloredString24 = dungeonString23.toColoredStringList();
    observer3.writeItemSight((java.util.List<org.mafagafogigante.dungeon.entity.items.Item>)arraylist_item17, dungeonString23);
    org.mafagafogigante.dungeon.entity.creatures.Creature creature26 = null;
    org.mafagafogigante.dungeon.entity.creatures.Observer observer27 = new org.mafagafogigante.dungeon.entity.creatures.Observer(creature26);
    org.mafagafogigante.dungeon.entity.creatures.Creature[] creature_array28 = new org.mafagafogigante.dungeon.entity.creatures.Creature[] {  };
    java.util.ArrayList<org.mafagafogigante.dungeon.entity.creatures.Creature> arraylist_creature29 = new java.util.ArrayList<org.mafagafogigante.dungeon.entity.creatures.Creature>();
    boolean b30 = java.util.Collections.addAll((java.util.Collection<org.mafagafogigante.dungeon.entity.creatures.Creature>)arraylist_creature29, creature_array28);
    org.mafagafogigante.dungeon.game.DungeonString dungeonString32 = new org.mafagafogigante.dungeon.game.DungeonString("");
    java.util.List<org.mafagafogigante.dungeon.game.ColoredString> list_coloredString33 = dungeonString32.toColoredStringList();
    observer27.writeCreatureSight((java.util.List<org.mafagafogigante.dungeon.entity.creatures.Creature>)arraylist_creature29, dungeonString32);
    java.util.Spliterator<org.mafagafogigante.dungeon.entity.creatures.Creature> spliterator_creature35 = arraylist_creature29.spliterator();
    org.mafagafogigante.dungeon.entity.creatures.Creature creature36 = null;
    org.mafagafogigante.dungeon.entity.creatures.Observer observer37 = new org.mafagafogigante.dungeon.entity.creatures.Observer(creature36);
    org.mafagafogigante.dungeon.entity.creatures.Creature[] creature_array38 = new org.mafagafogigante.dungeon.entity.creatures.Creature[] {  };
    java.util.ArrayList<org.mafagafogigante.dungeon.entity.creatures.Creature> arraylist_creature39 = new java.util.ArrayList<org.mafagafogigante.dungeon.entity.creatures.Creature>();
    boolean b40 = java.util.Collections.addAll((java.util.Collection<org.mafagafogigante.dungeon.entity.creatures.Creature>)arraylist_creature39, creature_array38);
    org.mafagafogigante.dungeon.world.VisibilityCriterion[] visibilityCriterion_array41 = new org.mafagafogigante.dungeon.world.VisibilityCriterion[] {  };
    org.mafagafogigante.dungeon.world.VisibilityCriteria visibilityCriteria42 = new org.mafagafogigante.dungeon.world.VisibilityCriteria(visibilityCriterion_array41);
    org.mafagafogigante.dungeon.entity.creatures.Creature creature43 = null;
    org.mafagafogigante.dungeon.entity.creatures.Observer observer44 = new org.mafagafogigante.dungeon.entity.creatures.Observer(creature43);
    boolean b45 = visibilityCriteria42.isMetBy(observer44);
    org.mafagafogigante.dungeon.entity.items.Item[] item_array46 = new org.mafagafogigante.dungeon.entity.items.Item[] {  };
    java.util.ArrayList<org.mafagafogigante.dungeon.entity.items.Item> arraylist_item47 = new java.util.ArrayList<org.mafagafogigante.dungeon.entity.items.Item>();
    boolean b48 = java.util.Collections.addAll((java.util.Collection<org.mafagafogigante.dungeon.entity.items.Item>)arraylist_item47, item_array46);
    org.mafagafogigante.dungeon.game.DungeonString dungeonString50 = new org.mafagafogigante.dungeon.game.DungeonString("hi!");
    java.lang.String[] str_array55 = new java.lang.String[] { "hi!", "Damaged", "BattleStatistics{records=CounterMap{map={}}}", "" };
    dungeonString50.append(str_array55);
    observer44.writeItemSight((java.util.List<org.mafagafogigante.dungeon.entity.items.Item>)arraylist_item47, dungeonString50);
    java.lang.String str58 = dungeonString50.toString();
    observer37.writeCreatureSight((java.util.List<org.mafagafogigante.dungeon.entity.creatures.Creature>)arraylist_creature39, dungeonString50);
    observer3.writeCreatureSight((java.util.List<org.mafagafogigante.dungeon.entity.creatures.Creature>)arraylist_creature29, dungeonString50);
    java.lang.String str61 = dungeonString50.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(visibilityCriterion_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(item_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(visibilityCriterion_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(item_array16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_coloredString24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(creature_array28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_coloredString33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(spliterator_creature35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(creature_array38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(visibilityCriterion_array41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(item_array46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str58 + "' != '" + "DungeonString{coloredStringList=[ColoredString{string='hi!hi!DamagedBattleStatistics{records=CounterMap{map={}}}', color=java.awt.Color[r=192,g=192,b=192]}], currentColor=java.awt.Color[r=192,g=192,b=192]}"+ "'", str58.equals("DungeonString{coloredStringList=[ColoredString{string='hi!hi!DamagedBattleStatistics{records=CounterMap{map={}}}', color=java.awt.Color[r=192,g=192,b=192]}], currentColor=java.awt.Color[r=192,g=192,b=192]}"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str61 + "' != '" + "DungeonString{coloredStringList=[ColoredString{string='hi!hi!DamagedBattleStatistics{records=CounterMap{map={}}}', color=java.awt.Color[r=192,g=192,b=192]}, ColoredString{string='\nYou don't see anyone here.\n\nYou don't see anyone here.\n', color=java.awt.Color[r=192,g=192,b=192]}], currentColor=java.awt.Color[r=192,g=192,b=192]}"+ "'", str61.equals("DungeonString{coloredStringList=[ColoredString{string='hi!hi!DamagedBattleStatistics{records=CounterMap{map={}}}', color=java.awt.Color[r=192,g=192,b=192]}, ColoredString{string='\nYou don't see anyone here.\n\nYou don't see anyone here.\n', color=java.awt.Color[r=192,g=192,b=192]}], currentColor=java.awt.Color[r=192,g=192,b=192]}"));

  }

  @Test
  public void test253() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test253"); }

    org.mafagafogigante.dungeon.schema.JsonRule jsonRule2 = org.mafagafogigante.dungeon.schema.rules.JsonRuleFactory.makeBoundIntegerRule(45056, 46719);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonRule2);

  }

  @Test
  public void test254() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test254"); }

    org.mafagafogigante.dungeon.game.Direction direction0 = org.mafagafogigante.dungeon.game.Direction.DOWN;
    org.mafagafogigante.dungeon.game.Point point1 = direction0.getOffset();
    org.mafagafogigante.dungeon.game.Point point2 = direction0.getOffset();
    org.junit.Assert.assertTrue("'" + direction0 + "' != '" + org.mafagafogigante.dungeon.game.Direction.DOWN + "'", direction0.equals(org.mafagafogigante.dungeon.game.Direction.DOWN));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(point1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(point2);

  }

  @Test
  public void test255() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test255"); }

    org.mafagafogigante.dungeon.game.DungeonString dungeonString3 = new org.mafagafogigante.dungeon.game.DungeonString("hi!");
    java.lang.String[] str_array8 = new java.lang.String[] { "hi!", "Damaged", "BattleStatistics{records=CounterMap{map={}}}", "" };
    dungeonString3.append(str_array8);
    java.awt.Color color10 = null;
    dungeonString3.setColor(color10);
    org.mafagafogigante.dungeon.date.Date date16 = new org.mafagafogigante.dungeon.date.Date(10L, 100L, 100L);
    org.mafagafogigante.dungeon.date.Date date20 = new org.mafagafogigante.dungeon.date.Date(10L, 100L, 100L);
    int i21 = date16.compareTo(date20);
    org.mafagafogigante.dungeon.game.PartOfDay partOfDay22 = org.mafagafogigante.dungeon.game.PartOfDay.getCorrespondingConstant(date16);
    java.lang.String[] str_array28 = new java.lang.String[] { "hi!", "visibilityCriteria=VisibilityCriteria{[]}", "visibilityCriteria=VisibilityCriteria{[]}", "Damaged", "hi!" };
    org.mafagafogigante.dungeon.util.Table table29 = new org.mafagafogigante.dungeon.util.Table(str_array28);
    java.util.List<org.mafagafogigante.dungeon.game.ColoredString> list_coloredString30 = table29.toColoredStringList();
    org.mafagafogigante.dungeon.game.ColoredString coloredString31 = org.mafagafogigante.dungeon.game.Random.select(list_coloredString30);
    boolean b32 = date16.equals((java.lang.Object)coloredString31);
    java.awt.Color color33 = coloredString31.getColor();
    org.mafagafogigante.dungeon.game.ColoredString coloredString34 = new org.mafagafogigante.dungeon.game.ColoredString("User: Nicholas\nTime: 15:42:12\nDate: 2017-04-09\nJava: Java version 1.8.0_121 by Oracle Corporation\nHeap: Using 41.5 MiB out of the allocated 154.5 MiB\nOS: Windows 10 (amd64) 10.0", color33);
    dungeonString3.setColor(color33);
    org.mafagafogigante.dungeon.game.DungeonString dungeonString36 = new org.mafagafogigante.dungeon.game.DungeonString("Enabled LightSource of luminosity of 0.00%", color33);
    org.mafagafogigante.dungeon.game.DungeonString dungeonString37 = new org.mafagafogigante.dungeon.game.DungeonString("{0, -1, 0}", color33);
    java.lang.String[] str_array40 = new java.lang.String[] { "", "" };
    org.mafagafogigante.dungeon.util.Table table41 = new org.mafagafogigante.dungeon.util.Table(str_array40);
    org.mafagafogigante.dungeon.util.Table table42 = new org.mafagafogigante.dungeon.util.Table(str_array40);
    dungeonString37.append(str_array40);
    org.mafagafogigante.dungeon.gui.WritingSpecifications writingSpecifications46 = new org.mafagafogigante.dungeon.gui.WritingSpecifications(false, 10);
    org.mafagafogigante.dungeon.io.Writer.write((org.mafagafogigante.dungeon.game.Writable)dungeonString37, writingSpecifications46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i21 == 0);
    org.junit.Assert.assertTrue("'" + partOfDay22 + "' != '" + org.mafagafogigante.dungeon.game.PartOfDay.MIDNIGHT + "'", partOfDay22.equals(org.mafagafogigante.dungeon.game.PartOfDay.MIDNIGHT));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_coloredString30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(coloredString31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array40);

  }

  @Test
  public void test256() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test256"); }

    org.mafagafogigante.dungeon.stats.ExplorationStatistics explorationStatistics0 = new org.mafagafogigante.dungeon.stats.ExplorationStatistics();
    org.mafagafogigante.dungeon.game.Point point1 = null;
    org.mafagafogigante.dungeon.game.Id id2 = null;
    explorationStatistics0.createEntryIfNotExists(point1, id2);
    org.mafagafogigante.dungeon.game.Point point7 = new org.mafagafogigante.dungeon.game.Point(10, (int)'a', 0);
    java.lang.String[] str_array10 = new java.lang.String[] { "", "" };
    org.mafagafogigante.dungeon.util.Table table11 = new org.mafagafogigante.dungeon.util.Table(str_array10);
    boolean b12 = point7.equals((java.lang.Object)str_array10);
    org.mafagafogigante.dungeon.game.Id id13 = null;
    explorationStatistics0.addVisit(point7, id13);
    org.mafagafogigante.dungeon.stats.ExplorationStatistics explorationStatistics15 = new org.mafagafogigante.dungeon.stats.ExplorationStatistics();
    org.mafagafogigante.dungeon.game.Point point16 = null;
    org.mafagafogigante.dungeon.game.Id id17 = null;
    explorationStatistics15.createEntryIfNotExists(point16, id17);
    org.mafagafogigante.dungeon.game.Point point22 = new org.mafagafogigante.dungeon.game.Point((int)' ', (int)(byte)0, (int)(short)-1);
    org.mafagafogigante.dungeon.game.Id id23 = null;
    explorationStatistics15.addVisit(point22, id23);
    java.lang.String str25 = point22.toString();
    int i26 = point22.getZ();
    org.mafagafogigante.dungeon.game.Id id27 = null;
    explorationStatistics0.addVisit(point22, id27);
    org.mafagafogigante.dungeon.entity.items.ItemPreset itemPreset29 = new org.mafagafogigante.dungeon.entity.items.ItemPreset();
    org.mafagafogigante.dungeon.entity.Integrity integrity30 = itemPreset29.getIntegrity();
    org.mafagafogigante.dungeon.entity.Integrity integrity31 = null;
    itemPreset29.setIntegrity(integrity31);
    org.mafagafogigante.dungeon.util.Percentage percentage33 = itemPreset29.getVisibility();
    org.mafagafogigante.dungeon.entity.Integrity integrity34 = itemPreset29.getIntegrity();
    java.lang.String str35 = itemPreset29.getText();
    org.mafagafogigante.dungeon.game.Name name36 = null;
    itemPreset29.setName(name36);
    org.mafagafogigante.dungeon.entity.items.ItemPreset itemPreset38 = new org.mafagafogigante.dungeon.entity.items.ItemPreset();
    org.mafagafogigante.dungeon.entity.Integrity integrity39 = itemPreset38.getIntegrity();
    org.mafagafogigante.dungeon.entity.Integrity integrity40 = null;
    itemPreset38.setIntegrity(integrity40);
    org.mafagafogigante.dungeon.util.Percentage percentage42 = itemPreset38.getVisibility();
    java.lang.String str43 = itemPreset38.getType();
    itemPreset38.setIntegrityDecrementOnHit((int)(short)100);
    org.mafagafogigante.dungeon.util.Percentage percentage47 = new org.mafagafogigante.dungeon.util.Percentage((double)57);
    itemPreset38.setVisibility(percentage47);
    boolean b49 = org.mafagafogigante.dungeon.game.Random.roll(percentage47);
    itemPreset29.setVisibility(percentage47);
    long long51 = itemPreset29.getPutrefactionPeriod();
    org.mafagafogigante.dungeon.game.Id id53 = new org.mafagafogigante.dungeon.game.Id("100");
    itemPreset29.setId(id53);
    // The following exception was thrown during execution in test generation
    try {
    int i55 = explorationStatistics0.getVisitedLocations(id53);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + "{32, 0, -1}"+ "'", str25.equals("{32, 0, -1}"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i26 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(integrity30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(percentage33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(integrity34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(integrity39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(percentage42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long51 == 0L);

  }

  @Test
  public void test257() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test257"); }

    org.mafagafogigante.dungeon.commands.CommandDescription commandDescription2 = new org.mafagafogigante.dungeon.commands.CommandDescription("00:00:00", "the sky is cloudy");
    java.lang.String str3 = commandDescription2.getName();
    java.lang.String str4 = commandDescription2.getName();
    java.lang.String str5 = commandDescription2.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "00:00:00"+ "'", str3.equals("00:00:00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "00:00:00"+ "'", str4.equals("00:00:00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "00:00:00 : the sky is cloudy"+ "'", str5.equals("00:00:00 : the sky is cloudy"));

  }

  @Test
  public void test258() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test258"); }

    org.mafagafogigante.dungeon.entity.items.ItemPreset itemPreset0 = new org.mafagafogigante.dungeon.entity.items.ItemPreset();
    org.mafagafogigante.dungeon.entity.Integrity integrity1 = itemPreset0.getIntegrity();
    org.mafagafogigante.dungeon.entity.Integrity integrity2 = null;
    itemPreset0.setIntegrity(integrity2);
    org.mafagafogigante.dungeon.util.Percentage percentage4 = itemPreset0.getVisibility();
    java.lang.String str5 = itemPreset0.getType();
    itemPreset0.setIntegrityDecrementOnHit((int)(short)100);
    org.mafagafogigante.dungeon.util.Percentage percentage9 = new org.mafagafogigante.dungeon.util.Percentage((double)57);
    itemPreset0.setVisibility(percentage9);
    org.mafagafogigante.dungeon.util.Percentage percentage12 = new org.mafagafogigante.dungeon.util.Percentage((double)57);
    int i13 = percentage9.compareTo(percentage12);
    double d14 = percentage9.toDouble();
    org.mafagafogigante.dungeon.entity.Luminosity luminosity15 = new org.mafagafogigante.dungeon.entity.Luminosity(percentage9);
    boolean b16 = org.mafagafogigante.dungeon.game.Random.roll(percentage9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(integrity1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(percentage4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d14 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == true);

  }

  @Test
  public void test259() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test259"); }

    org.mafagafogigante.dungeon.game.DungeonString dungeonString1 = new org.mafagafogigante.dungeon.game.DungeonString("hi!");
    java.lang.String[] str_array6 = new java.lang.String[] { "hi!", "Damaged", "BattleStatistics{records=CounterMap{map={}}}", "" };
    dungeonString1.append(str_array6);
    org.mafagafogigante.dungeon.gui.WritingSpecifications writingSpecifications8 = null;
    org.mafagafogigante.dungeon.io.Writer.write((org.mafagafogigante.dungeon.game.Writable)dungeonString1, writingSpecifications8);
    java.awt.Color color10 = null;
    dungeonString1.setColor(color10);
    org.mafagafogigante.dungeon.date.Date date15 = new org.mafagafogigante.dungeon.date.Date(10L, 100L, 100L);
    org.mafagafogigante.dungeon.date.Date date19 = new org.mafagafogigante.dungeon.date.Date(10L, 100L, 100L);
    int i20 = date15.compareTo(date19);
    org.mafagafogigante.dungeon.game.PartOfDay partOfDay21 = org.mafagafogigante.dungeon.game.PartOfDay.getCorrespondingConstant(date15);
    java.lang.String[] str_array27 = new java.lang.String[] { "hi!", "visibilityCriteria=VisibilityCriteria{[]}", "visibilityCriteria=VisibilityCriteria{[]}", "Damaged", "hi!" };
    org.mafagafogigante.dungeon.util.Table table28 = new org.mafagafogigante.dungeon.util.Table(str_array27);
    java.util.List<org.mafagafogigante.dungeon.game.ColoredString> list_coloredString29 = table28.toColoredStringList();
    org.mafagafogigante.dungeon.game.ColoredString coloredString30 = org.mafagafogigante.dungeon.game.Random.select(list_coloredString29);
    boolean b31 = date15.equals((java.lang.Object)coloredString30);
    java.awt.Color color32 = coloredString30.getColor();
    dungeonString1.setColor(color32);
    org.mafagafogigante.dungeon.world.VisibilityCriterion[] visibilityCriterion_array35 = new org.mafagafogigante.dungeon.world.VisibilityCriterion[] {  };
    org.mafagafogigante.dungeon.world.VisibilityCriteria visibilityCriteria36 = new org.mafagafogigante.dungeon.world.VisibilityCriteria(visibilityCriterion_array35);
    org.mafagafogigante.dungeon.entity.creatures.Creature creature37 = null;
    org.mafagafogigante.dungeon.entity.creatures.Observer observer38 = new org.mafagafogigante.dungeon.entity.creatures.Observer(creature37);
    boolean b39 = visibilityCriteria36.isMetBy(observer38);
    org.mafagafogigante.dungeon.entity.items.Item[] item_array40 = new org.mafagafogigante.dungeon.entity.items.Item[] {  };
    java.util.ArrayList<org.mafagafogigante.dungeon.entity.items.Item> arraylist_item41 = new java.util.ArrayList<org.mafagafogigante.dungeon.entity.items.Item>();
    boolean b42 = java.util.Collections.addAll((java.util.Collection<org.mafagafogigante.dungeon.entity.items.Item>)arraylist_item41, item_array40);
    org.mafagafogigante.dungeon.game.DungeonString dungeonString44 = new org.mafagafogigante.dungeon.game.DungeonString("hi!");
    observer38.writeItemSight((java.util.List<org.mafagafogigante.dungeon.entity.items.Item>)arraylist_item41, dungeonString44);
    org.mafagafogigante.dungeon.world.VisibilityCriterion[] visibilityCriterion_array46 = new org.mafagafogigante.dungeon.world.VisibilityCriterion[] {  };
    org.mafagafogigante.dungeon.world.VisibilityCriteria visibilityCriteria47 = new org.mafagafogigante.dungeon.world.VisibilityCriteria(visibilityCriterion_array46);
    org.mafagafogigante.dungeon.entity.creatures.Creature creature48 = null;
    org.mafagafogigante.dungeon.entity.creatures.Observer observer49 = new org.mafagafogigante.dungeon.entity.creatures.Observer(creature48);
    boolean b50 = visibilityCriteria47.isMetBy(observer49);
    org.mafagafogigante.dungeon.entity.items.Item[] item_array51 = new org.mafagafogigante.dungeon.entity.items.Item[] {  };
    java.util.ArrayList<org.mafagafogigante.dungeon.entity.items.Item> arraylist_item52 = new java.util.ArrayList<org.mafagafogigante.dungeon.entity.items.Item>();
    boolean b53 = java.util.Collections.addAll((java.util.Collection<org.mafagafogigante.dungeon.entity.items.Item>)arraylist_item52, item_array51);
    org.mafagafogigante.dungeon.game.DungeonString dungeonString55 = new org.mafagafogigante.dungeon.game.DungeonString("hi!");
    observer49.writeItemSight((java.util.List<org.mafagafogigante.dungeon.entity.items.Item>)arraylist_item52, dungeonString55);
    org.mafagafogigante.dungeon.game.DungeonString dungeonString58 = new org.mafagafogigante.dungeon.game.DungeonString("");
    java.util.List<org.mafagafogigante.dungeon.game.ColoredString> list_coloredString59 = dungeonString58.toColoredStringList();
    observer38.writeItemSight((java.util.List<org.mafagafogigante.dungeon.entity.items.Item>)arraylist_item52, dungeonString58);
    org.mafagafogigante.dungeon.gui.WritingSpecifications writingSpecifications63 = new org.mafagafogigante.dungeon.gui.WritingSpecifications(false, 32);
    boolean b64 = writingSpecifications63.shouldWait();
    int i65 = writingSpecifications63.getWait();
    org.mafagafogigante.dungeon.io.Writer.write((org.mafagafogigante.dungeon.game.Writable)dungeonString58, writingSpecifications63);
    org.mafagafogigante.dungeon.date.Date date72 = new org.mafagafogigante.dungeon.date.Date(10L, 100L, 100L);
    org.mafagafogigante.dungeon.date.Date date76 = new org.mafagafogigante.dungeon.date.Date(10L, 100L, 100L);
    int i77 = date72.compareTo(date76);
    org.mafagafogigante.dungeon.game.PartOfDay partOfDay78 = org.mafagafogigante.dungeon.game.PartOfDay.getCorrespondingConstant(date72);
    java.lang.String[] str_array84 = new java.lang.String[] { "hi!", "visibilityCriteria=VisibilityCriteria{[]}", "visibilityCriteria=VisibilityCriteria{[]}", "Damaged", "hi!" };
    org.mafagafogigante.dungeon.util.Table table85 = new org.mafagafogigante.dungeon.util.Table(str_array84);
    java.util.List<org.mafagafogigante.dungeon.game.ColoredString> list_coloredString86 = table85.toColoredStringList();
    org.mafagafogigante.dungeon.game.ColoredString coloredString87 = org.mafagafogigante.dungeon.game.Random.select(list_coloredString86);
    boolean b88 = date72.equals((java.lang.Object)coloredString87);
    java.awt.Color color89 = coloredString87.getColor();
    org.mafagafogigante.dungeon.game.ColoredString coloredString90 = new org.mafagafogigante.dungeon.game.ColoredString("User: Nicholas\nTime: 15:42:12\nDate: 2017-04-09\nJava: Java version 1.8.0_121 by Oracle Corporation\nHeap: Using 41.5 MiB out of the allocated 154.5 MiB\nOS: Windows 10 (amd64) 10.0", color89);
    org.mafagafogigante.dungeon.game.ColoredString coloredString91 = new org.mafagafogigante.dungeon.game.ColoredString("Unarmed : UNARMED", color89);
    dungeonString58.setColor(color89);
    org.mafagafogigante.dungeon.game.ColoredString coloredString93 = new org.mafagafogigante.dungeon.game.ColoredString("Night", color89);
    dungeonString1.setColor(color89);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i20 == 0);
    org.junit.Assert.assertTrue("'" + partOfDay21 + "' != '" + org.mafagafogigante.dungeon.game.PartOfDay.MIDNIGHT + "'", partOfDay21.equals(org.mafagafogigante.dungeon.game.PartOfDay.MIDNIGHT));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_coloredString29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(coloredString30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(visibilityCriterion_array35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(item_array40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(visibilityCriterion_array46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b50 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(item_array51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_coloredString59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b64 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i65 == 32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i77 == 0);
    org.junit.Assert.assertTrue("'" + partOfDay78 + "' != '" + org.mafagafogigante.dungeon.game.PartOfDay.MIDNIGHT + "'", partOfDay78.equals(org.mafagafogigante.dungeon.game.PartOfDay.MIDNIGHT));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array84);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_coloredString86);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(coloredString87);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b88 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color89);

  }

  @Test
  public void test260() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test260"); }

    org.mafagafogigante.dungeon.entity.items.ItemPreset itemPreset0 = new org.mafagafogigante.dungeon.entity.items.ItemPreset();
    org.mafagafogigante.dungeon.entity.Integrity integrity1 = itemPreset0.getIntegrity();
    org.mafagafogigante.dungeon.entity.Integrity integrity2 = null;
    itemPreset0.setIntegrity(integrity2);
    org.mafagafogigante.dungeon.util.Percentage percentage4 = itemPreset0.getVisibility();
    org.mafagafogigante.dungeon.entity.Integrity integrity5 = itemPreset0.getIntegrity();
    java.lang.String str6 = itemPreset0.getText();
    java.lang.String str7 = itemPreset0.getType();
    org.mafagafogigante.dungeon.entity.Integrity integrity10 = new org.mafagafogigante.dungeon.entity.Integrity(1, 0);
    boolean b11 = integrity10.isMaximum();
    integrity10.incrementBy((int)(short)0);
    org.mafagafogigante.dungeon.util.Percentage percentage14 = integrity10.toPercentage();
    itemPreset0.setHitRate(percentage14);
    org.mafagafogigante.dungeon.game.Id id16 = itemPreset0.getId();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(integrity1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(percentage4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(integrity5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(percentage14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(id16);

  }

  @Test
  public void test261() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test261"); }

    org.mafagafogigante.dungeon.entity.Integrity integrity2 = new org.mafagafogigante.dungeon.entity.Integrity(1, 0);
    java.lang.String str3 = integrity2.toString();
    java.lang.String str4 = integrity2.toString();
    boolean b5 = integrity2.isMaximum();
    org.mafagafogigante.dungeon.entity.items.Item item6 = null;
    org.mafagafogigante.dungeon.entity.items.ItemIntegrity itemIntegrity7 = org.mafagafogigante.dungeon.entity.items.ItemIntegrity.makeItemIntegrity(integrity2, item6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "0/1"+ "'", str3.equals("0/1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "0/1"+ "'", str4.equals("0/1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(itemIntegrity7);

  }

  @Test
  public void test262() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test262"); }

    org.mafagafogigante.dungeon.entity.creatures.CreaturePreset creaturePreset0 = new org.mafagafogigante.dungeon.entity.creatures.CreaturePreset();
    org.mafagafogigante.dungeon.game.Id id1 = null;
    creaturePreset0.setWeaponId(id1);
    creaturePreset0.setAttack((int)(short)100);
    org.mafagafogigante.dungeon.game.Id id5 = creaturePreset0.getWeaponId();
    org.mafagafogigante.dungeon.entity.Luminosity luminosity6 = creaturePreset0.getLuminosity();
    org.mafagafogigante.dungeon.entity.items.ItemPreset itemPreset7 = new org.mafagafogigante.dungeon.entity.items.ItemPreset();
    org.mafagafogigante.dungeon.entity.Integrity integrity8 = itemPreset7.getIntegrity();
    org.mafagafogigante.dungeon.entity.Integrity integrity9 = null;
    itemPreset7.setIntegrity(integrity9);
    org.mafagafogigante.dungeon.util.Percentage percentage11 = itemPreset7.getVisibility();
    java.lang.String str12 = itemPreset7.getType();
    itemPreset7.setIntegrityDecrementOnHit((int)(short)100);
    org.mafagafogigante.dungeon.entity.TagSet<org.mafagafogigante.dungeon.entity.items.Item.Tag> tagset_tag15 = itemPreset7.getTagSet();
    org.mafagafogigante.dungeon.entity.Weight weight17 = org.mafagafogigante.dungeon.entity.Weight.newInstance((double)(byte)-1);
    itemPreset7.setWeight(weight17);
    java.lang.String str19 = weight17.toString();
    creaturePreset0.setWeight(weight17);
    org.mafagafogigante.dungeon.entity.Luminosity luminosity21 = creaturePreset0.getLuminosity();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(id5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(luminosity6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(integrity8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(percentage11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(tagset_tag15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(weight17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "0 kg"+ "'", str19.equals("0 kg"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(luminosity21);

  }

  @Test
  public void test263() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test263"); }

    org.mafagafogigante.dungeon.util.CircularList<org.mafagafogigante.dungeon.entity.creatures.Observer> circularlist_observer1 = new org.mafagafogigante.dungeon.util.CircularList<org.mafagafogigante.dungeon.entity.creatures.Observer>((int)'a');
    org.mafagafogigante.dungeon.entity.creatures.Creature creature2 = null;
    org.mafagafogigante.dungeon.entity.creatures.Observer observer3 = new org.mafagafogigante.dungeon.entity.creatures.Observer(creature2);
    org.mafagafogigante.dungeon.entity.items.Item[] item_array4 = new org.mafagafogigante.dungeon.entity.items.Item[] {  };
    java.util.ArrayList<org.mafagafogigante.dungeon.entity.items.Item> arraylist_item5 = new java.util.ArrayList<org.mafagafogigante.dungeon.entity.items.Item>();
    boolean b6 = java.util.Collections.addAll((java.util.Collection<org.mafagafogigante.dungeon.entity.items.Item>)arraylist_item5, item_array4);
    org.mafagafogigante.dungeon.game.DungeonString dungeonString8 = new org.mafagafogigante.dungeon.game.DungeonString("hi!");
    java.lang.String[] str_array13 = new java.lang.String[] { "hi!", "Damaged", "BattleStatistics{records=CounterMap{map={}}}", "" };
    dungeonString8.append(str_array13);
    observer3.writeItemSight((java.util.List<org.mafagafogigante.dungeon.entity.items.Item>)arraylist_item5, dungeonString8);
    circularlist_observer1.add(observer3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(item_array4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array13);

  }

  @Test
  public void test264() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test264"); }

    org.mafagafogigante.dungeon.game.DungeonString dungeonString3 = new org.mafagafogigante.dungeon.game.DungeonString("hi!");
    java.lang.String[] str_array8 = new java.lang.String[] { "hi!", "Damaged", "BattleStatistics{records=CounterMap{map={}}}", "" };
    dungeonString3.append(str_array8);
    java.awt.Color color10 = null;
    dungeonString3.setColor(color10);
    org.mafagafogigante.dungeon.date.Date date16 = new org.mafagafogigante.dungeon.date.Date(10L, 100L, 100L);
    org.mafagafogigante.dungeon.date.Date date20 = new org.mafagafogigante.dungeon.date.Date(10L, 100L, 100L);
    int i21 = date16.compareTo(date20);
    org.mafagafogigante.dungeon.game.PartOfDay partOfDay22 = org.mafagafogigante.dungeon.game.PartOfDay.getCorrespondingConstant(date16);
    java.lang.String[] str_array28 = new java.lang.String[] { "hi!", "visibilityCriteria=VisibilityCriteria{[]}", "visibilityCriteria=VisibilityCriteria{[]}", "Damaged", "hi!" };
    org.mafagafogigante.dungeon.util.Table table29 = new org.mafagafogigante.dungeon.util.Table(str_array28);
    java.util.List<org.mafagafogigante.dungeon.game.ColoredString> list_coloredString30 = table29.toColoredStringList();
    org.mafagafogigante.dungeon.game.ColoredString coloredString31 = org.mafagafogigante.dungeon.game.Random.select(list_coloredString30);
    boolean b32 = date16.equals((java.lang.Object)coloredString31);
    java.awt.Color color33 = coloredString31.getColor();
    org.mafagafogigante.dungeon.game.ColoredString coloredString34 = new org.mafagafogigante.dungeon.game.ColoredString("User: Nicholas\nTime: 15:42:12\nDate: 2017-04-09\nJava: Java version 1.8.0_121 by Oracle Corporation\nHeap: Using 41.5 MiB out of the allocated 154.5 MiB\nOS: Windows 10 (amd64) 10.0", color33);
    dungeonString3.setColor(color33);
    org.mafagafogigante.dungeon.game.DungeonString dungeonString36 = new org.mafagafogigante.dungeon.game.DungeonString("Enabled LightSource of luminosity of 0.00%", color33);
    org.mafagafogigante.dungeon.game.DungeonString dungeonString37 = new org.mafagafogigante.dungeon.game.DungeonString("{0, -1, 0}", color33);
    java.lang.String[] str_array40 = new java.lang.String[] { "", "" };
    org.mafagafogigante.dungeon.util.Table table41 = new org.mafagafogigante.dungeon.util.Table(str_array40);
    org.mafagafogigante.dungeon.util.Table table42 = new org.mafagafogigante.dungeon.util.Table(str_array40);
    dungeonString37.append(str_array40);
    org.mafagafogigante.dungeon.util.Table table44 = new org.mafagafogigante.dungeon.util.Table(str_array40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i21 == 0);
    org.junit.Assert.assertTrue("'" + partOfDay22 + "' != '" + org.mafagafogigante.dungeon.game.PartOfDay.MIDNIGHT + "'", partOfDay22.equals(org.mafagafogigante.dungeon.game.PartOfDay.MIDNIGHT));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_coloredString30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(coloredString31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array40);

  }

  @Test
  public void test265() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test265"); }

    org.mafagafogigante.dungeon.game.BlockedEntrances blockedEntrances0 = new org.mafagafogigante.dungeon.game.BlockedEntrances();
    org.mafagafogigante.dungeon.game.Direction direction1 = org.mafagafogigante.dungeon.game.Direction.EAST;
    boolean b3 = direction1.equalsIgnoreCase("");
    blockedEntrances0.block(direction1);
    org.mafagafogigante.dungeon.game.BlockedEntrances blockedEntrances5 = new org.mafagafogigante.dungeon.game.BlockedEntrances(blockedEntrances0);
    org.mafagafogigante.dungeon.game.Direction direction6 = org.mafagafogigante.dungeon.game.Direction.EAST;
    org.mafagafogigante.dungeon.game.Direction direction7 = direction6.invert();
    blockedEntrances5.block(direction7);
    org.mafagafogigante.dungeon.game.Direction direction9 = org.mafagafogigante.dungeon.game.Direction.EAST;
    java.lang.String str10 = direction9.toString();
    java.lang.String str11 = direction9.toString();
    blockedEntrances5.block(direction9);
    org.mafagafogigante.dungeon.game.Point point13 = direction9.getOffset();
    boolean b15 = direction9.equalsIgnoreCase("Spell : null");
    org.junit.Assert.assertTrue("'" + direction1 + "' != '" + org.mafagafogigante.dungeon.game.Direction.EAST + "'", direction1.equals(org.mafagafogigante.dungeon.game.Direction.EAST));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    org.junit.Assert.assertTrue("'" + direction6 + "' != '" + org.mafagafogigante.dungeon.game.Direction.EAST + "'", direction6.equals(org.mafagafogigante.dungeon.game.Direction.EAST));
    org.junit.Assert.assertTrue("'" + direction7 + "' != '" + org.mafagafogigante.dungeon.game.Direction.WEST + "'", direction7.equals(org.mafagafogigante.dungeon.game.Direction.WEST));
    org.junit.Assert.assertTrue("'" + direction9 + "' != '" + org.mafagafogigante.dungeon.game.Direction.EAST + "'", direction9.equals(org.mafagafogigante.dungeon.game.Direction.EAST));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "East"+ "'", str10.equals("East"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "East"+ "'", str11.equals("East"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(point13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);

  }

  @Test
  public void test266() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test266"); }

    org.mafagafogigante.dungeon.date.Date date6 = new org.mafagafogigante.dungeon.date.Date((long)100, 100L, (long)81, (long)(byte)-1, (long)152, (-1L));
    org.mafagafogigante.dungeon.game.PartOfDay partOfDay7 = org.mafagafogigante.dungeon.game.PartOfDay.DUSK;
    int i8 = org.mafagafogigante.dungeon.game.PartOfDay.getSecondsToNext(date6, partOfDay7);
    java.lang.String str9 = partOfDay7.toString();
    org.junit.Assert.assertTrue("'" + partOfDay7 + "' != '" + org.mafagafogigante.dungeon.game.PartOfDay.DUSK + "'", partOfDay7.equals(org.mafagafogigante.dungeon.game.PartOfDay.DUSK));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 57600);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "Dusk"+ "'", str9.equals("Dusk"));

  }

  @Test
  public void test267() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test267"); }

    org.mafagafogigante.dungeon.schema.JsonRule jsonRule0 = org.mafagafogigante.dungeon.schema.rules.JsonRuleFactory.makeIdRule();
    org.mafagafogigante.dungeon.schema.JsonRule jsonRule2 = org.mafagafogigante.dungeon.schema.rules.JsonRuleFactory.makeArraySizeRule((int)(short)0);
    java.util.Map<java.lang.String,org.mafagafogigante.dungeon.schema.JsonRule> map_str_jsonRule3 = null;
    org.mafagafogigante.dungeon.schema.JsonRule jsonRule4 = org.mafagafogigante.dungeon.schema.rules.JsonRuleFactory.makeObjectRule(map_str_jsonRule3);
    org.mafagafogigante.dungeon.schema.JsonRule[] jsonRule_array5 = new org.mafagafogigante.dungeon.schema.JsonRule[] { jsonRule0, jsonRule2, jsonRule4 };
    java.util.ArrayList<org.mafagafogigante.dungeon.schema.JsonRule> arraylist_jsonRule6 = new java.util.ArrayList<org.mafagafogigante.dungeon.schema.JsonRule>();
    boolean b7 = java.util.Collections.addAll((java.util.Collection<org.mafagafogigante.dungeon.schema.JsonRule>)arraylist_jsonRule6, jsonRule_array5);
    org.mafagafogigante.dungeon.schema.JsonRule jsonRule8 = org.mafagafogigante.dungeon.schema.rules.JsonRuleFactory.makeFixedArrayRule((java.util.List<org.mafagafogigante.dungeon.schema.JsonRule>)arraylist_jsonRule6);
    org.mafagafogigante.dungeon.schema.JsonRule jsonRule9 = org.mafagafogigante.dungeon.schema.rules.JsonRuleFactory.makeFixedArrayRule((java.util.List<org.mafagafogigante.dungeon.schema.JsonRule>)arraylist_jsonRule6);
    org.mafagafogigante.dungeon.schema.JsonRule jsonRule10 = org.mafagafogigante.dungeon.schema.rules.JsonRuleFactory.makeFixedArrayRule((java.util.List<org.mafagafogigante.dungeon.schema.JsonRule>)arraylist_jsonRule6);
    org.mafagafogigante.dungeon.schema.JsonRule jsonRule11 = org.mafagafogigante.dungeon.schema.rules.JsonRuleFactory.makeFixedArrayRule((java.util.List<org.mafagafogigante.dungeon.schema.JsonRule>)arraylist_jsonRule6);
    org.mafagafogigante.dungeon.schema.JsonRule jsonRule12 = org.mafagafogigante.dungeon.schema.rules.JsonRuleFactory.makeFixedArrayRule((java.util.List<org.mafagafogigante.dungeon.schema.JsonRule>)arraylist_jsonRule6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonRule0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonRule2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonRule4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonRule_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonRule8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonRule9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonRule10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonRule11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonRule12);

  }

  @Test
  public void test268() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test268"); }

    org.mafagafogigante.dungeon.game.Direction direction0 = org.mafagafogigante.dungeon.game.Direction.EAST;
    java.lang.String str1 = direction0.toString();
    org.mafagafogigante.dungeon.game.Direction direction2 = direction0.invert();
    org.mafagafogigante.dungeon.game.Direction direction3 = direction2.invert();
    org.junit.Assert.assertTrue("'" + direction0 + "' != '" + org.mafagafogigante.dungeon.game.Direction.EAST + "'", direction0.equals(org.mafagafogigante.dungeon.game.Direction.EAST));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "East"+ "'", str1.equals("East"));
    org.junit.Assert.assertTrue("'" + direction2 + "' != '" + org.mafagafogigante.dungeon.game.Direction.WEST + "'", direction2.equals(org.mafagafogigante.dungeon.game.Direction.WEST));
    org.junit.Assert.assertTrue("'" + direction3 + "' != '" + org.mafagafogigante.dungeon.game.Direction.EAST + "'", direction3.equals(org.mafagafogigante.dungeon.game.Direction.EAST));

  }

  @Test
  public void test269() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test269"); }

    org.mafagafogigante.dungeon.entity.creatures.Creature creature0 = null;
    org.mafagafogigante.dungeon.entity.items.CreatureInventory creatureInventory3 = new org.mafagafogigante.dungeon.entity.items.CreatureInventory(creature0, 32, (double)'4');
    org.mafagafogigante.dungeon.entity.items.Item item4 = null;
    boolean b5 = creatureInventory3.hasItem(item4);
    org.mafagafogigante.dungeon.entity.items.Item item6 = null;
    // The following exception was thrown during execution in test generation
    try {
    creatureInventory3.removeItem(item6);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);

  }

  @Test
  public void test270() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test270"); }

    org.mafagafogigante.dungeon.entity.creatures.CreaturePreset creaturePreset0 = new org.mafagafogigante.dungeon.entity.creatures.CreaturePreset();
    org.mafagafogigante.dungeon.game.Id id1 = null;
    creaturePreset0.setWeaponId(id1);
    creaturePreset0.setAttack(57);
    org.mafagafogigante.dungeon.util.CounterMap<java.util.RandomAccess> countermap_randomAccess5 = new org.mafagafogigante.dungeon.util.CounterMap<java.util.RandomAccess>();
    org.mafagafogigante.dungeon.entity.creatures.CreaturePreset creaturePreset6 = new org.mafagafogigante.dungeon.entity.creatures.CreaturePreset();
    org.mafagafogigante.dungeon.game.Id id7 = null;
    creaturePreset6.setWeaponId(id7);
    creaturePreset6.setAttack(57);
    org.mafagafogigante.dungeon.entity.Luminosity luminosity11 = creaturePreset6.getLuminosity();
    org.mafagafogigante.dungeon.entity.creatures.CreaturePreset creaturePreset12 = new org.mafagafogigante.dungeon.entity.creatures.CreaturePreset();
    org.mafagafogigante.dungeon.game.Id id13 = null;
    creaturePreset12.setWeaponId(id13);
    creaturePreset12.setAttack(57);
    org.mafagafogigante.dungeon.game.Id[] id_array17 = new org.mafagafogigante.dungeon.game.Id[] {  };
    java.util.ArrayList<org.mafagafogigante.dungeon.game.Id> arraylist_id18 = new java.util.ArrayList<org.mafagafogigante.dungeon.game.Id>();
    boolean b19 = java.util.Collections.addAll((java.util.Collection<org.mafagafogigante.dungeon.game.Id>)arraylist_id18, id_array17);
    creaturePreset12.setItems((java.util.List<org.mafagafogigante.dungeon.game.Id>)arraylist_id18);
    creaturePreset6.setItems((java.util.List<org.mafagafogigante.dungeon.game.Id>)arraylist_id18);
    countermap_randomAccess5.incrementCounter((java.util.RandomAccess)arraylist_id18, (java.lang.Integer)10);
    creaturePreset0.setItems((java.util.List<org.mafagafogigante.dungeon.game.Id>)arraylist_id18);
    org.mafagafogigante.dungeon.entity.creatures.CreaturePreset creaturePreset25 = new org.mafagafogigante.dungeon.entity.creatures.CreaturePreset();
    org.mafagafogigante.dungeon.game.Id id26 = null;
    creaturePreset25.setWeaponId(id26);
    creaturePreset25.setAttack(57);
    org.mafagafogigante.dungeon.entity.Luminosity luminosity30 = creaturePreset25.getLuminosity();
    int i31 = creaturePreset25.getInventoryItemLimit();
    org.mafagafogigante.dungeon.game.PartOfDay partOfDay32 = org.mafagafogigante.dungeon.game.PartOfDay.NIGHT;
    org.mafagafogigante.dungeon.entity.Luminosity luminosity33 = partOfDay32.getLuminosity();
    org.mafagafogigante.dungeon.game.Name name34 = partOfDay32.getName();
    java.lang.String str36 = name34.getQuantifiedName((int)'a');
    java.lang.String str37 = name34.getSingular();
    java.lang.String str38 = name34.getPlural();
    org.mafagafogigante.dungeon.entity.items.ItemPreset itemPreset39 = new org.mafagafogigante.dungeon.entity.items.ItemPreset();
    org.mafagafogigante.dungeon.entity.Integrity integrity40 = itemPreset39.getIntegrity();
    org.mafagafogigante.dungeon.entity.Integrity integrity41 = null;
    itemPreset39.setIntegrity(integrity41);
    org.mafagafogigante.dungeon.entity.Integrity integrity43 = itemPreset39.getIntegrity();
    org.mafagafogigante.dungeon.util.Percentage percentage44 = itemPreset39.getHitRate();
    boolean b45 = name34.equals((java.lang.Object)percentage44);
    creaturePreset25.setName(name34);
    java.lang.String str48 = name34.getQuantifiedName(43200);
    creaturePreset0.setName(name34);
    java.lang.String str51 = name34.getQuantifiedName((int)'a');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(luminosity11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(id_array17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(luminosity30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i31 == 0);
    org.junit.Assert.assertTrue("'" + partOfDay32 + "' != '" + org.mafagafogigante.dungeon.game.PartOfDay.NIGHT + "'", partOfDay32.equals(org.mafagafogigante.dungeon.game.PartOfDay.NIGHT));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(luminosity33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(name34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str36 + "' != '" + "a few Nights"+ "'", str36.equals("a few Nights"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str37 + "' != '" + "Night"+ "'", str37.equals("Night"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str38 + "' != '" + "Nights"+ "'", str38.equals("Nights"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(integrity40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(integrity43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(percentage44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str48 + "' != '" + "a few Nights"+ "'", str48.equals("a few Nights"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str51 + "' != '" + "a few Nights"+ "'", str51.equals("a few Nights"));

  }

  @Test
  public void test271() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test271"); }

    org.mafagafogigante.dungeon.entity.items.ItemPreset itemPreset1 = new org.mafagafogigante.dungeon.entity.items.ItemPreset();
    org.mafagafogigante.dungeon.entity.Integrity integrity2 = itemPreset1.getIntegrity();
    itemPreset1.setIntegrityDecrementOnEat((-1));
    org.mafagafogigante.dungeon.entity.Weight weight5 = itemPreset1.getWeight();
    itemPreset1.setDrinkableHealing((int)(byte)1);
    org.mafagafogigante.dungeon.entity.items.ItemPreset itemPreset8 = new org.mafagafogigante.dungeon.entity.items.ItemPreset();
    org.mafagafogigante.dungeon.entity.Integrity integrity9 = itemPreset8.getIntegrity();
    org.mafagafogigante.dungeon.entity.Integrity integrity10 = null;
    itemPreset8.setIntegrity(integrity10);
    org.mafagafogigante.dungeon.util.Percentage percentage12 = itemPreset8.getVisibility();
    java.lang.String str13 = itemPreset8.getType();
    itemPreset8.setIntegrityDecrementOnHit((int)(short)100);
    org.mafagafogigante.dungeon.util.Percentage percentage17 = new org.mafagafogigante.dungeon.util.Percentage((double)57);
    itemPreset8.setVisibility(percentage17);
    itemPreset1.setVisibility(percentage17);
    org.mafagafogigante.dungeon.util.Percentage percentage20 = itemPreset1.getVisibility();
    org.mafagafogigante.dungeon.entity.items.WeaponComponent weaponComponent22 = new org.mafagafogigante.dungeon.entity.items.WeaponComponent(97, percentage20, 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(integrity2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(weight5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(integrity9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(percentage12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(percentage20);

  }

  @Test
  public void test272() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test272"); }

    org.mafagafogigante.dungeon.entity.items.ItemPreset itemPreset0 = new org.mafagafogigante.dungeon.entity.items.ItemPreset();
    org.mafagafogigante.dungeon.entity.Integrity integrity1 = itemPreset0.getIntegrity();
    org.mafagafogigante.dungeon.entity.Integrity integrity2 = null;
    itemPreset0.setIntegrity(integrity2);
    org.mafagafogigante.dungeon.util.Percentage percentage4 = itemPreset0.getVisibility();
    java.lang.String str5 = itemPreset0.getType();
    itemPreset0.setIntegrityDecrementOnHit((int)(short)100);
    org.mafagafogigante.dungeon.util.Percentage percentage9 = new org.mafagafogigante.dungeon.util.Percentage((double)57);
    itemPreset0.setVisibility(percentage9);
    itemPreset0.setIntegrityDecrementPerDose((int)(short)1);
    org.mafagafogigante.dungeon.entity.Entity[] entity_array13 = new org.mafagafogigante.dungeon.entity.Entity[] {  };
    java.util.ArrayList<org.mafagafogigante.dungeon.entity.Entity> arraylist_entity14 = new java.util.ArrayList<org.mafagafogigante.dungeon.entity.Entity>();
    boolean b15 = java.util.Collections.addAll((java.util.Collection<org.mafagafogigante.dungeon.entity.Entity>)arraylist_entity14, entity_array13);
    org.mafagafogigante.dungeon.entity.Luminosity luminosity16 = org.mafagafogigante.dungeon.entity.Luminosity.resultantLuminosity((java.util.Collection<org.mafagafogigante.dungeon.entity.Entity>)arraylist_entity14);
    org.mafagafogigante.dungeon.util.Percentage percentage17 = luminosity16.toPercentage();
    itemPreset0.setHitRate(percentage17);
    org.mafagafogigante.dungeon.util.Percentage percentage19 = null;
    // The following exception was thrown during execution in test generation
    try {
    boolean b20 = percentage17.biggerThanOrEqualTo(percentage19);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(integrity1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(percentage4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(entity_array13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(luminosity16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(percentage17);

  }

  @Test
  public void test273() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test273"); }

    boolean b1 = org.mafagafogigante.dungeon.game.Random.roll((double)10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == true);

  }

  @Test
  public void test274() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test274"); }

    org.mafagafogigante.dungeon.commands.CommandDescription commandDescription2 = new org.mafagafogigante.dungeon.commands.CommandDescription("97-01-01 00:00:00", "A few");
    java.lang.String str3 = commandDescription2.getName();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "97-01-01 00:00:00"+ "'", str3.equals("97-01-01 00:00:00"));

  }

  @Test
  public void test275() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test275"); }

    org.mafagafogigante.dungeon.entity.items.ItemPreset itemPreset0 = new org.mafagafogigante.dungeon.entity.items.ItemPreset();
    org.mafagafogigante.dungeon.entity.Integrity integrity1 = itemPreset0.getIntegrity();
    org.mafagafogigante.dungeon.util.Percentage percentage2 = itemPreset0.getVisibility();
    java.lang.String str3 = itemPreset0.getType();
    int i4 = itemPreset0.getDamage();
    long long5 = itemPreset0.getPutrefactionPeriod();
    org.mafagafogigante.dungeon.entity.creatures.CreaturePreset creaturePreset6 = new org.mafagafogigante.dungeon.entity.creatures.CreaturePreset();
    org.mafagafogigante.dungeon.game.Id id7 = null;
    creaturePreset6.setWeaponId(id7);
    creaturePreset6.setAttack(57);
    org.mafagafogigante.dungeon.entity.Luminosity luminosity11 = creaturePreset6.getLuminosity();
    int i12 = creaturePreset6.getInventoryItemLimit();
    double d13 = creaturePreset6.getInventoryWeightLimit();
    org.mafagafogigante.dungeon.entity.Luminosity luminosity14 = creaturePreset6.getLuminosity();
    itemPreset0.setLuminosity(luminosity14);
    org.mafagafogigante.dungeon.entity.LightSource lightSource16 = new org.mafagafogigante.dungeon.entity.LightSource(luminosity14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(integrity1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(percentage2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long5 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(luminosity11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d13 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(luminosity14);

  }

  @Test
  public void test276() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test276"); }

    org.mafagafogigante.dungeon.entity.Integrity integrity2 = new org.mafagafogigante.dungeon.entity.Integrity(1, 0);
    boolean b3 = integrity2.isMaximum();
    org.mafagafogigante.dungeon.entity.items.Item item4 = null;
    org.mafagafogigante.dungeon.entity.items.ItemIntegrity itemIntegrity5 = org.mafagafogigante.dungeon.entity.items.ItemIntegrity.makeItemIntegrity(integrity2, item4);
    int i6 = integrity2.getCurrent();
    org.mafagafogigante.dungeon.entity.Integrity integrity7 = new org.mafagafogigante.dungeon.entity.Integrity(integrity2);
    integrity7.incrementBy(57600);
    boolean b10 = integrity7.isMaximum();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(itemIntegrity5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);

  }

  @Test
  public void test277() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test277"); }

    org.mafagafogigante.dungeon.entity.creatures.Creature creature1 = null;
    org.mafagafogigante.dungeon.entity.creatures.CreatureHealth creatureHealth2 = org.mafagafogigante.dungeon.entity.creatures.CreatureHealth.makeCreatureHealth(90, creature1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(creatureHealth2);

  }

  @Test
  public void test278() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test278"); }

    org.mafagafogigante.dungeon.stats.WorldStatistics worldStatistics0 = new org.mafagafogigante.dungeon.stats.WorldStatistics();
    worldStatistics0.addLocation("User: Nicholas\nTime: 15:42:12\nDate: 2017-04-09\nJava: Java version 1.8.0_121 by Oracle Corporation\nHeap: Using 34.4 MiB out of the allocated 123.0 MiB\nOS: Windows 10 (amd64) 10.0");
    int i3 = worldStatistics0.getSpawnCount();
    org.mafagafogigante.dungeon.util.CounterMap<java.lang.String> countermap_str4 = worldStatistics0.getLocationCounter();
    boolean b5 = countermap_str4.isNotEmpty();
    java.util.Iterator<java.lang.String> iterator_str6 = countermap_str4.iterator();
    countermap_str4.incrementCounter("BattleStatisticsRequirement{query=null, count=100}", (java.lang.Integer)46800);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(countermap_str4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_str6);

  }

  @Test
  public void test279() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test279"); }

    org.mafagafogigante.dungeon.logging.DungeonLogger.info("97 Nights");

  }

  @Test
  public void test280() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test280"); }

    org.mafagafogigante.dungeon.stats.Statistics statistics0 = new org.mafagafogigante.dungeon.stats.Statistics();
    statistics0.writeStatistics();
    statistics0.writeStatistics();
    statistics0.writeStatistics();
    org.mafagafogigante.dungeon.commands.IssuedCommand issuedCommand5 = new org.mafagafogigante.dungeon.commands.IssuedCommand("BattleStatistics{records=CounterMap{map={}}}");
    org.mafagafogigante.dungeon.commands.PreparedIssuedCommand preparedIssuedCommand6 = org.mafagafogigante.dungeon.commands.IssuedCommandProcessor.prepareIssuedCommand(issuedCommand5);
    statistics0.addCommand(issuedCommand5);
    org.mafagafogigante.dungeon.commands.IssuedCommandEvaluation issuedCommandEvaluation8 = org.mafagafogigante.dungeon.commands.IssuedCommandProcessor.evaluateIssuedCommand(issuedCommand5);
    java.util.List<java.lang.String> list_str9 = issuedCommandEvaluation8.getSuggestions();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(preparedIssuedCommand6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(issuedCommandEvaluation8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_str9);

  }

  @Test
  public void test281() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test281"); }

    org.mafagafogigante.dungeon.entity.items.Item[] item_array0 = new org.mafagafogigante.dungeon.entity.items.Item[] {  };
    java.util.ArrayList<org.mafagafogigante.dungeon.entity.items.Item> arraylist_item1 = new java.util.ArrayList<org.mafagafogigante.dungeon.entity.items.Item>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.mafagafogigante.dungeon.entity.items.Item>)arraylist_item1, item_array0);
    org.mafagafogigante.dungeon.game.DungeonString dungeonString4 = new org.mafagafogigante.dungeon.game.DungeonString("hi!");
    java.lang.String[] str_array9 = new java.lang.String[] { "hi!", "Damaged", "BattleStatistics{records=CounterMap{map={}}}", "" };
    dungeonString4.append(str_array9);
    java.lang.String str11 = dungeonString4.toString();
    org.mafagafogigante.dungeon.game.Point point15 = new org.mafagafogigante.dungeon.game.Point(10, (int)'a', 0);
    java.lang.String[] str_array18 = new java.lang.String[] { "", "" };
    org.mafagafogigante.dungeon.util.Table table19 = new org.mafagafogigante.dungeon.util.Table(str_array18);
    boolean b20 = point15.equals((java.lang.Object)str_array18);
    dungeonString4.append(str_array18);
    java.util.List<org.mafagafogigante.dungeon.entity.items.Item> list_item22 = org.mafagafogigante.dungeon.entity.creatures.HeroUtils.findItems((java.util.List<org.mafagafogigante.dungeon.entity.items.Item>)arraylist_item1, str_array18);
    // The following exception was thrown during execution in test generation
    try {
    org.mafagafogigante.dungeon.io.PoemWriter.parsePoemCommand(str_array18);
      org.junit.Assert.fail("Expected exception of type java.lang.NoClassDefFoundError");
    } catch (java.lang.NoClassDefFoundError e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(item_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "DungeonString{coloredStringList=[ColoredString{string='hi!hi!DamagedBattleStatistics{records=CounterMap{map={}}}', color=java.awt.Color[r=192,g=192,b=192]}], currentColor=java.awt.Color[r=192,g=192,b=192]}"+ "'", str11.equals("DungeonString{coloredStringList=[ColoredString{string='hi!hi!DamagedBattleStatistics{records=CounterMap{map={}}}', color=java.awt.Color[r=192,g=192,b=192]}], currentColor=java.awt.Color[r=192,g=192,b=192]}"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_item22);

  }

  @Test
  public void test282() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test282"); }

    org.mafagafogigante.dungeon.entity.creatures.Creature creature1 = null;
    org.mafagafogigante.dungeon.entity.creatures.CreatureHealth creatureHealth2 = org.mafagafogigante.dungeon.entity.creatures.CreatureHealth.makeCreatureHealth(100, creature1);
    int i3 = creatureHealth2.getMaximum();
    boolean b4 = creatureHealth2.isDead();
    boolean b5 = creatureHealth2.isFull();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(creatureHealth2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);

  }

  @Test
  public void test283() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test283"); }

    org.mafagafogigante.dungeon.entity.items.ItemPreset itemPreset0 = new org.mafagafogigante.dungeon.entity.items.ItemPreset();
    org.mafagafogigante.dungeon.entity.Integrity integrity1 = itemPreset0.getIntegrity();
    org.mafagafogigante.dungeon.entity.Integrity integrity2 = null;
    itemPreset0.setIntegrity(integrity2);
    org.mafagafogigante.dungeon.util.Percentage percentage4 = itemPreset0.getVisibility();
    java.lang.String str5 = itemPreset0.getType();
    itemPreset0.setIntegrityDecrementOnHit((int)(short)100);
    org.mafagafogigante.dungeon.entity.TagSet<org.mafagafogigante.dungeon.entity.items.Item.Tag> tagset_tag8 = itemPreset0.getTagSet();
    org.mafagafogigante.dungeon.entity.Weight weight10 = org.mafagafogigante.dungeon.entity.Weight.newInstance((double)(byte)-1);
    itemPreset0.setWeight(weight10);
    org.mafagafogigante.dungeon.entity.items.ItemPreset itemPreset12 = new org.mafagafogigante.dungeon.entity.items.ItemPreset();
    org.mafagafogigante.dungeon.entity.Integrity integrity13 = itemPreset12.getIntegrity();
    org.mafagafogigante.dungeon.entity.Integrity integrity14 = null;
    itemPreset12.setIntegrity(integrity14);
    org.mafagafogigante.dungeon.util.Percentage percentage17 = new org.mafagafogigante.dungeon.util.Percentage((double)'#');
    itemPreset12.setHitRate(percentage17);
    itemPreset0.setHitRate(percentage17);
    org.mafagafogigante.dungeon.entity.Integrity integrity22 = new org.mafagafogigante.dungeon.entity.Integrity(1, 0);
    java.lang.String str23 = integrity22.toString();
    java.lang.String str24 = integrity22.toString();
    boolean b25 = integrity22.isMaximum();
    int i26 = integrity22.getMaximum();
    java.lang.String str27 = integrity22.toString();
    itemPreset0.setIntegrity(integrity22);
    boolean b29 = integrity22.isZero();
    int i30 = integrity22.getCurrent();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(integrity1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(percentage4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(tagset_tag8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(weight10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(integrity13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + "0/1"+ "'", str23.equals("0/1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str24 + "' != '" + "0/1"+ "'", str24.equals("0/1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i26 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str27 + "' != '" + "0/1"+ "'", str27.equals("0/1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i30 == 0);

  }

  @Test
  public void test284() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test284"); }

    org.mafagafogigante.dungeon.game.Direction direction0 = org.mafagafogigante.dungeon.game.Direction.EAST;
    boolean b2 = direction0.equalsIgnoreCase("");
    org.mafagafogigante.dungeon.game.Direction direction3 = direction0.invert();
    java.lang.String str4 = direction0.toString();
    org.junit.Assert.assertTrue("'" + direction0 + "' != '" + org.mafagafogigante.dungeon.game.Direction.EAST + "'", direction0.equals(org.mafagafogigante.dungeon.game.Direction.EAST));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + direction3 + "' != '" + org.mafagafogigante.dungeon.game.Direction.WEST + "'", direction3.equals(org.mafagafogigante.dungeon.game.Direction.WEST));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "East"+ "'", str4.equals("East"));

  }

  @Test
  public void test285() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test285"); }

    org.mafagafogigante.dungeon.io.Version version0 = new org.mafagafogigante.dungeon.io.Version();
    java.lang.String str1 = version0.toString();
    java.lang.String str2 = version0.toString();
    java.lang.String str3 = version0.toString();
    java.lang.String str4 = version0.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "v6.2.0"+ "'", str1.equals("v6.2.0"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "v6.2.0"+ "'", str2.equals("v6.2.0"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "v6.2.0"+ "'", str3.equals("v6.2.0"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "v6.2.0"+ "'", str4.equals("v6.2.0"));

  }

  @Test
  public void test286() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test286"); }

    org.mafagafogigante.dungeon.game.Id id0 = null;
    org.mafagafogigante.dungeon.entity.items.BookComponent bookComponent2 = new org.mafagafogigante.dungeon.entity.items.BookComponent(id0, "Night");
    org.mafagafogigante.dungeon.game.Id id3 = bookComponent2.getSpellId();
    boolean b4 = bookComponent2.isDidactic();
    int i5 = bookComponent2.getTimeToRead();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(id3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 5);

  }

  @Test
  public void test287() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test287"); }

    org.mafagafogigante.dungeon.entity.Integrity integrity2 = new org.mafagafogigante.dungeon.entity.Integrity(1, 0);
    boolean b3 = integrity2.isMaximum();
    org.mafagafogigante.dungeon.entity.items.Item item4 = null;
    org.mafagafogigante.dungeon.entity.items.ItemIntegrity itemIntegrity5 = org.mafagafogigante.dungeon.entity.items.ItemIntegrity.makeItemIntegrity(integrity2, item4);
    int i6 = integrity2.getCurrent();
    org.mafagafogigante.dungeon.entity.items.Item item7 = null;
    org.mafagafogigante.dungeon.entity.items.ItemIntegrity itemIntegrity8 = org.mafagafogigante.dungeon.entity.items.ItemIntegrity.makeItemIntegrity(integrity2, item7);
    int i9 = itemIntegrity8.getMaximum();
    java.lang.String str10 = itemIntegrity8.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(itemIntegrity5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(itemIntegrity8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "ItemIntegrity{integrity=0/1, item=null}"+ "'", str10.equals("ItemIntegrity{integrity=0/1, item=null}"));

  }

  @Test
  public void test288() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test288"); }

    org.mafagafogigante.dungeon.schema.JsonRule jsonRule2 = org.mafagafogigante.dungeon.schema.rules.JsonRuleFactory.makeBoundIntegerRule(17518, (int)(short)10);
    org.mafagafogigante.dungeon.schema.JsonRule jsonRule3 = org.mafagafogigante.dungeon.schema.rules.JsonRuleFactory.makeOptionalRule(jsonRule2);
    org.mafagafogigante.dungeon.schema.JsonRule jsonRule4 = org.mafagafogigante.dungeon.schema.rules.JsonRuleFactory.makeVariableArrayRule(jsonRule3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonRule2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonRule3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonRule4);

  }

  @Test
  public void test289() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test289"); }

    org.mafagafogigante.dungeon.game.PartOfDay partOfDay0 = org.mafagafogigante.dungeon.game.PartOfDay.NIGHT;
    org.mafagafogigante.dungeon.entity.Luminosity luminosity1 = partOfDay0.getLuminosity();
    org.mafagafogigante.dungeon.game.Name name2 = partOfDay0.getName();
    org.mafagafogigante.dungeon.game.QuantificationMode quantificationMode4 = org.mafagafogigante.dungeon.game.QuantificationMode.NUMBER;
    java.lang.String str5 = name2.getQuantifiedName((int)'4', quantificationMode4);
    java.lang.String str7 = name2.getQuantifiedName(3600);
    java.lang.String str8 = name2.getPlural();
    java.lang.String str9 = name2.getSingular();
    org.junit.Assert.assertTrue("'" + partOfDay0 + "' != '" + org.mafagafogigante.dungeon.game.PartOfDay.NIGHT + "'", partOfDay0.equals(org.mafagafogigante.dungeon.game.PartOfDay.NIGHT));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(luminosity1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(name2);
    org.junit.Assert.assertTrue("'" + quantificationMode4 + "' != '" + org.mafagafogigante.dungeon.game.QuantificationMode.NUMBER + "'", quantificationMode4.equals(org.mafagafogigante.dungeon.game.QuantificationMode.NUMBER));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "52 Nights"+ "'", str5.equals("52 Nights"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "a few Nights"+ "'", str7.equals("a few Nights"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "Nights"+ "'", str8.equals("Nights"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "Night"+ "'", str9.equals("Night"));

  }

  @Test
  public void test290() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test290"); }

    org.mafagafogigante.dungeon.entity.items.Item[] item_array0 = new org.mafagafogigante.dungeon.entity.items.Item[] {  };
    java.util.ArrayList<org.mafagafogigante.dungeon.entity.items.Item> arraylist_item1 = new java.util.ArrayList<org.mafagafogigante.dungeon.entity.items.Item>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.mafagafogigante.dungeon.entity.items.Item>)arraylist_item1, item_array0);
    org.mafagafogigante.dungeon.game.DungeonString dungeonString4 = new org.mafagafogigante.dungeon.game.DungeonString("hi!");
    java.lang.String[] str_array9 = new java.lang.String[] { "hi!", "Damaged", "BattleStatistics{records=CounterMap{map={}}}", "" };
    dungeonString4.append(str_array9);
    java.lang.String str11 = dungeonString4.toString();
    org.mafagafogigante.dungeon.game.Point point15 = new org.mafagafogigante.dungeon.game.Point(10, (int)'a', 0);
    java.lang.String[] str_array18 = new java.lang.String[] { "", "" };
    org.mafagafogigante.dungeon.util.Table table19 = new org.mafagafogigante.dungeon.util.Table(str_array18);
    boolean b20 = point15.equals((java.lang.Object)str_array18);
    dungeonString4.append(str_array18);
    java.util.List<org.mafagafogigante.dungeon.entity.items.Item> list_item22 = org.mafagafogigante.dungeon.entity.creatures.HeroUtils.findItems((java.util.List<org.mafagafogigante.dungeon.entity.items.Item>)arraylist_item1, str_array18);
    org.mafagafogigante.dungeon.util.Table table23 = new org.mafagafogigante.dungeon.util.Table(str_array18);
    java.lang.String[] str_array29 = new java.lang.String[] { "hi!", "visibilityCriteria=VisibilityCriteria{[]}", "visibilityCriteria=VisibilityCriteria{[]}", "Damaged", "hi!" };
    org.mafagafogigante.dungeon.util.Table table30 = new org.mafagafogigante.dungeon.util.Table(str_array29);
    org.mafagafogigante.dungeon.util.Table table31 = new org.mafagafogigante.dungeon.util.Table(str_array29);
    // The following exception was thrown during execution in test generation
    try {
    table23.insertRow(str_array29);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(item_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "DungeonString{coloredStringList=[ColoredString{string='hi!hi!DamagedBattleStatistics{records=CounterMap{map={}}}', color=java.awt.Color[r=192,g=192,b=192]}], currentColor=java.awt.Color[r=192,g=192,b=192]}"+ "'", str11.equals("DungeonString{coloredStringList=[ColoredString{string='hi!hi!DamagedBattleStatistics{records=CounterMap{map={}}}', color=java.awt.Color[r=192,g=192,b=192]}], currentColor=java.awt.Color[r=192,g=192,b=192]}"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_item22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array29);

  }

  @Test
  public void test291() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test291"); }

    org.mafagafogigante.dungeon.entity.creatures.CreaturePreset creaturePreset0 = new org.mafagafogigante.dungeon.entity.creatures.CreaturePreset();
    org.mafagafogigante.dungeon.game.Id id1 = null;
    creaturePreset0.setWeaponId(id1);
    creaturePreset0.setAttack(57);
    org.mafagafogigante.dungeon.entity.Luminosity luminosity5 = creaturePreset0.getLuminosity();
    creaturePreset0.setInventoryItemLimit(57);
    org.mafagafogigante.dungeon.game.Id id8 = creaturePreset0.getId();
    creaturePreset0.setType("Noon");
    org.mafagafogigante.dungeon.game.Name name11 = creaturePreset0.getName();
    org.mafagafogigante.dungeon.game.PartOfDay partOfDay12 = org.mafagafogigante.dungeon.game.PartOfDay.MIDNIGHT;
    org.mafagafogigante.dungeon.entity.Luminosity luminosity13 = partOfDay12.getLuminosity();
    org.mafagafogigante.dungeon.entity.LightSource lightSource14 = new org.mafagafogigante.dungeon.entity.LightSource(luminosity13);
    creaturePreset0.setLuminosity(luminosity13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(luminosity5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(id8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(name11);
    org.junit.Assert.assertTrue("'" + partOfDay12 + "' != '" + org.mafagafogigante.dungeon.game.PartOfDay.MIDNIGHT + "'", partOfDay12.equals(org.mafagafogigante.dungeon.game.PartOfDay.MIDNIGHT));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(luminosity13);

  }

  @Test
  public void test292() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test292"); }

    org.mafagafogigante.dungeon.world.VisibilityCriterion[] visibilityCriterion_array0 = new org.mafagafogigante.dungeon.world.VisibilityCriterion[] {  };
    org.mafagafogigante.dungeon.world.VisibilityCriteria visibilityCriteria1 = new org.mafagafogigante.dungeon.world.VisibilityCriteria(visibilityCriterion_array0);
    org.mafagafogigante.dungeon.world.VisibilityCriteria visibilityCriteria2 = new org.mafagafogigante.dungeon.world.VisibilityCriteria(visibilityCriterion_array0);
    org.mafagafogigante.dungeon.world.VisibilityCriterion[] visibilityCriterion_array3 = new org.mafagafogigante.dungeon.world.VisibilityCriterion[] {  };
    org.mafagafogigante.dungeon.world.VisibilityCriteria visibilityCriteria4 = new org.mafagafogigante.dungeon.world.VisibilityCriteria(visibilityCriterion_array3);
    org.mafagafogigante.dungeon.entity.creatures.Creature creature5 = null;
    org.mafagafogigante.dungeon.entity.creatures.Observer observer6 = new org.mafagafogigante.dungeon.entity.creatures.Observer(creature5);
    boolean b7 = visibilityCriteria4.isMetBy(observer6);
    org.mafagafogigante.dungeon.entity.items.Item[] item_array8 = new org.mafagafogigante.dungeon.entity.items.Item[] {  };
    java.util.ArrayList<org.mafagafogigante.dungeon.entity.items.Item> arraylist_item9 = new java.util.ArrayList<org.mafagafogigante.dungeon.entity.items.Item>();
    boolean b10 = java.util.Collections.addAll((java.util.Collection<org.mafagafogigante.dungeon.entity.items.Item>)arraylist_item9, item_array8);
    org.mafagafogigante.dungeon.game.DungeonString dungeonString12 = new org.mafagafogigante.dungeon.game.DungeonString("hi!");
    java.lang.String[] str_array17 = new java.lang.String[] { "hi!", "Damaged", "BattleStatistics{records=CounterMap{map={}}}", "" };
    dungeonString12.append(str_array17);
    observer6.writeItemSight((java.util.List<org.mafagafogigante.dungeon.entity.items.Item>)arraylist_item9, dungeonString12);
    org.mafagafogigante.dungeon.entity.items.Item[] item_array20 = new org.mafagafogigante.dungeon.entity.items.Item[] {  };
    java.util.ArrayList<org.mafagafogigante.dungeon.entity.items.Item> arraylist_item21 = new java.util.ArrayList<org.mafagafogigante.dungeon.entity.items.Item>();
    boolean b22 = java.util.Collections.addAll((java.util.Collection<org.mafagafogigante.dungeon.entity.items.Item>)arraylist_item21, item_array20);
    java.lang.String[] str_array28 = new java.lang.String[] { "CounterMap{map={}}", "User: Nicholas\nTime: 15:42:12\nDate: 2017-04-09\nJava: Java version 1.8.0_121 by Oracle Corporation\nHeap: Using 34.4 MiB out of the allocated 123.0 MiB\nOS: Windows 10 (amd64) 10.0", "hi!", "0 ms", "User: Nicholas\nTime: 15:42:12\nDate: 2017-04-09\nJava: Java version 1.8.0_121 by Oracle Corporation\nHeap: Using 41.5 MiB out of the allocated 154.5 MiB\nOS: Windows 10 (amd64) 10.0" };
    java.util.List<org.mafagafogigante.dungeon.entity.items.Item> list_item29 = org.mafagafogigante.dungeon.entity.creatures.HeroUtils.findItems((java.util.List<org.mafagafogigante.dungeon.entity.items.Item>)arraylist_item21, str_array28);
    org.mafagafogigante.dungeon.game.DungeonString dungeonString31 = new org.mafagafogigante.dungeon.game.DungeonString("hi!");
    observer6.writeItemSight(list_item29, dungeonString31);
    boolean b33 = visibilityCriteria2.isMetBy(observer6);
    org.mafagafogigante.dungeon.entity.creatures.Creature creature34 = null;
    org.mafagafogigante.dungeon.entity.creatures.Observer observer35 = new org.mafagafogigante.dungeon.entity.creatures.Observer(creature34);
    org.mafagafogigante.dungeon.entity.creatures.Creature[] creature_array36 = new org.mafagafogigante.dungeon.entity.creatures.Creature[] {  };
    java.util.ArrayList<org.mafagafogigante.dungeon.entity.creatures.Creature> arraylist_creature37 = new java.util.ArrayList<org.mafagafogigante.dungeon.entity.creatures.Creature>();
    boolean b38 = java.util.Collections.addAll((java.util.Collection<org.mafagafogigante.dungeon.entity.creatures.Creature>)arraylist_creature37, creature_array36);
    org.mafagafogigante.dungeon.game.DungeonString dungeonString40 = new org.mafagafogigante.dungeon.game.DungeonString("");
    java.util.List<org.mafagafogigante.dungeon.game.ColoredString> list_coloredString41 = dungeonString40.toColoredStringList();
    observer35.writeCreatureSight((java.util.List<org.mafagafogigante.dungeon.entity.creatures.Creature>)arraylist_creature37, dungeonString40);
    org.mafagafogigante.dungeon.world.VisibilityCriterion[] visibilityCriterion_array43 = new org.mafagafogigante.dungeon.world.VisibilityCriterion[] {  };
    org.mafagafogigante.dungeon.world.VisibilityCriteria visibilityCriteria44 = new org.mafagafogigante.dungeon.world.VisibilityCriteria(visibilityCriterion_array43);
    org.mafagafogigante.dungeon.entity.creatures.Creature creature45 = null;
    org.mafagafogigante.dungeon.entity.creatures.Observer observer46 = new org.mafagafogigante.dungeon.entity.creatures.Observer(creature45);
    boolean b47 = visibilityCriteria44.isMetBy(observer46);
    org.mafagafogigante.dungeon.world.VisibilityCriterion[] visibilityCriterion_array48 = new org.mafagafogigante.dungeon.world.VisibilityCriterion[] {  };
    org.mafagafogigante.dungeon.world.VisibilityCriteria visibilityCriteria49 = new org.mafagafogigante.dungeon.world.VisibilityCriteria(visibilityCriterion_array48);
    org.mafagafogigante.dungeon.entity.creatures.Creature creature50 = null;
    org.mafagafogigante.dungeon.entity.creatures.Observer observer51 = new org.mafagafogigante.dungeon.entity.creatures.Observer(creature50);
    boolean b52 = visibilityCriteria49.isMetBy(observer51);
    org.mafagafogigante.dungeon.entity.items.Item[] item_array53 = new org.mafagafogigante.dungeon.entity.items.Item[] {  };
    java.util.ArrayList<org.mafagafogigante.dungeon.entity.items.Item> arraylist_item54 = new java.util.ArrayList<org.mafagafogigante.dungeon.entity.items.Item>();
    boolean b55 = java.util.Collections.addAll((java.util.Collection<org.mafagafogigante.dungeon.entity.items.Item>)arraylist_item54, item_array53);
    org.mafagafogigante.dungeon.game.DungeonString dungeonString57 = new org.mafagafogigante.dungeon.game.DungeonString("hi!");
    java.lang.String[] str_array62 = new java.lang.String[] { "hi!", "Damaged", "BattleStatistics{records=CounterMap{map={}}}", "" };
    dungeonString57.append(str_array62);
    observer51.writeItemSight((java.util.List<org.mafagafogigante.dungeon.entity.items.Item>)arraylist_item54, dungeonString57);
    org.mafagafogigante.dungeon.entity.creatures.Creature[] creature_array65 = new org.mafagafogigante.dungeon.entity.creatures.Creature[] {  };
    java.util.ArrayList<org.mafagafogigante.dungeon.entity.creatures.Creature> arraylist_creature66 = new java.util.ArrayList<org.mafagafogigante.dungeon.entity.creatures.Creature>();
    boolean b67 = java.util.Collections.addAll((java.util.Collection<org.mafagafogigante.dungeon.entity.creatures.Creature>)arraylist_creature66, creature_array65);
    org.mafagafogigante.dungeon.game.DungeonString dungeonString69 = new org.mafagafogigante.dungeon.game.DungeonString("hi!");
    java.lang.String[] str_array74 = new java.lang.String[] { "hi!", "Damaged", "BattleStatistics{records=CounterMap{map={}}}", "" };
    dungeonString69.append(str_array74);
    java.lang.String str76 = dungeonString69.toString();
    org.mafagafogigante.dungeon.game.Point point80 = new org.mafagafogigante.dungeon.game.Point(10, (int)'a', 0);
    java.lang.String[] str_array83 = new java.lang.String[] { "", "" };
    org.mafagafogigante.dungeon.util.Table table84 = new org.mafagafogigante.dungeon.util.Table(str_array83);
    boolean b85 = point80.equals((java.lang.Object)str_array83);
    dungeonString69.append(str_array83);
    observer51.writeCreatureSight((java.util.List<org.mafagafogigante.dungeon.entity.creatures.Creature>)arraylist_creature66, dungeonString69);
    org.mafagafogigante.dungeon.game.DungeonString dungeonString89 = new org.mafagafogigante.dungeon.game.DungeonString("");
    java.util.List<org.mafagafogigante.dungeon.game.ColoredString> list_coloredString90 = dungeonString89.toColoredStringList();
    observer46.writeCreatureSight((java.util.List<org.mafagafogigante.dungeon.entity.creatures.Creature>)arraylist_creature66, dungeonString89);
    org.mafagafogigante.dungeon.gui.WritingSpecifications writingSpecifications94 = new org.mafagafogigante.dungeon.gui.WritingSpecifications(false, 46800);
    org.mafagafogigante.dungeon.io.Writer.write((org.mafagafogigante.dungeon.game.Writable)dungeonString89, writingSpecifications94);
    java.lang.String str96 = dungeonString89.toString();
    java.util.List<org.mafagafogigante.dungeon.game.ColoredString> list_coloredString97 = dungeonString89.toColoredStringList();
    observer6.writeCreatureSight((java.util.List<org.mafagafogigante.dungeon.entity.creatures.Creature>)arraylist_creature37, dungeonString89);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(visibilityCriterion_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(visibilityCriterion_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(item_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(item_array20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_item29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(creature_array36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_coloredString41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(visibilityCriterion_array43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(visibilityCriterion_array48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(item_array53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(creature_array65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str76 + "' != '" + "DungeonString{coloredStringList=[ColoredString{string='hi!hi!DamagedBattleStatistics{records=CounterMap{map={}}}', color=java.awt.Color[r=192,g=192,b=192]}], currentColor=java.awt.Color[r=192,g=192,b=192]}"+ "'", str76.equals("DungeonString{coloredStringList=[ColoredString{string='hi!hi!DamagedBattleStatistics{records=CounterMap{map={}}}', color=java.awt.Color[r=192,g=192,b=192]}], currentColor=java.awt.Color[r=192,g=192,b=192]}"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array83);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b85 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_coloredString90);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str96 + "' != '" + "DungeonString{coloredStringList=[ColoredString{string='\nYou don't see anyone here.\n', color=java.awt.Color[r=192,g=192,b=192]}], currentColor=java.awt.Color[r=192,g=192,b=192]}"+ "'", str96.equals("DungeonString{coloredStringList=[ColoredString{string='\nYou don't see anyone here.\n', color=java.awt.Color[r=192,g=192,b=192]}], currentColor=java.awt.Color[r=192,g=192,b=192]}"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_coloredString97);

  }

  @Test
  public void test293() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test293"); }

    org.mafagafogigante.dungeon.stats.Statistics statistics0 = new org.mafagafogigante.dungeon.stats.Statistics();
    statistics0.writeStatistics();
    org.mafagafogigante.dungeon.achievements.AchievementTracker achievementTracker2 = new org.mafagafogigante.dungeon.achievements.AchievementTracker(statistics0);
    org.mafagafogigante.dungeon.stats.BattleStatistics battleStatistics3 = statistics0.getBattleStatistics();
    org.mafagafogigante.dungeon.stats.BattleStatistics battleStatistics4 = new org.mafagafogigante.dungeon.stats.BattleStatistics();
    org.mafagafogigante.dungeon.achievements.BattleStatisticsRequirement battleStatisticsRequirement5 = null;
    boolean b6 = battleStatistics4.satisfies(battleStatisticsRequirement5);
    java.lang.String str7 = battleStatistics4.toString();
    org.mafagafogigante.dungeon.achievements.BattleStatisticsQuery battleStatisticsQuery8 = new org.mafagafogigante.dungeon.achievements.BattleStatisticsQuery();
    org.mafagafogigante.dungeon.achievements.BattleStatisticsRequirement battleStatisticsRequirement10 = new org.mafagafogigante.dungeon.achievements.BattleStatisticsRequirement(battleStatisticsQuery8, (int)(byte)100);
    boolean b11 = battleStatistics4.satisfies(battleStatisticsRequirement10);
    org.mafagafogigante.dungeon.util.CounterMap<org.mafagafogigante.dungeon.stats.CauseOfDeath> countermap_causeOfDeath12 = battleStatistics4.getKillsByCauseOfDeath();
    org.mafagafogigante.dungeon.achievements.BattleStatisticsQuery battleStatisticsQuery13 = new org.mafagafogigante.dungeon.achievements.BattleStatisticsQuery();
    org.mafagafogigante.dungeon.achievements.BattleStatisticsRequirement battleStatisticsRequirement15 = new org.mafagafogigante.dungeon.achievements.BattleStatisticsRequirement(battleStatisticsQuery13, (int)(byte)100);
    int i16 = battleStatisticsRequirement15.getCount();
    int i17 = battleStatisticsRequirement15.getCount();
    int i18 = battleStatisticsRequirement15.getCount();
    boolean b19 = battleStatistics4.satisfies(battleStatisticsRequirement15);
    boolean b20 = battleStatistics3.satisfies(battleStatisticsRequirement15);
    org.mafagafogigante.dungeon.entity.creatures.Creature creature21 = null;
    org.mafagafogigante.dungeon.game.Id id22 = null;
    org.mafagafogigante.dungeon.stats.CauseOfDeath causeOfDeath24 = org.mafagafogigante.dungeon.stats.CauseOfDeath.getUnarmedCauseOfDeath();
    org.mafagafogigante.dungeon.entity.creatures.HealthState healthState25 = org.mafagafogigante.dungeon.entity.creatures.HealthState.DEAD;
    boolean b26 = causeOfDeath24.equals((java.lang.Object)healthState25);
    java.lang.String[] str_array32 = new java.lang.String[] { "hi!", "visibilityCriteria=VisibilityCriteria{[]}", "visibilityCriteria=VisibilityCriteria{[]}", "Damaged", "hi!" };
    org.mafagafogigante.dungeon.util.Table table33 = new org.mafagafogigante.dungeon.util.Table(str_array32);
    java.util.List<org.mafagafogigante.dungeon.game.ColoredString> list_coloredString34 = table33.toColoredStringList();
    boolean b35 = causeOfDeath24.equals((java.lang.Object)table33);
    org.mafagafogigante.dungeon.game.PartOfDay partOfDay36 = org.mafagafogigante.dungeon.game.PartOfDay.NOON;
    org.mafagafogigante.dungeon.stats.BattleRecord battleRecord37 = new org.mafagafogigante.dungeon.stats.BattleRecord(id22, "East", causeOfDeath24, partOfDay36);
    org.mafagafogigante.dungeon.date.Date date41 = new org.mafagafogigante.dungeon.date.Date(10L, 100L, 100L);
    org.mafagafogigante.dungeon.date.Date date45 = new org.mafagafogigante.dungeon.date.Date(10L, 100L, 100L);
    int i46 = date41.compareTo(date45);
    org.mafagafogigante.dungeon.game.PartOfDay partOfDay47 = org.mafagafogigante.dungeon.game.PartOfDay.getCorrespondingConstant(date41);
    long long48 = date41.getYear();
    org.mafagafogigante.dungeon.game.PartOfDay partOfDay49 = org.mafagafogigante.dungeon.game.PartOfDay.AFTERNOON;
    int i50 = org.mafagafogigante.dungeon.game.PartOfDay.getSecondsToNext(date41, partOfDay49);
    // The following exception was thrown during execution in test generation
    try {
    battleStatistics3.addBattle(creature21, causeOfDeath24, partOfDay49);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(battleStatistics3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "BattleStatistics{records=CounterMap{map={}}}"+ "'", str7.equals("BattleStatistics{records=CounterMap{map={}}}"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(countermap_causeOfDeath12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(causeOfDeath24);
    org.junit.Assert.assertTrue("'" + healthState25 + "' != '" + org.mafagafogigante.dungeon.entity.creatures.HealthState.DEAD + "'", healthState25.equals(org.mafagafogigante.dungeon.entity.creatures.HealthState.DEAD));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_coloredString34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == false);
    org.junit.Assert.assertTrue("'" + partOfDay36 + "' != '" + org.mafagafogigante.dungeon.game.PartOfDay.NOON + "'", partOfDay36.equals(org.mafagafogigante.dungeon.game.PartOfDay.NOON));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i46 == 0);
    org.junit.Assert.assertTrue("'" + partOfDay47 + "' != '" + org.mafagafogigante.dungeon.game.PartOfDay.MIDNIGHT + "'", partOfDay47.equals(org.mafagafogigante.dungeon.game.PartOfDay.MIDNIGHT));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long48 == 10L);
    org.junit.Assert.assertTrue("'" + partOfDay49 + "' != '" + org.mafagafogigante.dungeon.game.PartOfDay.AFTERNOON + "'", partOfDay49.equals(org.mafagafogigante.dungeon.game.PartOfDay.AFTERNOON));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i50 == 46800);

  }

  @Test
  public void test294() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test294"); }

    org.mafagafogigante.dungeon.entity.items.ItemPreset itemPreset0 = new org.mafagafogigante.dungeon.entity.items.ItemPreset();
    itemPreset0.setDrinkableHealing((int)(short)0);
    org.mafagafogigante.dungeon.util.Percentage percentage4 = new org.mafagafogigante.dungeon.util.Percentage((double)57);
    itemPreset0.setVisibility(percentage4);
    int i6 = itemPreset0.getDrinkableDoses();
    int i7 = itemPreset0.getIntegrityDecrementOnHit();
    int i8 = itemPreset0.getIntegrityDecrementOnEat();
    org.mafagafogigante.dungeon.util.Percentage percentage9 = itemPreset0.getVisibility();
    int i10 = itemPreset0.getDrinkableHealing();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(percentage9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 0);

  }

  @Test
  public void test295() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test295"); }

    org.mafagafogigante.dungeon.date.Date date7 = new org.mafagafogigante.dungeon.date.Date(10L, 100L, 100L);
    org.mafagafogigante.dungeon.date.Date date11 = new org.mafagafogigante.dungeon.date.Date(10L, 100L, 100L);
    int i12 = date7.compareTo(date11);
    org.mafagafogigante.dungeon.game.PartOfDay partOfDay13 = org.mafagafogigante.dungeon.game.PartOfDay.getCorrespondingConstant(date7);
    java.lang.String[] str_array19 = new java.lang.String[] { "hi!", "visibilityCriteria=VisibilityCriteria{[]}", "visibilityCriteria=VisibilityCriteria{[]}", "Damaged", "hi!" };
    org.mafagafogigante.dungeon.util.Table table20 = new org.mafagafogigante.dungeon.util.Table(str_array19);
    java.util.List<org.mafagafogigante.dungeon.game.ColoredString> list_coloredString21 = table20.toColoredStringList();
    org.mafagafogigante.dungeon.game.ColoredString coloredString22 = org.mafagafogigante.dungeon.game.Random.select(list_coloredString21);
    boolean b23 = date7.equals((java.lang.Object)coloredString22);
    java.awt.Color color24 = coloredString22.getColor();
    org.mafagafogigante.dungeon.game.ColoredString coloredString25 = new org.mafagafogigante.dungeon.game.ColoredString("User: Nicholas\nTime: 15:42:12\nDate: 2017-04-09\nJava: Java version 1.8.0_121 by Oracle Corporation\nHeap: Using 41.5 MiB out of the allocated 154.5 MiB\nOS: Windows 10 (amd64) 10.0", color24);
    org.mafagafogigante.dungeon.game.ColoredString coloredString26 = new org.mafagafogigante.dungeon.game.ColoredString("Unarmed : UNARMED", color24);
    org.mafagafogigante.dungeon.game.LocationDescription locationDescription27 = new org.mafagafogigante.dungeon.game.LocationDescription('a', color24);
    org.mafagafogigante.dungeon.game.DungeonString dungeonString28 = new org.mafagafogigante.dungeon.game.DungeonString("CounterMap{map={}}", color24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 0);
    org.junit.Assert.assertTrue("'" + partOfDay13 + "' != '" + org.mafagafogigante.dungeon.game.PartOfDay.MIDNIGHT + "'", partOfDay13.equals(org.mafagafogigante.dungeon.game.PartOfDay.MIDNIGHT));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_coloredString21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(coloredString22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color24);

  }

  @Test
  public void test296() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test296"); }

    org.mafagafogigante.dungeon.achievements.Achievement achievement0 = null;
    org.mafagafogigante.dungeon.date.Date date7 = new org.mafagafogigante.dungeon.date.Date((long)100, 100L, (long)81, (long)(byte)-1, (long)152, (-1L));
    // The following exception was thrown during execution in test generation
    try {
    org.mafagafogigante.dungeon.achievements.UnlockedAchievement unlockedAchievement8 = new org.mafagafogigante.dungeon.achievements.UnlockedAchievement(achievement0, date7);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }

  }

  @Test
  public void test297() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test297"); }

    org.mafagafogigante.dungeon.entity.items.FoodComponent foodComponent2 = new org.mafagafogigante.dungeon.entity.items.FoodComponent(97, (int)(short)100);

  }

  @Test
  public void test298() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test298"); }

    org.mafagafogigante.dungeon.stats.BattleStatistics battleStatistics0 = new org.mafagafogigante.dungeon.stats.BattleStatistics();
    org.mafagafogigante.dungeon.achievements.BattleStatisticsRequirement battleStatisticsRequirement1 = null;
    boolean b2 = battleStatistics0.satisfies(battleStatisticsRequirement1);
    java.lang.String str3 = battleStatistics0.toString();
    org.mafagafogigante.dungeon.util.CounterMap<org.mafagafogigante.dungeon.stats.CauseOfDeath> countermap_causeOfDeath4 = battleStatistics0.getKillsByCauseOfDeath();
    org.mafagafogigante.dungeon.entity.creatures.Creature creature5 = null;
    org.mafagafogigante.dungeon.stats.CauseOfDeath causeOfDeath6 = org.mafagafogigante.dungeon.stats.CauseOfDeath.getUnarmedCauseOfDeath();
    org.mafagafogigante.dungeon.achievements.BattleStatisticsQuery battleStatisticsQuery7 = new org.mafagafogigante.dungeon.achievements.BattleStatisticsQuery();
    battleStatisticsQuery7.setType("Damaged");
    battleStatisticsQuery7.setType("");
    boolean b12 = causeOfDeath6.equals((java.lang.Object)battleStatisticsQuery7);
    java.lang.String str13 = causeOfDeath6.toString();
    org.mafagafogigante.dungeon.stats.BattleStatistics battleStatistics14 = new org.mafagafogigante.dungeon.stats.BattleStatistics();
    org.mafagafogigante.dungeon.achievements.BattleStatisticsRequirement battleStatisticsRequirement15 = null;
    boolean b16 = battleStatistics14.satisfies(battleStatisticsRequirement15);
    java.lang.String str17 = battleStatistics14.toString();
    org.mafagafogigante.dungeon.util.CounterMap<org.mafagafogigante.dungeon.stats.CauseOfDeath> countermap_causeOfDeath18 = battleStatistics14.getKillsByCauseOfDeath();
    boolean b19 = causeOfDeath6.equals((java.lang.Object)countermap_causeOfDeath18);
    org.mafagafogigante.dungeon.date.Date date23 = new org.mafagafogigante.dungeon.date.Date(10L, 100L, 100L);
    org.mafagafogigante.dungeon.date.Date date27 = new org.mafagafogigante.dungeon.date.Date(10L, 100L, 100L);
    int i28 = date23.compareTo(date27);
    org.mafagafogigante.dungeon.game.PartOfDay partOfDay29 = org.mafagafogigante.dungeon.game.PartOfDay.getCorrespondingConstant(date23);
    org.mafagafogigante.dungeon.game.PartOfDay partOfDay30 = org.mafagafogigante.dungeon.game.PartOfDay.getCorrespondingConstant(date23);
    // The following exception was thrown during execution in test generation
    try {
    battleStatistics0.addBattle(creature5, causeOfDeath6, partOfDay30);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "BattleStatistics{records=CounterMap{map={}}}"+ "'", str3.equals("BattleStatistics{records=CounterMap{map={}}}"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(countermap_causeOfDeath4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(causeOfDeath6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "Unarmed : UNARMED"+ "'", str13.equals("Unarmed : UNARMED"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "BattleStatistics{records=CounterMap{map={}}}"+ "'", str17.equals("BattleStatistics{records=CounterMap{map={}}}"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(countermap_causeOfDeath18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 0);
    org.junit.Assert.assertTrue("'" + partOfDay29 + "' != '" + org.mafagafogigante.dungeon.game.PartOfDay.MIDNIGHT + "'", partOfDay29.equals(org.mafagafogigante.dungeon.game.PartOfDay.MIDNIGHT));
    org.junit.Assert.assertTrue("'" + partOfDay30 + "' != '" + org.mafagafogigante.dungeon.game.PartOfDay.MIDNIGHT + "'", partOfDay30.equals(org.mafagafogigante.dungeon.game.PartOfDay.MIDNIGHT));

  }

  @Test
  public void test299() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test299"); }

    org.mafagafogigante.dungeon.util.CounterMap<org.mafagafogigante.dungeon.world.Weather> countermap_weather0 = new org.mafagafogigante.dungeon.util.CounterMap<org.mafagafogigante.dungeon.world.Weather>();
    java.util.Set<org.mafagafogigante.dungeon.world.Weather> set_weather1 = countermap_weather0.keySet();
    java.util.Iterator<org.mafagafogigante.dungeon.world.Weather> iterator_weather2 = countermap_weather0.iterator();
    org.mafagafogigante.dungeon.util.CounterMap<org.mafagafogigante.dungeon.world.Weather> countermap_weather3 = new org.mafagafogigante.dungeon.util.CounterMap<org.mafagafogigante.dungeon.world.Weather>();
    org.mafagafogigante.dungeon.world.Weather weather4 = null;
    int i5 = countermap_weather3.getCounter(weather4);
    org.mafagafogigante.dungeon.date.Date date9 = new org.mafagafogigante.dungeon.date.Date(10L, 100L, 100L);
    org.mafagafogigante.dungeon.date.Date date13 = new org.mafagafogigante.dungeon.date.Date(10L, 100L, 100L);
    int i14 = date9.compareTo(date13);
    org.mafagafogigante.dungeon.game.PartOfDay partOfDay15 = org.mafagafogigante.dungeon.game.PartOfDay.getCorrespondingConstant(date9);
    java.lang.String[] str_array21 = new java.lang.String[] { "hi!", "visibilityCriteria=VisibilityCriteria{[]}", "visibilityCriteria=VisibilityCriteria{[]}", "Damaged", "hi!" };
    org.mafagafogigante.dungeon.util.Table table22 = new org.mafagafogigante.dungeon.util.Table(str_array21);
    java.util.List<org.mafagafogigante.dungeon.game.ColoredString> list_coloredString23 = table22.toColoredStringList();
    org.mafagafogigante.dungeon.game.ColoredString coloredString24 = org.mafagafogigante.dungeon.game.Random.select(list_coloredString23);
    boolean b25 = date9.equals((java.lang.Object)coloredString24);
    org.mafagafogigante.dungeon.date.Date date29 = new org.mafagafogigante.dungeon.date.Date(10L, 100L, 100L);
    org.mafagafogigante.dungeon.date.Date date33 = new org.mafagafogigante.dungeon.date.Date(10L, 100L, 100L);
    int i34 = date29.compareTo(date33);
    org.mafagafogigante.dungeon.game.PartOfDay partOfDay35 = org.mafagafogigante.dungeon.game.PartOfDay.getCorrespondingConstant(date29);
    long long36 = date29.getYear();
    org.mafagafogigante.dungeon.date.Date date40 = new org.mafagafogigante.dungeon.date.Date(10L, 100L, 100L);
    org.mafagafogigante.dungeon.date.Date date44 = new org.mafagafogigante.dungeon.date.Date(10L, 100L, 100L);
    int i45 = date40.compareTo(date44);
    long long46 = date40.getYear();
    int i47 = date29.compareTo(date40);
    org.mafagafogigante.dungeon.date.Duration duration48 = new org.mafagafogigante.dungeon.date.Duration(date9, date40);
    org.mafagafogigante.dungeon.date.Date date53 = new org.mafagafogigante.dungeon.date.Date(10L, 100L, 100L);
    org.mafagafogigante.dungeon.date.Date date57 = new org.mafagafogigante.dungeon.date.Date(10L, 100L, 100L);
    int i58 = date53.compareTo(date57);
    org.mafagafogigante.dungeon.game.PartOfDay partOfDay59 = org.mafagafogigante.dungeon.game.PartOfDay.getCorrespondingConstant(date53);
    long long60 = date53.getYear();
    org.mafagafogigante.dungeon.date.Date date64 = new org.mafagafogigante.dungeon.date.Date(10L, 100L, 100L);
    org.mafagafogigante.dungeon.date.Date date68 = new org.mafagafogigante.dungeon.date.Date(10L, 100L, 100L);
    int i69 = date64.compareTo(date68);
    long long70 = date64.getYear();
    int i71 = date53.compareTo(date64);
    org.mafagafogigante.dungeon.date.DungeonTimeUnit dungeonTimeUnit73 = org.mafagafogigante.dungeon.date.DungeonTimeUnit.HOUR;
    org.mafagafogigante.dungeon.date.Date date74 = date64.minus(35, dungeonTimeUnit73);
    org.mafagafogigante.dungeon.date.Date date75 = date40.plus(3, dungeonTimeUnit73);
    long long76 = date75.getMonth();
    org.mafagafogigante.dungeon.world.Weather weather77 = new org.mafagafogigante.dungeon.world.Weather(date75);
    int i78 = countermap_weather3.getCounter(weather77);
    countermap_weather0.incrementCounter(weather77, (java.lang.Integer)0);
    org.mafagafogigante.dungeon.date.Date date84 = new org.mafagafogigante.dungeon.date.Date((long)32, (long)(short)10, 0L);
    org.mafagafogigante.dungeon.world.WeatherCondition weatherCondition85 = weather77.getCurrentCondition(date84);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_weather1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_weather2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 0);
    org.junit.Assert.assertTrue("'" + partOfDay15 + "' != '" + org.mafagafogigante.dungeon.game.PartOfDay.MIDNIGHT + "'", partOfDay15.equals(org.mafagafogigante.dungeon.game.PartOfDay.MIDNIGHT));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_coloredString23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(coloredString24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i34 == 0);
    org.junit.Assert.assertTrue("'" + partOfDay35 + "' != '" + org.mafagafogigante.dungeon.game.PartOfDay.MIDNIGHT + "'", partOfDay35.equals(org.mafagafogigante.dungeon.game.PartOfDay.MIDNIGHT));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long36 == 10L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i45 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long46 == 10L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i47 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i58 == 0);
    org.junit.Assert.assertTrue("'" + partOfDay59 + "' != '" + org.mafagafogigante.dungeon.game.PartOfDay.MIDNIGHT + "'", partOfDay59.equals(org.mafagafogigante.dungeon.game.PartOfDay.MIDNIGHT));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long60 == 10L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i69 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long70 == 10L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i71 == 0);
    org.junit.Assert.assertTrue("'" + dungeonTimeUnit73 + "' != '" + org.mafagafogigante.dungeon.date.DungeonTimeUnit.HOUR + "'", dungeonTimeUnit73.equals(org.mafagafogigante.dungeon.date.DungeonTimeUnit.HOUR));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(date74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(date75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long76 == 10L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i78 == 0);
    org.junit.Assert.assertTrue("'" + weatherCondition85 + "' != '" + org.mafagafogigante.dungeon.world.WeatherCondition.STORM + "'", weatherCondition85.equals(org.mafagafogigante.dungeon.world.WeatherCondition.STORM));

  }

  @Test
  public void test300() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test300"); }

    org.mafagafogigante.dungeon.schema.JsonRule jsonRule0 = null;
    org.mafagafogigante.dungeon.schema.JsonRule jsonRule1 = org.mafagafogigante.dungeon.schema.rules.JsonRuleFactory.makeVariableArrayRule(jsonRule0);
    org.mafagafogigante.dungeon.schema.JsonRule[] jsonRule_array2 = new org.mafagafogigante.dungeon.schema.JsonRule[] { jsonRule0 };
    org.mafagafogigante.dungeon.schema.JsonRule jsonRule3 = org.mafagafogigante.dungeon.schema.rules.JsonRuleFactory.makeGroupRule(jsonRule_array2);
    org.mafagafogigante.dungeon.schema.JsonRule jsonRule4 = org.mafagafogigante.dungeon.schema.rules.JsonRuleFactory.makeGroupRule(jsonRule_array2);
    org.mafagafogigante.dungeon.schema.JsonRule jsonRule5 = org.mafagafogigante.dungeon.schema.rules.JsonRuleFactory.makeGroupRule(jsonRule_array2);
    org.mafagafogigante.dungeon.schema.JsonRule jsonRule6 = org.mafagafogigante.dungeon.schema.rules.JsonRuleFactory.makeOptionalRule(jsonRule5);
    org.mafagafogigante.dungeon.schema.JsonRule jsonRule8 = org.mafagafogigante.dungeon.schema.rules.JsonRuleFactory.makeArraySizeRule(57);
    org.mafagafogigante.dungeon.schema.JsonRule jsonRule9 = null;
    org.mafagafogigante.dungeon.schema.JsonRule jsonRule10 = org.mafagafogigante.dungeon.schema.rules.JsonRuleFactory.makeVariableArrayRule(jsonRule9);
    org.mafagafogigante.dungeon.schema.JsonRule jsonRule11 = org.mafagafogigante.dungeon.schema.rules.JsonRuleFactory.makeVariableArrayRule(jsonRule10);
    org.mafagafogigante.dungeon.schema.JsonRule jsonRule12 = org.mafagafogigante.dungeon.schema.rules.JsonRuleFactory.makeVariableArrayRule(jsonRule11);
    org.mafagafogigante.dungeon.schema.JsonRule jsonRule14 = org.mafagafogigante.dungeon.schema.rules.JsonRuleFactory.makeArraySizeRule(57);
    org.mafagafogigante.dungeon.schema.JsonRule jsonRule15 = org.mafagafogigante.dungeon.schema.rules.JsonRuleFactory.makeVariableArrayRule(jsonRule14);
    org.mafagafogigante.dungeon.schema.JsonRule jsonRule17 = org.mafagafogigante.dungeon.schema.rules.JsonRuleFactory.makeStringLengthRule((-1));
    org.mafagafogigante.dungeon.schema.JsonRule jsonRule18 = org.mafagafogigante.dungeon.schema.rules.JsonRuleFactory.makeVariableArrayRule(jsonRule17);
    org.mafagafogigante.dungeon.schema.JsonRule jsonRule20 = org.mafagafogigante.dungeon.schema.rules.JsonRuleFactory.makeStringLengthRule((-1));
    org.mafagafogigante.dungeon.schema.JsonRule jsonRule21 = org.mafagafogigante.dungeon.schema.rules.JsonRuleFactory.makeVariableArrayRule(jsonRule20);
    org.mafagafogigante.dungeon.schema.JsonRule jsonRule22 = org.mafagafogigante.dungeon.schema.rules.JsonRuleFactory.makeIdRule();
    org.mafagafogigante.dungeon.schema.JsonRule jsonRule24 = org.mafagafogigante.dungeon.schema.rules.JsonRuleFactory.makeArraySizeRule((int)(short)0);
    java.util.Map<java.lang.String,org.mafagafogigante.dungeon.schema.JsonRule> map_str_jsonRule25 = null;
    org.mafagafogigante.dungeon.schema.JsonRule jsonRule26 = org.mafagafogigante.dungeon.schema.rules.JsonRuleFactory.makeObjectRule(map_str_jsonRule25);
    org.mafagafogigante.dungeon.schema.JsonRule[] jsonRule_array27 = new org.mafagafogigante.dungeon.schema.JsonRule[] { jsonRule22, jsonRule24, jsonRule26 };
    java.util.ArrayList<org.mafagafogigante.dungeon.schema.JsonRule> arraylist_jsonRule28 = new java.util.ArrayList<org.mafagafogigante.dungeon.schema.JsonRule>();
    boolean b29 = java.util.Collections.addAll((java.util.Collection<org.mafagafogigante.dungeon.schema.JsonRule>)arraylist_jsonRule28, jsonRule_array27);
    org.mafagafogigante.dungeon.schema.JsonRule jsonRule30 = org.mafagafogigante.dungeon.schema.rules.JsonRuleFactory.makeFixedArrayRule((java.util.List<org.mafagafogigante.dungeon.schema.JsonRule>)arraylist_jsonRule28);
    org.mafagafogigante.dungeon.schema.JsonRule jsonRule31 = org.mafagafogigante.dungeon.schema.rules.JsonRuleFactory.makeFixedArrayRule((java.util.List<org.mafagafogigante.dungeon.schema.JsonRule>)arraylist_jsonRule28);
    org.mafagafogigante.dungeon.schema.JsonRule jsonRule32 = org.mafagafogigante.dungeon.schema.rules.JsonRuleFactory.makeFixedArrayRule((java.util.List<org.mafagafogigante.dungeon.schema.JsonRule>)arraylist_jsonRule28);
    org.mafagafogigante.dungeon.schema.JsonRule jsonRule33 = org.mafagafogigante.dungeon.schema.rules.JsonRuleFactory.makeFixedArrayRule((java.util.List<org.mafagafogigante.dungeon.schema.JsonRule>)arraylist_jsonRule28);
    java.util.Map<java.lang.String,org.mafagafogigante.dungeon.schema.JsonRule> map_str_jsonRule34 = null;
    org.mafagafogigante.dungeon.schema.JsonRule jsonRule35 = org.mafagafogigante.dungeon.schema.rules.JsonRuleFactory.makeObjectRule(map_str_jsonRule34);
    org.mafagafogigante.dungeon.schema.JsonRule jsonRule36 = org.mafagafogigante.dungeon.schema.rules.JsonRuleFactory.makeVariableArrayRule(jsonRule35);
    org.mafagafogigante.dungeon.schema.JsonRule jsonRule37 = org.mafagafogigante.dungeon.schema.rules.JsonRuleFactory.makeIdRule();
    org.mafagafogigante.dungeon.schema.JsonRule jsonRule39 = org.mafagafogigante.dungeon.schema.rules.JsonRuleFactory.makeArraySizeRule((int)(short)0);
    java.util.Map<java.lang.String,org.mafagafogigante.dungeon.schema.JsonRule> map_str_jsonRule40 = null;
    org.mafagafogigante.dungeon.schema.JsonRule jsonRule41 = org.mafagafogigante.dungeon.schema.rules.JsonRuleFactory.makeObjectRule(map_str_jsonRule40);
    org.mafagafogigante.dungeon.schema.JsonRule[] jsonRule_array42 = new org.mafagafogigante.dungeon.schema.JsonRule[] { jsonRule37, jsonRule39, jsonRule41 };
    java.util.ArrayList<org.mafagafogigante.dungeon.schema.JsonRule> arraylist_jsonRule43 = new java.util.ArrayList<org.mafagafogigante.dungeon.schema.JsonRule>();
    boolean b44 = java.util.Collections.addAll((java.util.Collection<org.mafagafogigante.dungeon.schema.JsonRule>)arraylist_jsonRule43, jsonRule_array42);
    org.mafagafogigante.dungeon.schema.JsonRule jsonRule45 = org.mafagafogigante.dungeon.schema.rules.JsonRuleFactory.makeFixedArrayRule((java.util.List<org.mafagafogigante.dungeon.schema.JsonRule>)arraylist_jsonRule43);
    org.mafagafogigante.dungeon.schema.JsonRule jsonRule46 = org.mafagafogigante.dungeon.schema.rules.JsonRuleFactory.makeFixedArrayRule((java.util.List<org.mafagafogigante.dungeon.schema.JsonRule>)arraylist_jsonRule43);
    org.mafagafogigante.dungeon.schema.JsonRule jsonRule47 = org.mafagafogigante.dungeon.schema.rules.JsonRuleFactory.makeFixedArrayRule((java.util.List<org.mafagafogigante.dungeon.schema.JsonRule>)arraylist_jsonRule43);
    org.mafagafogigante.dungeon.schema.JsonRule jsonRule48 = org.mafagafogigante.dungeon.schema.rules.JsonRuleFactory.makeFixedArrayRule((java.util.List<org.mafagafogigante.dungeon.schema.JsonRule>)arraylist_jsonRule43);
    org.mafagafogigante.dungeon.schema.JsonRule jsonRule49 = org.mafagafogigante.dungeon.schema.rules.JsonRuleFactory.makeFixedArrayRule((java.util.List<org.mafagafogigante.dungeon.schema.JsonRule>)arraylist_jsonRule43);
    org.mafagafogigante.dungeon.schema.JsonRule jsonRule52 = org.mafagafogigante.dungeon.schema.rules.JsonRuleFactory.makeBoundIntegerRule((int)(short)-1, (int)(short)100);
    org.mafagafogigante.dungeon.schema.JsonRule jsonRule53 = org.mafagafogigante.dungeon.schema.rules.JsonRuleFactory.makeOptionalRule(jsonRule52);
    org.mafagafogigante.dungeon.schema.JsonRule jsonRule54 = org.mafagafogigante.dungeon.schema.rules.JsonRuleFactory.makeIdRule();
    org.mafagafogigante.dungeon.schema.JsonRule jsonRule56 = org.mafagafogigante.dungeon.schema.rules.JsonRuleFactory.makeArraySizeRule((int)(short)0);
    java.util.Map<java.lang.String,org.mafagafogigante.dungeon.schema.JsonRule> map_str_jsonRule57 = null;
    org.mafagafogigante.dungeon.schema.JsonRule jsonRule58 = org.mafagafogigante.dungeon.schema.rules.JsonRuleFactory.makeObjectRule(map_str_jsonRule57);
    org.mafagafogigante.dungeon.schema.JsonRule[] jsonRule_array59 = new org.mafagafogigante.dungeon.schema.JsonRule[] { jsonRule54, jsonRule56, jsonRule58 };
    java.util.ArrayList<org.mafagafogigante.dungeon.schema.JsonRule> arraylist_jsonRule60 = new java.util.ArrayList<org.mafagafogigante.dungeon.schema.JsonRule>();
    boolean b61 = java.util.Collections.addAll((java.util.Collection<org.mafagafogigante.dungeon.schema.JsonRule>)arraylist_jsonRule60, jsonRule_array59);
    org.mafagafogigante.dungeon.schema.JsonRule jsonRule62 = org.mafagafogigante.dungeon.schema.rules.JsonRuleFactory.makeFixedArrayRule((java.util.List<org.mafagafogigante.dungeon.schema.JsonRule>)arraylist_jsonRule60);
    org.mafagafogigante.dungeon.schema.JsonRule jsonRule63 = org.mafagafogigante.dungeon.schema.rules.JsonRuleFactory.makeVariableArrayRule(jsonRule62);
    org.mafagafogigante.dungeon.schema.JsonRule[] jsonRule_array64 = new org.mafagafogigante.dungeon.schema.JsonRule[] { jsonRule6, jsonRule8, jsonRule12, jsonRule15, jsonRule18, jsonRule21, jsonRule33, jsonRule35, jsonRule49, jsonRule52, jsonRule63 };
    java.util.ArrayList<org.mafagafogigante.dungeon.schema.JsonRule> arraylist_jsonRule65 = new java.util.ArrayList<org.mafagafogigante.dungeon.schema.JsonRule>();
    boolean b66 = java.util.Collections.addAll((java.util.Collection<org.mafagafogigante.dungeon.schema.JsonRule>)arraylist_jsonRule65, jsonRule_array64);
    org.mafagafogigante.dungeon.schema.JsonRule jsonRule67 = org.mafagafogigante.dungeon.schema.rules.JsonRuleFactory.makeFixedArrayRule((java.util.List<org.mafagafogigante.dungeon.schema.JsonRule>)arraylist_jsonRule65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonRule1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonRule_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonRule3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonRule4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonRule5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonRule6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonRule8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonRule10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonRule11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonRule12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonRule14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonRule15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonRule17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonRule18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonRule20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonRule21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonRule22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonRule24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonRule26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonRule_array27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonRule30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonRule31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonRule32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonRule33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonRule35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonRule36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonRule37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonRule39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonRule41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonRule_array42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonRule45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonRule46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonRule47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonRule48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonRule49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonRule52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonRule53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonRule54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonRule56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonRule58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonRule_array59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b61 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonRule62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonRule63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonRule_array64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b66 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonRule67);

  }

  @Test
  public void test301() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test301"); }

    org.mafagafogigante.dungeon.world.VisibilityCriterion[] visibilityCriterion_array0 = new org.mafagafogigante.dungeon.world.VisibilityCriterion[] {  };
    org.mafagafogigante.dungeon.world.VisibilityCriteria visibilityCriteria1 = new org.mafagafogigante.dungeon.world.VisibilityCriteria(visibilityCriterion_array0);
    org.mafagafogigante.dungeon.entity.creatures.Creature creature2 = null;
    org.mafagafogigante.dungeon.entity.creatures.Observer observer3 = new org.mafagafogigante.dungeon.entity.creatures.Observer(creature2);
    boolean b4 = visibilityCriteria1.isMetBy(observer3);
    org.mafagafogigante.dungeon.entity.items.Item[] item_array5 = new org.mafagafogigante.dungeon.entity.items.Item[] {  };
    java.util.ArrayList<org.mafagafogigante.dungeon.entity.items.Item> arraylist_item6 = new java.util.ArrayList<org.mafagafogigante.dungeon.entity.items.Item>();
    boolean b7 = java.util.Collections.addAll((java.util.Collection<org.mafagafogigante.dungeon.entity.items.Item>)arraylist_item6, item_array5);
    org.mafagafogigante.dungeon.game.DungeonString dungeonString9 = new org.mafagafogigante.dungeon.game.DungeonString("hi!");
    observer3.writeItemSight((java.util.List<org.mafagafogigante.dungeon.entity.items.Item>)arraylist_item6, dungeonString9);
    org.mafagafogigante.dungeon.world.VisibilityCriterion[] visibilityCriterion_array11 = new org.mafagafogigante.dungeon.world.VisibilityCriterion[] {  };
    org.mafagafogigante.dungeon.world.VisibilityCriteria visibilityCriteria12 = new org.mafagafogigante.dungeon.world.VisibilityCriteria(visibilityCriterion_array11);
    org.mafagafogigante.dungeon.entity.creatures.Creature creature13 = null;
    org.mafagafogigante.dungeon.entity.creatures.Observer observer14 = new org.mafagafogigante.dungeon.entity.creatures.Observer(creature13);
    boolean b15 = visibilityCriteria12.isMetBy(observer14);
    org.mafagafogigante.dungeon.entity.items.Item[] item_array16 = new org.mafagafogigante.dungeon.entity.items.Item[] {  };
    java.util.ArrayList<org.mafagafogigante.dungeon.entity.items.Item> arraylist_item17 = new java.util.ArrayList<org.mafagafogigante.dungeon.entity.items.Item>();
    boolean b18 = java.util.Collections.addAll((java.util.Collection<org.mafagafogigante.dungeon.entity.items.Item>)arraylist_item17, item_array16);
    org.mafagafogigante.dungeon.game.DungeonString dungeonString20 = new org.mafagafogigante.dungeon.game.DungeonString("hi!");
    observer14.writeItemSight((java.util.List<org.mafagafogigante.dungeon.entity.items.Item>)arraylist_item17, dungeonString20);
    org.mafagafogigante.dungeon.game.DungeonString dungeonString23 = new org.mafagafogigante.dungeon.game.DungeonString("");
    java.util.List<org.mafagafogigante.dungeon.game.ColoredString> list_coloredString24 = dungeonString23.toColoredStringList();
    observer3.writeItemSight((java.util.List<org.mafagafogigante.dungeon.entity.items.Item>)arraylist_item17, dungeonString23);
    // The following exception was thrown during execution in test generation
    try {
    org.mafagafogigante.dungeon.game.Location location26 = observer3.getObserverLocation();
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(visibilityCriterion_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(item_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(visibilityCriterion_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(item_array16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_coloredString24);

  }

  @Test
  public void test302() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test302"); }

    java.awt.Color color1 = null;
    org.mafagafogigante.dungeon.game.ColoredString coloredString2 = new org.mafagafogigante.dungeon.game.ColoredString("", color1);
    java.lang.String str3 = coloredString2.toString();
    java.lang.String str4 = coloredString2.getString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "ColoredString{string='', color=null}"+ "'", str3.equals("ColoredString{string='', color=null}"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + ""+ "'", str4.equals(""));

  }

  @Test
  public void test303() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test303"); }

    org.mafagafogigante.dungeon.achievements.BattleStatisticsQuery battleStatisticsQuery0 = new org.mafagafogigante.dungeon.achievements.BattleStatisticsQuery();
    battleStatisticsQuery0.setType("Damaged");
    org.mafagafogigante.dungeon.game.Id id3 = null;
    battleStatisticsQuery0.setId(id3);
    org.mafagafogigante.dungeon.game.Id id5 = null;
    org.mafagafogigante.dungeon.achievements.BattleStatisticsQuery battleStatisticsQuery7 = new org.mafagafogigante.dungeon.achievements.BattleStatisticsQuery();
    org.mafagafogigante.dungeon.stats.CauseOfDeath causeOfDeath8 = org.mafagafogigante.dungeon.stats.CauseOfDeath.getUnarmedCauseOfDeath();
    battleStatisticsQuery7.setCauseOfDeath(causeOfDeath8);
    org.mafagafogigante.dungeon.game.PartOfDay partOfDay10 = org.mafagafogigante.dungeon.game.PartOfDay.NIGHT;
    org.mafagafogigante.dungeon.stats.BattleRecord battleRecord11 = new org.mafagafogigante.dungeon.stats.BattleRecord(id5, "", causeOfDeath8, partOfDay10);
    boolean b12 = battleStatisticsQuery0.matches(battleRecord11);
    org.mafagafogigante.dungeon.stats.CauseOfDeath causeOfDeath13 = battleRecord11.getCauseOfDeath();
    java.lang.String str14 = battleRecord11.getType();
    java.lang.String str15 = battleRecord11.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(causeOfDeath8);
    org.junit.Assert.assertTrue("'" + partOfDay10 + "' != '" + org.mafagafogigante.dungeon.game.PartOfDay.NIGHT + "'", partOfDay10.equals(org.mafagafogigante.dungeon.game.PartOfDay.NIGHT));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(causeOfDeath13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + ""+ "'", str14.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "BattleEntry{id=null, type='', causeOfDeath=Unarmed : UNARMED, partOfDay=Night}"+ "'", str15.equals("BattleEntry{id=null, type='', causeOfDeath=Unarmed : UNARMED, partOfDay=Night}"));

  }

  @Test
  public void test304() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test304"); }

    org.mafagafogigante.dungeon.game.Id id0 = null;
    org.mafagafogigante.dungeon.achievements.BattleStatisticsQuery battleStatisticsQuery2 = new org.mafagafogigante.dungeon.achievements.BattleStatisticsQuery();
    org.mafagafogigante.dungeon.stats.CauseOfDeath causeOfDeath3 = org.mafagafogigante.dungeon.stats.CauseOfDeath.getUnarmedCauseOfDeath();
    battleStatisticsQuery2.setCauseOfDeath(causeOfDeath3);
    org.mafagafogigante.dungeon.game.PartOfDay partOfDay5 = org.mafagafogigante.dungeon.game.PartOfDay.NIGHT;
    org.mafagafogigante.dungeon.stats.BattleRecord battleRecord6 = new org.mafagafogigante.dungeon.stats.BattleRecord(id0, "", causeOfDeath3, partOfDay5);
    java.lang.String str7 = battleRecord6.getType();
    org.mafagafogigante.dungeon.game.Id id8 = battleRecord6.getId();
    org.mafagafogigante.dungeon.entity.items.ItemPreset itemPreset9 = new org.mafagafogigante.dungeon.entity.items.ItemPreset();
    org.mafagafogigante.dungeon.entity.Integrity integrity10 = itemPreset9.getIntegrity();
    org.mafagafogigante.dungeon.entity.Integrity integrity11 = null;
    itemPreset9.setIntegrity(integrity11);
    org.mafagafogigante.dungeon.util.Percentage percentage13 = itemPreset9.getVisibility();
    java.lang.String str14 = itemPreset9.getType();
    itemPreset9.setIntegrityDecrementOnHit((int)(short)100);
    org.mafagafogigante.dungeon.util.Percentage percentage18 = new org.mafagafogigante.dungeon.util.Percentage((double)57);
    itemPreset9.setVisibility(percentage18);
    org.mafagafogigante.dungeon.game.Id id20 = null;
    itemPreset9.setId(id20);
    itemPreset9.setPutrefactionPeriod((long)(short)1);
    int i24 = itemPreset9.getDrinkableHealing();
    java.lang.String str25 = itemPreset9.getType();
    int i26 = itemPreset9.getIntegrityDecrementOnHit();
    itemPreset9.setIntegrityDecrementOnEat(32);
    boolean b29 = battleRecord6.equals((java.lang.Object)itemPreset9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(causeOfDeath3);
    org.junit.Assert.assertTrue("'" + partOfDay5 + "' != '" + org.mafagafogigante.dungeon.game.PartOfDay.NIGHT + "'", partOfDay5.equals(org.mafagafogigante.dungeon.game.PartOfDay.NIGHT));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + ""+ "'", str7.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(id8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(integrity10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(percentage13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i26 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);

  }

  @Test
  public void test305() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test305"); }

    org.mafagafogigante.dungeon.entity.items.ItemPreset itemPreset0 = new org.mafagafogigante.dungeon.entity.items.ItemPreset();
    org.mafagafogigante.dungeon.entity.Integrity integrity1 = itemPreset0.getIntegrity();
    org.mafagafogigante.dungeon.entity.Integrity integrity2 = null;
    itemPreset0.setIntegrity(integrity2);
    org.mafagafogigante.dungeon.util.Percentage percentage4 = itemPreset0.getVisibility();
    java.lang.String str5 = itemPreset0.getType();
    itemPreset0.setIntegrityDecrementOnHit((int)(short)100);
    org.mafagafogigante.dungeon.util.Percentage percentage9 = new org.mafagafogigante.dungeon.util.Percentage((double)57);
    itemPreset0.setVisibility(percentage9);
    org.mafagafogigante.dungeon.game.Id id11 = null;
    itemPreset0.setId(id11);
    itemPreset0.setIntegrityDecrementOnEat((-1));
    org.mafagafogigante.dungeon.util.Percentage percentage15 = itemPreset0.getHitRate();
    org.mafagafogigante.dungeon.util.Percentage percentage16 = itemPreset0.getHitRate();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(integrity1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(percentage4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(percentage15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(percentage16);

  }

  @Test
  public void test306() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test306"); }

    org.mafagafogigante.dungeon.date.Date date3 = new org.mafagafogigante.dungeon.date.Date((long)97, (long)(byte)-1, (long)'#');
    org.mafagafogigante.dungeon.stats.BattleStatistics battleStatistics4 = new org.mafagafogigante.dungeon.stats.BattleStatistics();
    org.mafagafogigante.dungeon.achievements.BattleStatisticsRequirement battleStatisticsRequirement5 = null;
    boolean b6 = battleStatistics4.satisfies(battleStatisticsRequirement5);
    java.lang.String str7 = battleStatistics4.toString();
    org.mafagafogigante.dungeon.achievements.BattleStatisticsQuery battleStatisticsQuery8 = new org.mafagafogigante.dungeon.achievements.BattleStatisticsQuery();
    org.mafagafogigante.dungeon.achievements.BattleStatisticsRequirement battleStatisticsRequirement10 = new org.mafagafogigante.dungeon.achievements.BattleStatisticsRequirement(battleStatisticsQuery8, (int)(byte)100);
    boolean b11 = battleStatistics4.satisfies(battleStatisticsRequirement10);
    org.mafagafogigante.dungeon.util.CounterMap<org.mafagafogigante.dungeon.stats.CauseOfDeath> countermap_causeOfDeath12 = battleStatistics4.getKillsByCauseOfDeath();
    org.mafagafogigante.dungeon.util.CounterMap<org.mafagafogigante.dungeon.stats.CauseOfDeath> countermap_causeOfDeath13 = battleStatistics4.getKillsByCauseOfDeath();
    boolean b14 = date3.equals((java.lang.Object)countermap_causeOfDeath13);
    org.mafagafogigante.dungeon.date.DungeonTimeUnit dungeonTimeUnit16 = org.mafagafogigante.dungeon.date.DungeonTimeUnit.YEAR;
    org.mafagafogigante.dungeon.date.Date date17 = date3.plus(45056, dungeonTimeUnit16);
    long long18 = date3.getYear();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "BattleStatistics{records=CounterMap{map={}}}"+ "'", str7.equals("BattleStatistics{records=CounterMap{map={}}}"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(countermap_causeOfDeath12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(countermap_causeOfDeath13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    org.junit.Assert.assertTrue("'" + dungeonTimeUnit16 + "' != '" + org.mafagafogigante.dungeon.date.DungeonTimeUnit.YEAR + "'", dungeonTimeUnit16.equals(org.mafagafogigante.dungeon.date.DungeonTimeUnit.YEAR));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(date17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long18 == 97L);

  }

  @Test
  public void test307() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test307"); }

    org.mafagafogigante.dungeon.world.VisibilityCriterion[] visibilityCriterion_array0 = new org.mafagafogigante.dungeon.world.VisibilityCriterion[] {  };
    org.mafagafogigante.dungeon.world.VisibilityCriteria visibilityCriteria1 = new org.mafagafogigante.dungeon.world.VisibilityCriteria(visibilityCriterion_array0);
    org.mafagafogigante.dungeon.entity.creatures.Creature creature2 = null;
    org.mafagafogigante.dungeon.entity.creatures.Observer observer3 = new org.mafagafogigante.dungeon.entity.creatures.Observer(creature2);
    boolean b4 = visibilityCriteria1.isMetBy(observer3);
    org.mafagafogigante.dungeon.world.VisibilityCriterion[] visibilityCriterion_array5 = new org.mafagafogigante.dungeon.world.VisibilityCriterion[] {  };
    org.mafagafogigante.dungeon.world.VisibilityCriteria visibilityCriteria6 = new org.mafagafogigante.dungeon.world.VisibilityCriteria(visibilityCriterion_array5);
    org.mafagafogigante.dungeon.entity.creatures.Creature creature7 = null;
    org.mafagafogigante.dungeon.entity.creatures.Observer observer8 = new org.mafagafogigante.dungeon.entity.creatures.Observer(creature7);
    boolean b9 = visibilityCriteria6.isMetBy(observer8);
    org.mafagafogigante.dungeon.entity.items.Item[] item_array10 = new org.mafagafogigante.dungeon.entity.items.Item[] {  };
    java.util.ArrayList<org.mafagafogigante.dungeon.entity.items.Item> arraylist_item11 = new java.util.ArrayList<org.mafagafogigante.dungeon.entity.items.Item>();
    boolean b12 = java.util.Collections.addAll((java.util.Collection<org.mafagafogigante.dungeon.entity.items.Item>)arraylist_item11, item_array10);
    org.mafagafogigante.dungeon.game.DungeonString dungeonString14 = new org.mafagafogigante.dungeon.game.DungeonString("hi!");
    java.lang.String[] str_array19 = new java.lang.String[] { "hi!", "Damaged", "BattleStatistics{records=CounterMap{map={}}}", "" };
    dungeonString14.append(str_array19);
    observer8.writeItemSight((java.util.List<org.mafagafogigante.dungeon.entity.items.Item>)arraylist_item11, dungeonString14);
    org.mafagafogigante.dungeon.entity.creatures.Creature[] creature_array22 = new org.mafagafogigante.dungeon.entity.creatures.Creature[] {  };
    java.util.ArrayList<org.mafagafogigante.dungeon.entity.creatures.Creature> arraylist_creature23 = new java.util.ArrayList<org.mafagafogigante.dungeon.entity.creatures.Creature>();
    boolean b24 = java.util.Collections.addAll((java.util.Collection<org.mafagafogigante.dungeon.entity.creatures.Creature>)arraylist_creature23, creature_array22);
    org.mafagafogigante.dungeon.game.DungeonString dungeonString26 = new org.mafagafogigante.dungeon.game.DungeonString("hi!");
    java.lang.String[] str_array31 = new java.lang.String[] { "hi!", "Damaged", "BattleStatistics{records=CounterMap{map={}}}", "" };
    dungeonString26.append(str_array31);
    java.lang.String str33 = dungeonString26.toString();
    org.mafagafogigante.dungeon.game.Point point37 = new org.mafagafogigante.dungeon.game.Point(10, (int)'a', 0);
    java.lang.String[] str_array40 = new java.lang.String[] { "", "" };
    org.mafagafogigante.dungeon.util.Table table41 = new org.mafagafogigante.dungeon.util.Table(str_array40);
    boolean b42 = point37.equals((java.lang.Object)str_array40);
    dungeonString26.append(str_array40);
    observer8.writeCreatureSight((java.util.List<org.mafagafogigante.dungeon.entity.creatures.Creature>)arraylist_creature23, dungeonString26);
    org.mafagafogigante.dungeon.game.DungeonString dungeonString46 = new org.mafagafogigante.dungeon.game.DungeonString("");
    java.util.List<org.mafagafogigante.dungeon.game.ColoredString> list_coloredString47 = dungeonString46.toColoredStringList();
    observer3.writeCreatureSight((java.util.List<org.mafagafogigante.dungeon.entity.creatures.Creature>)arraylist_creature23, dungeonString46);
    dungeonString46.resetColor();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(visibilityCriterion_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(visibilityCriterion_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(item_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(creature_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str33 + "' != '" + "DungeonString{coloredStringList=[ColoredString{string='hi!hi!DamagedBattleStatistics{records=CounterMap{map={}}}', color=java.awt.Color[r=192,g=192,b=192]}], currentColor=java.awt.Color[r=192,g=192,b=192]}"+ "'", str33.equals("DungeonString{coloredStringList=[ColoredString{string='hi!hi!DamagedBattleStatistics{records=CounterMap{map={}}}', color=java.awt.Color[r=192,g=192,b=192]}], currentColor=java.awt.Color[r=192,g=192,b=192]}"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_coloredString47);

  }

  @Test
  public void test308() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test308"); }

    org.mafagafogigante.dungeon.stats.Statistics statistics0 = new org.mafagafogigante.dungeon.stats.Statistics();
    statistics0.writeStatistics();
    statistics0.writeStatistics();
    statistics0.writeStatistics();
    org.mafagafogigante.dungeon.stats.WorldStatistics worldStatistics4 = statistics0.getWorldStatistics();
    statistics0.writeStatistics();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(worldStatistics4);

  }

  @Test
  public void test309() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test309"); }

    org.mafagafogigante.dungeon.game.MinimumBoundingRectangle minimumBoundingRectangle2 = new org.mafagafogigante.dungeon.game.MinimumBoundingRectangle(17518, 45056);
    int i3 = minimumBoundingRectangle2.getHeight();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 45056);

  }

  @Test
  public void test310() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test310"); }

    org.mafagafogigante.dungeon.entity.creatures.CreaturePreset creaturePreset0 = new org.mafagafogigante.dungeon.entity.creatures.CreaturePreset();
    org.mafagafogigante.dungeon.game.Id id1 = null;
    creaturePreset0.setWeaponId(id1);
    creaturePreset0.setAttack(57);
    org.mafagafogigante.dungeon.entity.Luminosity luminosity5 = creaturePreset0.getLuminosity();
    creaturePreset0.setInventoryItemLimit(57);
    org.mafagafogigante.dungeon.entity.creatures.Creature.Tag tag8 = org.mafagafogigante.dungeon.entity.creatures.Creature.Tag.CORPSE;
    boolean b9 = creaturePreset0.hasTag(tag8);
    int i10 = creaturePreset0.getInventoryItemLimit();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(luminosity5);
    org.junit.Assert.assertTrue("'" + tag8 + "' != '" + org.mafagafogigante.dungeon.entity.creatures.Creature.Tag.CORPSE + "'", tag8.equals(org.mafagafogigante.dungeon.entity.creatures.Creature.Tag.CORPSE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 57);

  }

//  @Test
//  public void test311() throws Throwable {
//
//    if (debug) { System.out.format("%n%s%n","RegressionTest2.test311"); }
//
//    org.mafagafogigante.dungeon.entity.creatures.CreaturePreset creaturePreset0 = new org.mafagafogigante.dungeon.entity.creatures.CreaturePreset();
//    org.mafagafogigante.dungeon.game.Id id1 = null;
//    creaturePreset0.setWeaponId(id1);
//    org.mafagafogigante.dungeon.game.Id id3 = creaturePreset0.getId();
//    org.mafagafogigante.dungeon.entity.Luminosity luminosity4 = creaturePreset0.getLuminosity();
//    org.mafagafogigante.dungeon.entity.creatures.Drop[] drop_array5 = new org.mafagafogigante.dungeon.entity.creatures.Drop[] {  };
//    java.util.ArrayList<org.mafagafogigante.dungeon.entity.creatures.Drop> arraylist_drop6 = new java.util.ArrayList<org.mafagafogigante.dungeon.entity.creatures.Drop>();
//    boolean b7 = java.util.Collections.addAll((java.util.Collection<org.mafagafogigante.dungeon.entity.creatures.Drop>)arraylist_drop6, drop_array5);
//    creaturePreset0.setDropList((java.util.List<org.mafagafogigante.dungeon.entity.creatures.Drop>)arraylist_drop6);
//    org.mafagafogigante.dungeon.game.Id id9 = creaturePreset0.getWeaponId();
//    
//    // Regression assertion (captures the current behavior of the code)
//    org.junit.Assert.assertNull(id3);
//    
//    // Regression assertion (captures the current behavior of the code)
//    org.junit.Assert.assertNotNull(luminosity4);
//    
//    // Regression assertion (captures the current behavior of the code)
//    org.junit.Assert.assertNotNull(drop_array5);
//    
//    // Regression assertion (captures the current behavior of the code)
//    org.junit.Assert.assertTrue(b7 == false);
//    
//    // Regression assertion (captures the current behavior of the code)
//    org.junit.Assert.assertNull(id9);
//
//  }

  @Test
  public void test312() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test312"); }

    org.mafagafogigante.dungeon.commands.CommandDescription commandDescription2 = new org.mafagafogigante.dungeon.commands.CommandDescription("BattleStatisticsQuery{id=null, type='hi!', causeOfDeath=null, partOfDay=null}", "ItemIntegrity{integrity=0/1, item=null}");

  }

  @Test
  public void test313() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test313"); }

    java.lang.String[] str_array5 = new java.lang.String[] { "hi!", "visibilityCriteria=VisibilityCriteria{[]}", "visibilityCriteria=VisibilityCriteria{[]}", "Damaged", "hi!" };
    org.mafagafogigante.dungeon.util.Table table6 = new org.mafagafogigante.dungeon.util.Table(str_array5);
    org.mafagafogigante.dungeon.gui.WritingSpecifications writingSpecifications7 = null;
    org.mafagafogigante.dungeon.io.Writer.write((org.mafagafogigante.dungeon.game.Writable)table6, writingSpecifications7);
    org.mafagafogigante.dungeon.game.DungeonString dungeonString10 = new org.mafagafogigante.dungeon.game.DungeonString("hi!");
    java.lang.String[] str_array15 = new java.lang.String[] { "hi!", "Damaged", "BattleStatistics{records=CounterMap{map={}}}", "" };
    dungeonString10.append(str_array15);
    java.lang.String str17 = dungeonString10.toString();
    org.mafagafogigante.dungeon.game.Point point21 = new org.mafagafogigante.dungeon.game.Point(10, (int)'a', 0);
    java.lang.String[] str_array24 = new java.lang.String[] { "", "" };
    org.mafagafogigante.dungeon.util.Table table25 = new org.mafagafogigante.dungeon.util.Table(str_array24);
    boolean b26 = point21.equals((java.lang.Object)str_array24);
    dungeonString10.append(str_array24);
    org.mafagafogigante.dungeon.entity.items.Item[] item_array28 = new org.mafagafogigante.dungeon.entity.items.Item[] {  };
    java.util.ArrayList<org.mafagafogigante.dungeon.entity.items.Item> arraylist_item29 = new java.util.ArrayList<org.mafagafogigante.dungeon.entity.items.Item>();
    boolean b30 = java.util.Collections.addAll((java.util.Collection<org.mafagafogigante.dungeon.entity.items.Item>)arraylist_item29, item_array28);
    org.mafagafogigante.dungeon.game.DungeonString dungeonString32 = new org.mafagafogigante.dungeon.game.DungeonString("hi!");
    java.lang.String[] str_array37 = new java.lang.String[] { "hi!", "Damaged", "BattleStatistics{records=CounterMap{map={}}}", "" };
    dungeonString32.append(str_array37);
    java.util.List<org.mafagafogigante.dungeon.entity.items.Item> list_item39 = org.mafagafogigante.dungeon.entity.creatures.HeroUtils.findItems((java.util.List<org.mafagafogigante.dungeon.entity.items.Item>)arraylist_item29, str_array37);
    org.mafagafogigante.dungeon.game.DungeonString dungeonString41 = new org.mafagafogigante.dungeon.game.DungeonString("hi!");
    java.lang.String[] str_array46 = new java.lang.String[] { "hi!", "Damaged", "BattleStatistics{records=CounterMap{map={}}}", "" };
    dungeonString41.append(str_array46);
    java.lang.String[] str_array53 = new java.lang.String[] { "hi!", "visibilityCriteria=VisibilityCriteria{[]}", "visibilityCriteria=VisibilityCriteria{[]}", "Damaged", "hi!" };
    org.mafagafogigante.dungeon.util.Table table54 = new org.mafagafogigante.dungeon.util.Table(str_array53);
    dungeonString41.append(str_array53);
    java.util.List<org.mafagafogigante.dungeon.entity.items.Item> list_item56 = org.mafagafogigante.dungeon.entity.creatures.HeroUtils.findItems(list_item39, str_array53);
    dungeonString10.append(str_array53);
    table6.insertRow(str_array53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "DungeonString{coloredStringList=[ColoredString{string='hi!hi!DamagedBattleStatistics{records=CounterMap{map={}}}', color=java.awt.Color[r=192,g=192,b=192]}], currentColor=java.awt.Color[r=192,g=192,b=192]}"+ "'", str17.equals("DungeonString{coloredStringList=[ColoredString{string='hi!hi!DamagedBattleStatistics{records=CounterMap{map={}}}', color=java.awt.Color[r=192,g=192,b=192]}], currentColor=java.awt.Color[r=192,g=192,b=192]}"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(item_array28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_item39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_item56);

  }

  @Test
  public void test314() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test314"); }

    org.mafagafogigante.dungeon.entity.Entity[] entity_array0 = new org.mafagafogigante.dungeon.entity.Entity[] {  };
    java.util.ArrayList<org.mafagafogigante.dungeon.entity.Entity> arraylist_entity1 = new java.util.ArrayList<org.mafagafogigante.dungeon.entity.Entity>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.mafagafogigante.dungeon.entity.Entity>)arraylist_entity1, entity_array0);
    org.mafagafogigante.dungeon.entity.Luminosity luminosity3 = org.mafagafogigante.dungeon.entity.Luminosity.resultantLuminosity((java.util.Collection<org.mafagafogigante.dungeon.entity.Entity>)arraylist_entity1);
    org.mafagafogigante.dungeon.world.LuminosityVisibilityCriterion luminosityVisibilityCriterion4 = new org.mafagafogigante.dungeon.world.LuminosityVisibilityCriterion(luminosity3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(entity_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(luminosity3);

  }

  @Test
  public void test315() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test315"); }

    org.mafagafogigante.dungeon.entity.Integrity integrity2 = new org.mafagafogigante.dungeon.entity.Integrity((int)(byte)1, (int)(byte)0);
    boolean b3 = integrity2.isMaximum();
    org.mafagafogigante.dungeon.entity.items.Item item4 = null;
    org.mafagafogigante.dungeon.entity.items.ItemIntegrity itemIntegrity5 = org.mafagafogigante.dungeon.entity.items.ItemIntegrity.makeItemIntegrity(integrity2, item4);
    itemIntegrity5.incrementBy((int)(byte)0);
    itemIntegrity5.incrementBy((int)(short)100);
    org.mafagafogigante.dungeon.util.Percentage percentage10 = itemIntegrity5.toPercentage();
    itemIntegrity5.decrementBy(0);
    org.mafagafogigante.dungeon.util.Percentage percentage13 = itemIntegrity5.toPercentage();
    int i14 = itemIntegrity5.getCurrent();
    org.mafagafogigante.dungeon.util.Percentage percentage15 = itemIntegrity5.toPercentage();
    int i16 = itemIntegrity5.getMaximum();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(itemIntegrity5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(percentage10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(percentage13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(percentage15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 1);

  }

  @Test
  public void test316() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test316"); }

    org.mafagafogigante.dungeon.date.Date date3 = new org.mafagafogigante.dungeon.date.Date((long)97, (long)(byte)-1, (long)'#');
    org.mafagafogigante.dungeon.date.Date date4 = null;
    // The following exception was thrown during execution in test generation
    try {
    int i5 = date3.compareTo(date4);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }

  }

  @Test
  public void test317() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test317"); }

    org.mafagafogigante.dungeon.util.CircularList<org.mafagafogigante.dungeon.entity.creatures.Observer> circularlist_observer1 = new org.mafagafogigante.dungeon.util.CircularList<org.mafagafogigante.dungeon.entity.creatures.Observer>((int)'a');
    int i2 = circularlist_observer1.size();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 0);

  }

  @Test
  public void test318() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test318"); }

    org.mafagafogigante.dungeon.entity.items.ItemPreset itemPreset0 = new org.mafagafogigante.dungeon.entity.items.ItemPreset();
    org.mafagafogigante.dungeon.entity.Integrity integrity1 = itemPreset0.getIntegrity();
    org.mafagafogigante.dungeon.entity.Integrity integrity2 = null;
    itemPreset0.setIntegrity(integrity2);
    org.mafagafogigante.dungeon.util.Percentage percentage4 = itemPreset0.getVisibility();
    org.mafagafogigante.dungeon.entity.Integrity integrity5 = itemPreset0.getIntegrity();
    java.lang.String str6 = itemPreset0.getText();
    java.lang.String str7 = itemPreset0.getType();
    org.mafagafogigante.dungeon.entity.Integrity integrity10 = new org.mafagafogigante.dungeon.entity.Integrity(1, 0);
    boolean b11 = integrity10.isMaximum();
    integrity10.incrementBy((int)(short)0);
    org.mafagafogigante.dungeon.util.Percentage percentage14 = integrity10.toPercentage();
    itemPreset0.setHitRate(percentage14);
    org.mafagafogigante.dungeon.game.Id id17 = new org.mafagafogigante.dungeon.game.Id("100");
    java.lang.String str18 = id17.toString();
    itemPreset0.setId(id17);
    org.mafagafogigante.dungeon.entity.items.BookComponent bookComponent21 = new org.mafagafogigante.dungeon.entity.items.BookComponent(id17, "DungeonString{coloredStringList=[ColoredString{string='hi!hi!DamagedBattleStatistics{records=CounterMap{map={}}}', color=java.awt.Color[r=192,g=192,b=192]}], currentColor=java.awt.Color[r=192,g=192,b=192]}");
    int i22 = bookComponent21.getTimeToRead();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(integrity1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(percentage4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(integrity5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(percentage14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "100"+ "'", str18.equals("100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i22 == 205);

  }

  @Test
  public void test319() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test319"); }

    java.lang.String[] str_array5 = new java.lang.String[] { "hi!", "visibilityCriteria=VisibilityCriteria{[]}", "visibilityCriteria=VisibilityCriteria{[]}", "Damaged", "hi!" };
    org.mafagafogigante.dungeon.util.Table table6 = new org.mafagafogigante.dungeon.util.Table(str_array5);
    org.mafagafogigante.dungeon.io.Writer.writeAndWait((org.mafagafogigante.dungeon.game.Writable)table6);
    org.mafagafogigante.dungeon.entity.creatures.Hero hero8 = null;
    org.mafagafogigante.dungeon.entity.creatures.HeroSpellcaster heroSpellcaster9 = new org.mafagafogigante.dungeon.entity.creatures.HeroSpellcaster(hero8);
    java.util.List<org.mafagafogigante.dungeon.spells.Spell> list_spell10 = heroSpellcaster9.getSpellList();
    java.lang.String[] str_array11 = new java.lang.String[] {  };
    heroSpellcaster9.parseCast(str_array11);
    // The following exception was thrown during execution in test generation
    try {
    table6.insertRow(str_array11);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_spell10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array11);

  }

  @Test
  public void test320() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test320"); }

    org.mafagafogigante.dungeon.commands.CommandDescription commandDescription2 = new org.mafagafogigante.dungeon.commands.CommandDescription("", "day 10 of month 1 of the year 1");
    java.lang.String str3 = commandDescription2.getInfo();
    java.lang.String str4 = commandDescription2.toString();
    java.lang.String str5 = commandDescription2.getName();
    java.lang.String str6 = commandDescription2.getName();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "day 10 of month 1 of the year 1"+ "'", str3.equals("day 10 of month 1 of the year 1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + " : day 10 of month 1 of the year 1"+ "'", str4.equals(" : day 10 of month 1 of the year 1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + ""+ "'", str5.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + ""+ "'", str6.equals(""));

  }

//  @Test
//  public void test321() throws Throwable {
//
//    if (debug) { System.out.format("%n%s%n","RegressionTest2.test321"); }
//
//    org.mafagafogigante.dungeon.entity.creatures.CreaturePreset creaturePreset0 = new org.mafagafogigante.dungeon.entity.creatures.CreaturePreset();
//    org.mafagafogigante.dungeon.game.Id id1 = null;
//    creaturePreset0.setWeaponId(id1);
//    creaturePreset0.setAttack(57);
//    org.mafagafogigante.dungeon.entity.Luminosity luminosity5 = creaturePreset0.getLuminosity();
//    creaturePreset0.setInventoryItemLimit(57);
//    org.mafagafogigante.dungeon.entity.creatures.Drop[] drop_array8 = new org.mafagafogigante.dungeon.entity.creatures.Drop[] {  };
//    java.util.ArrayList<org.mafagafogigante.dungeon.entity.creatures.Drop> arraylist_drop9 = new java.util.ArrayList<org.mafagafogigante.dungeon.entity.creatures.Drop>();
//    boolean b10 = java.util.Collections.addAll((java.util.Collection<org.mafagafogigante.dungeon.entity.creatures.Drop>)arraylist_drop9, drop_array8);
//    creaturePreset0.setDropList((java.util.List<org.mafagafogigante.dungeon.entity.creatures.Drop>)arraylist_drop9);
//    int i12 = creaturePreset0.getInventoryItemLimit();
//    org.mafagafogigante.dungeon.entity.TagSet<org.mafagafogigante.dungeon.entity.creatures.Creature.Tag> tagset_tag13 = null;
//    creaturePreset0.setTagSet(tagset_tag13);
//    org.mafagafogigante.dungeon.util.CircularList<java.lang.Comparable<org.mafagafogigante.dungeon.entity.Weight>> circularlist_comparable_weight16 = new org.mafagafogigante.dungeon.util.CircularList<java.lang.Comparable<org.mafagafogigante.dungeon.entity.Weight>>(100);
//    org.mafagafogigante.dungeon.entity.creatures.Creature creature17 = null;
//    org.mafagafogigante.dungeon.entity.items.CreatureInventory creatureInventory20 = new org.mafagafogigante.dungeon.entity.items.CreatureInventory(creature17, (-1), 0.0d);
//    org.mafagafogigante.dungeon.entity.Weight weight21 = creatureInventory20.getWeight();
//    circularlist_comparable_weight16.add((java.lang.Comparable<org.mafagafogigante.dungeon.entity.Weight>)weight21);
//    org.mafagafogigante.dungeon.entity.Weight weight24 = org.mafagafogigante.dungeon.entity.Weight.newInstance((double)(byte)-1);
//    org.mafagafogigante.dungeon.entity.Weight weight25 = org.mafagafogigante.dungeon.entity.Weight.ZERO;
//    org.mafagafogigante.dungeon.entity.Weight weight26 = weight24.add(weight25);
//    org.mafagafogigante.dungeon.entity.Weight weight28 = org.mafagafogigante.dungeon.entity.Weight.newInstance((double)'#');
//    org.mafagafogigante.dungeon.entity.Weight weight29 = weight26.add(weight28);
//    circularlist_comparable_weight16.add((java.lang.Comparable<org.mafagafogigante.dungeon.entity.Weight>)weight26);
//    org.mafagafogigante.dungeon.entity.Weight weight32 = org.mafagafogigante.dungeon.entity.Weight.newInstance((double)(byte)-1);
//    org.mafagafogigante.dungeon.entity.Weight weight33 = org.mafagafogigante.dungeon.entity.Weight.ZERO;
//    org.mafagafogigante.dungeon.entity.Weight weight34 = weight32.add(weight33);
//    org.mafagafogigante.dungeon.entity.Weight weight36 = org.mafagafogigante.dungeon.entity.Weight.newInstance((double)'#');
//    org.mafagafogigante.dungeon.entity.Weight weight37 = weight34.add(weight36);
//    circularlist_comparable_weight16.add((java.lang.Comparable<org.mafagafogigante.dungeon.entity.Weight>)weight34);
//    org.mafagafogigante.dungeon.entity.Weight weight40 = org.mafagafogigante.dungeon.entity.Weight.newInstance((double)'#');
//    org.mafagafogigante.dungeon.entity.Weight weight42 = org.mafagafogigante.dungeon.entity.Weight.newInstance((double)'#');
//    org.mafagafogigante.dungeon.entity.Weight weight43 = weight40.add(weight42);
//    org.mafagafogigante.dungeon.entity.Weight weight45 = org.mafagafogigante.dungeon.entity.Weight.newInstance((double)(byte)-1);
//    org.mafagafogigante.dungeon.entity.Weight weight46 = org.mafagafogigante.dungeon.entity.Weight.ZERO;
//    org.mafagafogigante.dungeon.entity.Weight weight47 = weight45.add(weight46);
//    int i48 = weight42.compareTo(weight46);
//    java.lang.String str49 = weight42.toString();
//    org.mafagafogigante.dungeon.entity.creatures.Creature creature50 = null;
//    org.mafagafogigante.dungeon.entity.items.CreatureInventory creatureInventory53 = new org.mafagafogigante.dungeon.entity.items.CreatureInventory(creature50, (-1), 0.0d);
//    org.mafagafogigante.dungeon.entity.Weight weight54 = creatureInventory53.getWeight();
//    org.mafagafogigante.dungeon.entity.Weight weight55 = weight42.add(weight54);
//    circularlist_comparable_weight16.add((java.lang.Comparable<org.mafagafogigante.dungeon.entity.Weight>)weight42);
//    creaturePreset0.setWeight(weight42);
//    
//    // Regression assertion (captures the current behavior of the code)
//    org.junit.Assert.assertNotNull(luminosity5);
//    
//    // Regression assertion (captures the current behavior of the code)
//    org.junit.Assert.assertNotNull(drop_array8);
//    
//    // Regression assertion (captures the current behavior of the code)
//    org.junit.Assert.assertTrue(b10 == false);
//    
//    // Regression assertion (captures the current behavior of the code)
//    org.junit.Assert.assertTrue(i12 == 57);
//    
//    // Regression assertion (captures the current behavior of the code)
//    org.junit.Assert.assertNotNull(weight21);
//    
//    // Regression assertion (captures the current behavior of the code)
//    org.junit.Assert.assertNotNull(weight24);
//    
//    // Regression assertion (captures the current behavior of the code)
//    org.junit.Assert.assertNotNull(weight25);
//    
//    // Regression assertion (captures the current behavior of the code)
//    org.junit.Assert.assertNotNull(weight26);
//    
//    // Regression assertion (captures the current behavior of the code)
//    org.junit.Assert.assertNotNull(weight28);
//    
//    // Regression assertion (captures the current behavior of the code)
//    org.junit.Assert.assertNotNull(weight29);
//    
//    // Regression assertion (captures the current behavior of the code)
//    org.junit.Assert.assertNotNull(weight32);
//    
//    // Regression assertion (captures the current behavior of the code)
//    org.junit.Assert.assertNotNull(weight33);
//    
//    // Regression assertion (captures the current behavior of the code)
//    org.junit.Assert.assertNotNull(weight34);
//    
//    // Regression assertion (captures the current behavior of the code)
//    org.junit.Assert.assertNotNull(weight36);
//    
//    // Regression assertion (captures the current behavior of the code)
//    org.junit.Assert.assertNotNull(weight37);
//    
//    // Regression assertion (captures the current behavior of the code)
//    org.junit.Assert.assertNotNull(weight40);
//    
//    // Regression assertion (captures the current behavior of the code)
//    org.junit.Assert.assertNotNull(weight42);
//    
//    // Regression assertion (captures the current behavior of the code)
//    org.junit.Assert.assertNotNull(weight43);
//    
//    // Regression assertion (captures the current behavior of the code)
//    org.junit.Assert.assertNotNull(weight45);
//    
//    // Regression assertion (captures the current behavior of the code)
//    org.junit.Assert.assertNotNull(weight46);
//    
//    // Regression assertion (captures the current behavior of the code)
//    org.junit.Assert.assertNotNull(weight47);
//    
//    // Regression assertion (captures the current behavior of the code)
//    org.junit.Assert.assertTrue(i48 == 1);
//    
//    // Regression assertion (captures the current behavior of the code)
//    org.junit.Assert.assertTrue("'" + str49 + "' != '" + "35 kg"+ "'", str49.equals("35 kg"));
//    
//    // Regression assertion (captures the current behavior of the code)
//    org.junit.Assert.assertNotNull(weight54);
//    
//    // Regression assertion (captures the current behavior of the code)
//    org.junit.Assert.assertNotNull(weight55);
//
//  }

  @Test
  public void test322() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test322"); }

    org.mafagafogigante.dungeon.util.CircularList<java.lang.Comparable<org.mafagafogigante.dungeon.entity.Weight>> circularlist_comparable_weight1 = new org.mafagafogigante.dungeon.util.CircularList<java.lang.Comparable<org.mafagafogigante.dungeon.entity.Weight>>(100);
    org.mafagafogigante.dungeon.entity.creatures.Creature creature2 = null;
    org.mafagafogigante.dungeon.entity.items.CreatureInventory creatureInventory5 = new org.mafagafogigante.dungeon.entity.items.CreatureInventory(creature2, (-1), 0.0d);
    org.mafagafogigante.dungeon.entity.Weight weight6 = creatureInventory5.getWeight();
    circularlist_comparable_weight1.add((java.lang.Comparable<org.mafagafogigante.dungeon.entity.Weight>)weight6);
    org.mafagafogigante.dungeon.entity.Weight weight9 = org.mafagafogigante.dungeon.entity.Weight.newInstance((double)(byte)-1);
    org.mafagafogigante.dungeon.entity.Weight weight10 = org.mafagafogigante.dungeon.entity.Weight.ZERO;
    org.mafagafogigante.dungeon.entity.Weight weight11 = weight9.add(weight10);
    org.mafagafogigante.dungeon.entity.Weight weight13 = org.mafagafogigante.dungeon.entity.Weight.newInstance((double)'#');
    org.mafagafogigante.dungeon.entity.Weight weight14 = weight11.add(weight13);
    circularlist_comparable_weight1.add((java.lang.Comparable<org.mafagafogigante.dungeon.entity.Weight>)weight11);
    org.mafagafogigante.dungeon.entity.creatures.Creature creature16 = null;
    org.mafagafogigante.dungeon.entity.items.CreatureInventory creatureInventory19 = new org.mafagafogigante.dungeon.entity.items.CreatureInventory(creature16, (-1), 0.0d);
    org.mafagafogigante.dungeon.entity.Weight weight20 = creatureInventory19.getWeight();
    circularlist_comparable_weight1.add((java.lang.Comparable<org.mafagafogigante.dungeon.entity.Weight>)weight20);
    org.mafagafogigante.dungeon.util.CircularList<java.lang.Comparable<org.mafagafogigante.dungeon.entity.Weight>> circularlist_comparable_weight23 = new org.mafagafogigante.dungeon.util.CircularList<java.lang.Comparable<org.mafagafogigante.dungeon.entity.Weight>>(100);
    org.mafagafogigante.dungeon.entity.creatures.Creature creature24 = null;
    org.mafagafogigante.dungeon.entity.items.CreatureInventory creatureInventory27 = new org.mafagafogigante.dungeon.entity.items.CreatureInventory(creature24, (-1), 0.0d);
    org.mafagafogigante.dungeon.entity.Weight weight28 = creatureInventory27.getWeight();
    circularlist_comparable_weight23.add((java.lang.Comparable<org.mafagafogigante.dungeon.entity.Weight>)weight28);
    org.mafagafogigante.dungeon.entity.Weight weight31 = org.mafagafogigante.dungeon.entity.Weight.newInstance((double)'#');
    org.mafagafogigante.dungeon.entity.Weight weight33 = org.mafagafogigante.dungeon.entity.Weight.newInstance((double)'#');
    org.mafagafogigante.dungeon.entity.Weight weight34 = weight31.add(weight33);
    org.mafagafogigante.dungeon.entity.Weight weight36 = org.mafagafogigante.dungeon.entity.Weight.newInstance((double)(byte)-1);
    org.mafagafogigante.dungeon.entity.Weight weight37 = org.mafagafogigante.dungeon.entity.Weight.ZERO;
    org.mafagafogigante.dungeon.entity.Weight weight38 = weight36.add(weight37);
    int i39 = weight33.compareTo(weight37);
    org.mafagafogigante.dungeon.entity.Weight weight40 = weight28.add(weight37);
    circularlist_comparable_weight1.add((java.lang.Comparable<org.mafagafogigante.dungeon.entity.Weight>)weight37);
    boolean b42 = circularlist_comparable_weight1.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(weight6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(weight9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(weight10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(weight11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(weight13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(weight14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(weight20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(weight28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(weight31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(weight33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(weight34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(weight36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(weight37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(weight38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i39 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(weight40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == false);

  }

  @Test
  public void test323() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test323"); }

    org.mafagafogigante.dungeon.gui.WritingSpecifications writingSpecifications2 = new org.mafagafogigante.dungeon.gui.WritingSpecifications(false, 32);
    boolean b3 = writingSpecifications2.shouldWait();
    java.lang.String str4 = writingSpecifications2.toString();
    boolean b5 = writingSpecifications2.shouldWait();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "WritingSpecifications{scrollDown=false}"+ "'", str4.equals("WritingSpecifications{scrollDown=false}"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);

  }

  @Test
  public void test324() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test324"); }

    org.mafagafogigante.dungeon.commands.IssuedCommand issuedCommand1 = new org.mafagafogigante.dungeon.commands.IssuedCommand("ItemIntegrity{integrity=0/1, item=null}");
    org.mafagafogigante.dungeon.commands.PreparedIssuedCommand preparedIssuedCommand2 = org.mafagafogigante.dungeon.commands.IssuedCommandProcessor.prepareIssuedCommand(issuedCommand1);
    java.util.List<java.lang.String> list_str3 = issuedCommand1.getTokens();
    java.lang.String str4 = issuedCommand1.getStringRepresentation();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(preparedIssuedCommand2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_str3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "ItemIntegrity{integrity=0/1, item=null}"+ "'", str4.equals("ItemIntegrity{integrity=0/1, item=null}"));

  }

  @Test
  public void test325() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test325"); }

    org.mafagafogigante.dungeon.util.SystemInformation systemInformation0 = new org.mafagafogigante.dungeon.util.SystemInformation();
    java.util.List<org.mafagafogigante.dungeon.game.ColoredString> list_coloredString1 = systemInformation0.toColoredStringList();
    org.mafagafogigante.dungeon.gui.WritingSpecifications writingSpecifications2 = null;
    org.mafagafogigante.dungeon.io.Writer.write((org.mafagafogigante.dungeon.game.Writable)systemInformation0, writingSpecifications2);
    java.lang.String str4 = systemInformation0.toString();
    org.mafagafogigante.dungeon.io.Writer.writeAndWait((org.mafagafogigante.dungeon.game.Writable)systemInformation0);
    java.util.List<org.mafagafogigante.dungeon.game.ColoredString> list_coloredString6 = systemInformation0.toColoredStringList();
    java.util.List<org.mafagafogigante.dungeon.game.ColoredString> list_coloredString7 = systemInformation0.toColoredStringList();
    java.util.List<org.mafagafogigante.dungeon.game.ColoredString> list_coloredString8 = systemInformation0.toColoredStringList();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_coloredString1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "User: Nicholas\nTime: 15:45:51\nDate: 2017-04-09\nJava: Java version 1.8.0_121 by Oracle Corporation\nHeap: Using 38.5 MiB out of the allocated 109.5 MiB\nOS: Windows 10 (amd64) 10.0"+ "'", str4.equals("User: Nicholas\nTime: 15:45:51\nDate: 2017-04-09\nJava: Java version 1.8.0_121 by Oracle Corporation\nHeap: Using 38.5 MiB out of the allocated 109.5 MiB\nOS: Windows 10 (amd64) 10.0"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_coloredString6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_coloredString7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_coloredString8);

  }

  @Test
  public void test326() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test326"); }

    org.mafagafogigante.dungeon.game.DungeonString dungeonString1 = new org.mafagafogigante.dungeon.game.DungeonString("hi!");
    java.lang.String[] str_array6 = new java.lang.String[] { "hi!", "Damaged", "BattleStatistics{records=CounterMap{map={}}}", "" };
    dungeonString1.append(str_array6);
    java.util.List<org.mafagafogigante.dungeon.game.ColoredString> list_coloredString8 = dungeonString1.toColoredStringList();
    org.mafagafogigante.dungeon.game.ColoredString coloredString9 = org.mafagafogigante.dungeon.game.Random.select(list_coloredString8);
    java.lang.String str10 = coloredString9.getString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_coloredString8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(coloredString9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "hi!hi!DamagedBattleStatistics{records=CounterMap{map={}}}"+ "'", str10.equals("hi!hi!DamagedBattleStatistics{records=CounterMap{map={}}}"));

  }

  @Test
  public void test327() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test327"); }

    org.mafagafogigante.dungeon.entity.Integrity integrity2 = new org.mafagafogigante.dungeon.entity.Integrity(1, 0);
    boolean b3 = integrity2.isMaximum();
    boolean b4 = integrity2.isZero();
    integrity2.decrementBy(97);
    int i7 = integrity2.getMaximum();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 1);

  }

  @Test
  public void test328() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test328"); }

    org.mafagafogigante.dungeon.achievements.BattleStatisticsQuery battleStatisticsQuery0 = new org.mafagafogigante.dungeon.achievements.BattleStatisticsQuery();
    org.mafagafogigante.dungeon.stats.CauseOfDeath causeOfDeath1 = org.mafagafogigante.dungeon.stats.CauseOfDeath.getUnarmedCauseOfDeath();
    battleStatisticsQuery0.setCauseOfDeath(causeOfDeath1);
    org.mafagafogigante.dungeon.game.PartOfDay partOfDay3 = org.mafagafogigante.dungeon.game.PartOfDay.AFTERNOON;
    java.lang.String str4 = partOfDay3.toString();
    boolean b5 = causeOfDeath1.equals((java.lang.Object)partOfDay3);
    java.lang.String str6 = causeOfDeath1.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(causeOfDeath1);
    org.junit.Assert.assertTrue("'" + partOfDay3 + "' != '" + org.mafagafogigante.dungeon.game.PartOfDay.AFTERNOON + "'", partOfDay3.equals(org.mafagafogigante.dungeon.game.PartOfDay.AFTERNOON));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "Afternoon"+ "'", str4.equals("Afternoon"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "Unarmed : UNARMED"+ "'", str6.equals("Unarmed : UNARMED"));

  }

  @Test
  public void test329() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test329"); }

    org.mafagafogigante.dungeon.entity.items.ItemPreset itemPreset0 = new org.mafagafogigante.dungeon.entity.items.ItemPreset();
    org.mafagafogigante.dungeon.entity.Integrity integrity1 = itemPreset0.getIntegrity();
    org.mafagafogigante.dungeon.util.Percentage percentage2 = itemPreset0.getVisibility();
    java.lang.String str3 = itemPreset0.getType();
    itemPreset0.setDrinkableHealing(10);
    org.mafagafogigante.dungeon.game.PartOfDay partOfDay6 = org.mafagafogigante.dungeon.game.PartOfDay.NIGHT;
    org.mafagafogigante.dungeon.entity.Luminosity luminosity7 = partOfDay6.getLuminosity();
    org.mafagafogigante.dungeon.game.Name name8 = partOfDay6.getName();
    java.lang.String str10 = name8.getQuantifiedName((int)'a');
    java.lang.String str11 = name8.getSingular();
    java.lang.String str12 = name8.toString();
    java.lang.String str13 = name8.getSingular();
    itemPreset0.setName(name8);
    org.mafagafogigante.dungeon.entity.items.ItemPreset itemPreset15 = new org.mafagafogigante.dungeon.entity.items.ItemPreset();
    org.mafagafogigante.dungeon.entity.Integrity integrity16 = itemPreset15.getIntegrity();
    org.mafagafogigante.dungeon.entity.Integrity integrity17 = null;
    itemPreset15.setIntegrity(integrity17);
    org.mafagafogigante.dungeon.util.Percentage percentage19 = itemPreset15.getVisibility();
    java.lang.String str20 = itemPreset15.getType();
    itemPreset15.setIntegrityDecrementOnHit((int)(short)100);
    org.mafagafogigante.dungeon.util.Percentage percentage24 = new org.mafagafogigante.dungeon.util.Percentage((double)57);
    itemPreset15.setVisibility(percentage24);
    org.mafagafogigante.dungeon.game.Id id26 = null;
    itemPreset15.setId(id26);
    itemPreset15.setPutrefactionPeriod((long)(short)1);
    org.mafagafogigante.dungeon.entity.items.Item.Tag tag30 = org.mafagafogigante.dungeon.entity.items.Item.Tag.DECOMPOSES;
    boolean b31 = itemPreset15.hasTag(tag30);
    itemPreset0.addTag(tag30);
    itemPreset0.setDamage(46719);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(integrity1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(percentage2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str3);
    org.junit.Assert.assertTrue("'" + partOfDay6 + "' != '" + org.mafagafogigante.dungeon.game.PartOfDay.NIGHT + "'", partOfDay6.equals(org.mafagafogigante.dungeon.game.PartOfDay.NIGHT));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(luminosity7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(name8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "a few Nights"+ "'", str10.equals("a few Nights"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "Night"+ "'", str11.equals("Night"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "Night"+ "'", str12.equals("Night"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "Night"+ "'", str13.equals("Night"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(integrity16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(percentage19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str20);
    org.junit.Assert.assertTrue("'" + tag30 + "' != '" + org.mafagafogigante.dungeon.entity.items.Item.Tag.DECOMPOSES + "'", tag30.equals(org.mafagafogigante.dungeon.entity.items.Item.Tag.DECOMPOSES));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);

  }

  @Test
  public void test330() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test330"); }

    org.mafagafogigante.dungeon.game.Direction direction0 = org.mafagafogigante.dungeon.game.Direction.DOWN;
    org.mafagafogigante.dungeon.game.Point point1 = direction0.getOffset();
    org.mafagafogigante.dungeon.util.CounterMap<java.util.RandomAccess> countermap_randomAccess2 = new org.mafagafogigante.dungeon.util.CounterMap<java.util.RandomAccess>();
    java.lang.String[] str_array6 = new java.lang.String[] { "Damaged", "visibilityCriteria=VisibilityCriteria{[]}", "hi!" };
    java.util.ArrayList<java.lang.String> arraylist_str7 = new java.util.ArrayList<java.lang.String>();
    boolean b8 = java.util.Collections.addAll((java.util.Collection<java.lang.String>)arraylist_str7, str_array6);
    org.mafagafogigante.dungeon.io.Split split9 = org.mafagafogigante.dungeon.io.Split.splitOnOn((java.util.List<java.lang.String>)arraylist_str7);
    org.mafagafogigante.dungeon.io.Split split10 = org.mafagafogigante.dungeon.io.Split.splitOnOn((java.util.List<java.lang.String>)arraylist_str7);
    countermap_randomAccess2.incrementCounter((java.util.RandomAccess)arraylist_str7, (java.lang.Integer)3600);
    boolean b13 = point1.equals((java.lang.Object)3600);
    org.junit.Assert.assertTrue("'" + direction0 + "' != '" + org.mafagafogigante.dungeon.game.Direction.DOWN + "'", direction0.equals(org.mafagafogigante.dungeon.game.Direction.DOWN));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(point1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(split9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(split10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);

  }

  @Test
  public void test331() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test331"); }

    org.mafagafogigante.dungeon.stats.Statistics statistics0 = null;
    org.mafagafogigante.dungeon.achievements.AchievementTracker achievementTracker1 = new org.mafagafogigante.dungeon.achievements.AchievementTracker(statistics0);
    int i2 = achievementTracker1.getUnlockedCount();
    org.mafagafogigante.dungeon.achievements.AchievementStore achievementStore3 = null;
    org.mafagafogigante.dungeon.date.Date date7 = new org.mafagafogigante.dungeon.date.Date(10L, 100L, 100L);
    org.mafagafogigante.dungeon.date.Date date11 = new org.mafagafogigante.dungeon.date.Date(10L, 100L, 100L);
    int i12 = date7.compareTo(date11);
    long long13 = date11.getDay();
    // The following exception was thrown during execution in test generation
    try {
    achievementTracker1.update(achievementStore3, date11);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long13 == 10L);

  }

  @Test
  public void test332() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test332"); }

    org.mafagafogigante.dungeon.entity.items.ItemPreset itemPreset0 = new org.mafagafogigante.dungeon.entity.items.ItemPreset();
    org.mafagafogigante.dungeon.entity.Integrity integrity1 = itemPreset0.getIntegrity();
    org.mafagafogigante.dungeon.entity.Integrity integrity2 = null;
    itemPreset0.setIntegrity(integrity2);
    org.mafagafogigante.dungeon.util.Percentage percentage4 = itemPreset0.getVisibility();
    boolean b5 = itemPreset0.isUnique();
    org.mafagafogigante.dungeon.entity.Weight weight7 = org.mafagafogigante.dungeon.entity.Weight.newInstance((double)(byte)-1);
    org.mafagafogigante.dungeon.entity.Weight weight8 = org.mafagafogigante.dungeon.entity.Weight.ZERO;
    org.mafagafogigante.dungeon.entity.Weight weight9 = weight7.add(weight8);
    java.lang.String str10 = weight9.toString();
    itemPreset0.setWeight(weight9);
    org.mafagafogigante.dungeon.entity.Weight weight12 = itemPreset0.getWeight();
    int i13 = itemPreset0.getDrinkableHealing();
    long long14 = itemPreset0.getPutrefactionPeriod();
    int i15 = itemPreset0.getDamage();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(integrity1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(percentage4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(weight7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(weight8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(weight9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "0 kg"+ "'", str10.equals("0 kg"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(weight12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long14 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 0);

  }

  @Test
  public void test333() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test333"); }

    org.mafagafogigante.dungeon.entity.creatures.CreaturePreset creaturePreset0 = new org.mafagafogigante.dungeon.entity.creatures.CreaturePreset();
    org.mafagafogigante.dungeon.game.Id id1 = null;
    creaturePreset0.setWeaponId(id1);
    creaturePreset0.setAttack((int)(short)100);
    org.mafagafogigante.dungeon.game.Id id5 = creaturePreset0.getWeaponId();
    org.mafagafogigante.dungeon.entity.Luminosity luminosity6 = creaturePreset0.getLuminosity();
    org.mafagafogigante.dungeon.util.Percentage percentage7 = creaturePreset0.getVisibility();
    org.mafagafogigante.dungeon.entity.creatures.CreaturePreset creaturePreset8 = new org.mafagafogigante.dungeon.entity.creatures.CreaturePreset();
    org.mafagafogigante.dungeon.game.Id id9 = null;
    creaturePreset8.setWeaponId(id9);
    creaturePreset8.setAttack(57);
    org.mafagafogigante.dungeon.entity.Luminosity luminosity13 = creaturePreset8.getLuminosity();
    org.mafagafogigante.dungeon.entity.creatures.Creature.Tag tag14 = org.mafagafogigante.dungeon.entity.creatures.Creature.Tag.MILKABLE;
    boolean b15 = creaturePreset8.hasTag(tag14);
    boolean b16 = creaturePreset0.hasTag(tag14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(id5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(luminosity6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(percentage7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(luminosity13);
    org.junit.Assert.assertTrue("'" + tag14 + "' != '" + org.mafagafogigante.dungeon.entity.creatures.Creature.Tag.MILKABLE + "'", tag14.equals(org.mafagafogigante.dungeon.entity.creatures.Creature.Tag.MILKABLE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);

  }

  @Test
  public void test334() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test334"); }

    org.mafagafogigante.dungeon.entity.creatures.CreaturePreset creaturePreset0 = new org.mafagafogigante.dungeon.entity.creatures.CreaturePreset();
    org.mafagafogigante.dungeon.game.Id id1 = null;
    creaturePreset0.setWeaponId(id1);
    creaturePreset0.setAttack(57);
    org.mafagafogigante.dungeon.entity.Luminosity luminosity5 = creaturePreset0.getLuminosity();
    org.mafagafogigante.dungeon.entity.creatures.CreaturePreset creaturePreset6 = new org.mafagafogigante.dungeon.entity.creatures.CreaturePreset();
    org.mafagafogigante.dungeon.game.Id id7 = null;
    creaturePreset6.setWeaponId(id7);
    creaturePreset6.setAttack(57);
    org.mafagafogigante.dungeon.game.Id[] id_array11 = new org.mafagafogigante.dungeon.game.Id[] {  };
    java.util.ArrayList<org.mafagafogigante.dungeon.game.Id> arraylist_id12 = new java.util.ArrayList<org.mafagafogigante.dungeon.game.Id>();
    boolean b13 = java.util.Collections.addAll((java.util.Collection<org.mafagafogigante.dungeon.game.Id>)arraylist_id12, id_array11);
    creaturePreset6.setItems((java.util.List<org.mafagafogigante.dungeon.game.Id>)arraylist_id12);
    creaturePreset0.setItems((java.util.List<org.mafagafogigante.dungeon.game.Id>)arraylist_id12);
    org.mafagafogigante.dungeon.entity.items.ItemPreset itemPreset16 = new org.mafagafogigante.dungeon.entity.items.ItemPreset();
    org.mafagafogigante.dungeon.entity.Integrity integrity17 = itemPreset16.getIntegrity();
    org.mafagafogigante.dungeon.entity.Luminosity luminosity18 = itemPreset16.getLuminosity();
    org.mafagafogigante.dungeon.util.Percentage percentage20 = new org.mafagafogigante.dungeon.util.Percentage((double)57);
    itemPreset16.setVisibility(percentage20);
    creaturePreset0.setVisibility(percentage20);
    creaturePreset0.setType("DungeonString{coloredStringList=[ColoredString{string='\nYou don't see anyone here.\n', color=java.awt.Color[r=192,g=192,b=192]}], currentColor=java.awt.Color[r=192,g=192,b=192]}");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(luminosity5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(id_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(integrity17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(luminosity18);

  }

  @Test
  public void test335() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test335"); }

    org.mafagafogigante.dungeon.logging.DungeonLogger.info("Spell");

  }

  @Test
  public void test336() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test336"); }

    org.mafagafogigante.dungeon.entity.items.ItemPreset itemPreset3 = new org.mafagafogigante.dungeon.entity.items.ItemPreset();
    itemPreset3.setDrinkableHealing((int)(short)0);
    org.mafagafogigante.dungeon.util.Percentage percentage7 = new org.mafagafogigante.dungeon.util.Percentage((double)57);
    itemPreset3.setVisibility(percentage7);
    double d9 = org.mafagafogigante.dungeon.util.DungeonMath.weightedAverage((double)10.0f, 100.0d, percentage7);
    org.mafagafogigante.dungeon.entity.items.ItemPreset itemPreset10 = new org.mafagafogigante.dungeon.entity.items.ItemPreset();
    org.mafagafogigante.dungeon.entity.Integrity integrity11 = itemPreset10.getIntegrity();
    org.mafagafogigante.dungeon.entity.Integrity integrity12 = null;
    itemPreset10.setIntegrity(integrity12);
    org.mafagafogigante.dungeon.util.Percentage percentage14 = itemPreset10.getVisibility();
    java.lang.String str15 = itemPreset10.getType();
    org.mafagafogigante.dungeon.entity.items.Item.Tag tag16 = org.mafagafogigante.dungeon.entity.items.Item.Tag.REPAIRABLE;
    itemPreset10.addTag(tag16);
    org.mafagafogigante.dungeon.util.Percentage percentage19 = new org.mafagafogigante.dungeon.util.Percentage((double)'#');
    boolean b21 = percentage19.equals((java.lang.Object)10.0d);
    org.mafagafogigante.dungeon.entity.Luminosity luminosity22 = new org.mafagafogigante.dungeon.entity.Luminosity(percentage19);
    itemPreset10.setVisibility(percentage19);
    boolean b24 = percentage7.biggerThanOrEqualTo(percentage19);
    org.mafagafogigante.dungeon.entity.items.WeaponComponent weaponComponent26 = new org.mafagafogigante.dungeon.entity.items.WeaponComponent((int)(short)10, percentage19, 1);
    org.mafagafogigante.dungeon.entity.items.ItemPreset itemPreset27 = new org.mafagafogigante.dungeon.entity.items.ItemPreset();
    org.mafagafogigante.dungeon.entity.Integrity integrity28 = itemPreset27.getIntegrity();
    org.mafagafogigante.dungeon.entity.Integrity integrity29 = null;
    itemPreset27.setIntegrity(integrity29);
    org.mafagafogigante.dungeon.util.Percentage percentage32 = new org.mafagafogigante.dungeon.util.Percentage((double)'#');
    itemPreset27.setHitRate(percentage32);
    boolean b34 = percentage19.biggerThanOrEqualTo(percentage32);
    org.mafagafogigante.dungeon.entity.Visibility visibility35 = new org.mafagafogigante.dungeon.entity.Visibility(percentage32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d9 == 100.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(integrity11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(percentage14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str15);
    org.junit.Assert.assertTrue("'" + tag16 + "' != '" + org.mafagafogigante.dungeon.entity.items.Item.Tag.REPAIRABLE + "'", tag16.equals(org.mafagafogigante.dungeon.entity.items.Item.Tag.REPAIRABLE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(integrity28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == true);

  }

  @Test
  public void test337() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test337"); }

    org.mafagafogigante.dungeon.entity.Integrity integrity2 = new org.mafagafogigante.dungeon.entity.Integrity((int)(byte)1, (int)(byte)0);
    boolean b3 = integrity2.isMaximum();
    org.mafagafogigante.dungeon.entity.items.Item item4 = null;
    org.mafagafogigante.dungeon.entity.items.ItemIntegrity itemIntegrity5 = org.mafagafogigante.dungeon.entity.items.ItemIntegrity.makeItemIntegrity(integrity2, item4);
    itemIntegrity5.incrementBy((int)(byte)0);
    itemIntegrity5.incrementBy((int)(short)100);
    org.mafagafogigante.dungeon.util.Percentage percentage10 = itemIntegrity5.toPercentage();
    itemIntegrity5.decrementBy(0);
    org.mafagafogigante.dungeon.util.Percentage percentage13 = itemIntegrity5.toPercentage();
    java.lang.String str14 = itemIntegrity5.toString();
    // The following exception was thrown during execution in test generation
    try {
    itemIntegrity5.decrementBy(3);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(itemIntegrity5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(percentage10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(percentage13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "ItemIntegrity{integrity=1/1, item=null}"+ "'", str14.equals("ItemIntegrity{integrity=1/1, item=null}"));

  }

  @Test
  public void test338() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test338"); }

    org.mafagafogigante.dungeon.entity.creatures.CreaturePreset creaturePreset0 = new org.mafagafogigante.dungeon.entity.creatures.CreaturePreset();
    org.mafagafogigante.dungeon.game.Id id1 = null;
    creaturePreset0.setWeaponId(id1);
    creaturePreset0.setAttack(57);
    org.mafagafogigante.dungeon.entity.Luminosity luminosity5 = creaturePreset0.getLuminosity();
    org.mafagafogigante.dungeon.entity.Weight weight6 = creaturePreset0.getWeight();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(luminosity5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(weight6);

  }

  @Test
  public void test339() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test339"); }

    org.mafagafogigante.dungeon.date.Date date3 = new org.mafagafogigante.dungeon.date.Date((long)'a', (long)(short)-1, 1L);
    long long4 = date3.getHour();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long4 == 0L);

  }

  @Test
  public void test340() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test340"); }

    org.mafagafogigante.dungeon.world.VisibilityCriterion[] visibilityCriterion_array0 = new org.mafagafogigante.dungeon.world.VisibilityCriterion[] {  };
    org.mafagafogigante.dungeon.world.VisibilityCriteria visibilityCriteria1 = new org.mafagafogigante.dungeon.world.VisibilityCriteria(visibilityCriterion_array0);
    org.mafagafogigante.dungeon.world.VisibilityCriteria visibilityCriteria2 = new org.mafagafogigante.dungeon.world.VisibilityCriteria(visibilityCriterion_array0);
    org.mafagafogigante.dungeon.world.VisibilityCriterion[] visibilityCriterion_array3 = new org.mafagafogigante.dungeon.world.VisibilityCriterion[] {  };
    org.mafagafogigante.dungeon.world.VisibilityCriteria visibilityCriteria4 = new org.mafagafogigante.dungeon.world.VisibilityCriteria(visibilityCriterion_array3);
    org.mafagafogigante.dungeon.entity.creatures.Creature creature5 = null;
    org.mafagafogigante.dungeon.entity.creatures.Observer observer6 = new org.mafagafogigante.dungeon.entity.creatures.Observer(creature5);
    boolean b7 = visibilityCriteria4.isMetBy(observer6);
    org.mafagafogigante.dungeon.entity.items.Item[] item_array8 = new org.mafagafogigante.dungeon.entity.items.Item[] {  };
    java.util.ArrayList<org.mafagafogigante.dungeon.entity.items.Item> arraylist_item9 = new java.util.ArrayList<org.mafagafogigante.dungeon.entity.items.Item>();
    boolean b10 = java.util.Collections.addAll((java.util.Collection<org.mafagafogigante.dungeon.entity.items.Item>)arraylist_item9, item_array8);
    org.mafagafogigante.dungeon.game.DungeonString dungeonString12 = new org.mafagafogigante.dungeon.game.DungeonString("hi!");
    java.lang.String[] str_array17 = new java.lang.String[] { "hi!", "Damaged", "BattleStatistics{records=CounterMap{map={}}}", "" };
    dungeonString12.append(str_array17);
    observer6.writeItemSight((java.util.List<org.mafagafogigante.dungeon.entity.items.Item>)arraylist_item9, dungeonString12);
    org.mafagafogigante.dungeon.entity.items.Item[] item_array20 = new org.mafagafogigante.dungeon.entity.items.Item[] {  };
    java.util.ArrayList<org.mafagafogigante.dungeon.entity.items.Item> arraylist_item21 = new java.util.ArrayList<org.mafagafogigante.dungeon.entity.items.Item>();
    boolean b22 = java.util.Collections.addAll((java.util.Collection<org.mafagafogigante.dungeon.entity.items.Item>)arraylist_item21, item_array20);
    java.lang.String[] str_array28 = new java.lang.String[] { "CounterMap{map={}}", "User: Nicholas\nTime: 15:42:12\nDate: 2017-04-09\nJava: Java version 1.8.0_121 by Oracle Corporation\nHeap: Using 34.4 MiB out of the allocated 123.0 MiB\nOS: Windows 10 (amd64) 10.0", "hi!", "0 ms", "User: Nicholas\nTime: 15:42:12\nDate: 2017-04-09\nJava: Java version 1.8.0_121 by Oracle Corporation\nHeap: Using 41.5 MiB out of the allocated 154.5 MiB\nOS: Windows 10 (amd64) 10.0" };
    java.util.List<org.mafagafogigante.dungeon.entity.items.Item> list_item29 = org.mafagafogigante.dungeon.entity.creatures.HeroUtils.findItems((java.util.List<org.mafagafogigante.dungeon.entity.items.Item>)arraylist_item21, str_array28);
    org.mafagafogigante.dungeon.game.DungeonString dungeonString31 = new org.mafagafogigante.dungeon.game.DungeonString("hi!");
    observer6.writeItemSight(list_item29, dungeonString31);
    boolean b33 = visibilityCriteria2.isMetBy(observer6);
    org.mafagafogigante.dungeon.entity.items.Item[] item_array34 = new org.mafagafogigante.dungeon.entity.items.Item[] {  };
    java.util.ArrayList<org.mafagafogigante.dungeon.entity.items.Item> arraylist_item35 = new java.util.ArrayList<org.mafagafogigante.dungeon.entity.items.Item>();
    boolean b36 = java.util.Collections.addAll((java.util.Collection<org.mafagafogigante.dungeon.entity.items.Item>)arraylist_item35, item_array34);
    java.lang.String[] str_array42 = new java.lang.String[] { "CounterMap{map={}}", "User: Nicholas\nTime: 15:42:12\nDate: 2017-04-09\nJava: Java version 1.8.0_121 by Oracle Corporation\nHeap: Using 34.4 MiB out of the allocated 123.0 MiB\nOS: Windows 10 (amd64) 10.0", "hi!", "0 ms", "User: Nicholas\nTime: 15:42:12\nDate: 2017-04-09\nJava: Java version 1.8.0_121 by Oracle Corporation\nHeap: Using 41.5 MiB out of the allocated 154.5 MiB\nOS: Windows 10 (amd64) 10.0" };
    java.util.List<org.mafagafogigante.dungeon.entity.items.Item> list_item43 = org.mafagafogigante.dungeon.entity.creatures.HeroUtils.findItems((java.util.List<org.mafagafogigante.dungeon.entity.items.Item>)arraylist_item35, str_array42);
    java.lang.String[] str_array49 = new java.lang.String[] { "hi!", "visibilityCriteria=VisibilityCriteria{[]}", "visibilityCriteria=VisibilityCriteria{[]}", "Damaged", "hi!" };
    org.mafagafogigante.dungeon.util.Table table50 = new org.mafagafogigante.dungeon.util.Table(str_array49);
    java.util.List<org.mafagafogigante.dungeon.entity.items.Item> list_item51 = org.mafagafogigante.dungeon.entity.creatures.HeroUtils.findItems(list_item43, str_array49);
    org.mafagafogigante.dungeon.date.Date date57 = new org.mafagafogigante.dungeon.date.Date(10L, 100L, 100L);
    org.mafagafogigante.dungeon.date.Date date61 = new org.mafagafogigante.dungeon.date.Date(10L, 100L, 100L);
    int i62 = date57.compareTo(date61);
    org.mafagafogigante.dungeon.game.PartOfDay partOfDay63 = org.mafagafogigante.dungeon.game.PartOfDay.getCorrespondingConstant(date57);
    java.lang.String[] str_array69 = new java.lang.String[] { "hi!", "visibilityCriteria=VisibilityCriteria{[]}", "visibilityCriteria=VisibilityCriteria{[]}", "Damaged", "hi!" };
    org.mafagafogigante.dungeon.util.Table table70 = new org.mafagafogigante.dungeon.util.Table(str_array69);
    java.util.List<org.mafagafogigante.dungeon.game.ColoredString> list_coloredString71 = table70.toColoredStringList();
    org.mafagafogigante.dungeon.game.ColoredString coloredString72 = org.mafagafogigante.dungeon.game.Random.select(list_coloredString71);
    boolean b73 = date57.equals((java.lang.Object)coloredString72);
    java.awt.Color color74 = coloredString72.getColor();
    org.mafagafogigante.dungeon.game.LocationDescription locationDescription75 = new org.mafagafogigante.dungeon.game.LocationDescription('a', color74);
    org.mafagafogigante.dungeon.game.DungeonString dungeonString76 = new org.mafagafogigante.dungeon.game.DungeonString("Evening", color74);
    observer6.writeItemSight(list_item51, dungeonString76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(visibilityCriterion_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(visibilityCriterion_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(item_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(item_array20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_item29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(item_array34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_item43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_item51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i62 == 0);
    org.junit.Assert.assertTrue("'" + partOfDay63 + "' != '" + org.mafagafogigante.dungeon.game.PartOfDay.MIDNIGHT + "'", partOfDay63.equals(org.mafagafogigante.dungeon.game.PartOfDay.MIDNIGHT));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_coloredString71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(coloredString72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b73 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color74);

  }

  @Test
  public void test341() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test341"); }

    org.mafagafogigante.dungeon.world.VisibilityCriterion[] visibilityCriterion_array0 = new org.mafagafogigante.dungeon.world.VisibilityCriterion[] {  };
    org.mafagafogigante.dungeon.world.VisibilityCriteria visibilityCriteria1 = new org.mafagafogigante.dungeon.world.VisibilityCriteria(visibilityCriterion_array0);
    org.mafagafogigante.dungeon.entity.creatures.Creature creature2 = null;
    org.mafagafogigante.dungeon.entity.creatures.Observer observer3 = new org.mafagafogigante.dungeon.entity.creatures.Observer(creature2);
    boolean b4 = visibilityCriteria1.isMetBy(observer3);
    java.lang.String str5 = visibilityCriteria1.toString();
    org.mafagafogigante.dungeon.world.VisibilityCriterion[] visibilityCriterion_array6 = new org.mafagafogigante.dungeon.world.VisibilityCriterion[] {  };
    org.mafagafogigante.dungeon.world.VisibilityCriteria visibilityCriteria7 = new org.mafagafogigante.dungeon.world.VisibilityCriteria(visibilityCriterion_array6);
    org.mafagafogigante.dungeon.entity.creatures.Creature creature8 = null;
    org.mafagafogigante.dungeon.entity.creatures.Observer observer9 = new org.mafagafogigante.dungeon.entity.creatures.Observer(creature8);
    boolean b10 = visibilityCriteria7.isMetBy(observer9);
    org.mafagafogigante.dungeon.entity.items.Item[] item_array11 = new org.mafagafogigante.dungeon.entity.items.Item[] {  };
    java.util.ArrayList<org.mafagafogigante.dungeon.entity.items.Item> arraylist_item12 = new java.util.ArrayList<org.mafagafogigante.dungeon.entity.items.Item>();
    boolean b13 = java.util.Collections.addAll((java.util.Collection<org.mafagafogigante.dungeon.entity.items.Item>)arraylist_item12, item_array11);
    org.mafagafogigante.dungeon.game.DungeonString dungeonString15 = new org.mafagafogigante.dungeon.game.DungeonString("hi!");
    observer9.writeItemSight((java.util.List<org.mafagafogigante.dungeon.entity.items.Item>)arraylist_item12, dungeonString15);
    org.mafagafogigante.dungeon.world.VisibilityCriterion[] visibilityCriterion_array17 = new org.mafagafogigante.dungeon.world.VisibilityCriterion[] {  };
    org.mafagafogigante.dungeon.world.VisibilityCriteria visibilityCriteria18 = new org.mafagafogigante.dungeon.world.VisibilityCriteria(visibilityCriterion_array17);
    org.mafagafogigante.dungeon.entity.creatures.Creature creature19 = null;
    org.mafagafogigante.dungeon.entity.creatures.Observer observer20 = new org.mafagafogigante.dungeon.entity.creatures.Observer(creature19);
    boolean b21 = visibilityCriteria18.isMetBy(observer20);
    org.mafagafogigante.dungeon.entity.items.Item[] item_array22 = new org.mafagafogigante.dungeon.entity.items.Item[] {  };
    java.util.ArrayList<org.mafagafogigante.dungeon.entity.items.Item> arraylist_item23 = new java.util.ArrayList<org.mafagafogigante.dungeon.entity.items.Item>();
    boolean b24 = java.util.Collections.addAll((java.util.Collection<org.mafagafogigante.dungeon.entity.items.Item>)arraylist_item23, item_array22);
    org.mafagafogigante.dungeon.game.DungeonString dungeonString26 = new org.mafagafogigante.dungeon.game.DungeonString("hi!");
    observer20.writeItemSight((java.util.List<org.mafagafogigante.dungeon.entity.items.Item>)arraylist_item23, dungeonString26);
    org.mafagafogigante.dungeon.game.DungeonString dungeonString29 = new org.mafagafogigante.dungeon.game.DungeonString("");
    java.util.List<org.mafagafogigante.dungeon.game.ColoredString> list_coloredString30 = dungeonString29.toColoredStringList();
    observer9.writeItemSight((java.util.List<org.mafagafogigante.dungeon.entity.items.Item>)arraylist_item23, dungeonString29);
    org.mafagafogigante.dungeon.entity.creatures.Creature creature32 = null;
    org.mafagafogigante.dungeon.entity.items.CreatureInventory creatureInventory35 = new org.mafagafogigante.dungeon.entity.items.CreatureInventory(creature32, 0, (double)35);
    java.util.List<org.mafagafogigante.dungeon.entity.items.Item> list_item36 = creatureInventory35.getItems();
    org.mafagafogigante.dungeon.game.DungeonString dungeonString38 = new org.mafagafogigante.dungeon.game.DungeonString("hi!");
    java.lang.String[] str_array43 = new java.lang.String[] { "hi!", "Damaged", "BattleStatistics{records=CounterMap{map={}}}", "" };
    dungeonString38.append(str_array43);
    java.lang.String[] str_array50 = new java.lang.String[] { "hi!", "visibilityCriteria=VisibilityCriteria{[]}", "visibilityCriteria=VisibilityCriteria{[]}", "Damaged", "hi!" };
    org.mafagafogigante.dungeon.util.Table table51 = new org.mafagafogigante.dungeon.util.Table(str_array50);
    dungeonString38.append(str_array50);
    org.mafagafogigante.dungeon.gui.WritingSpecifications writingSpecifications55 = new org.mafagafogigante.dungeon.gui.WritingSpecifications(false, 32);
    boolean b56 = writingSpecifications55.shouldWait();
    int i57 = writingSpecifications55.getWait();
    org.mafagafogigante.dungeon.io.Writer.write((org.mafagafogigante.dungeon.game.Writable)dungeonString38, writingSpecifications55);
    observer9.writeItemSight(list_item36, dungeonString38);
    org.mafagafogigante.dungeon.entity.creatures.Creature[] creature_array60 = new org.mafagafogigante.dungeon.entity.creatures.Creature[] {  };
    java.util.ArrayList<org.mafagafogigante.dungeon.entity.creatures.Creature> arraylist_creature61 = new java.util.ArrayList<org.mafagafogigante.dungeon.entity.creatures.Creature>();
    boolean b62 = java.util.Collections.addAll((java.util.Collection<org.mafagafogigante.dungeon.entity.creatures.Creature>)arraylist_creature61, creature_array60);
    org.mafagafogigante.dungeon.game.DungeonString dungeonString64 = new org.mafagafogigante.dungeon.game.DungeonString("hi!");
    java.lang.String[] str_array69 = new java.lang.String[] { "hi!", "Damaged", "BattleStatistics{records=CounterMap{map={}}}", "" };
    dungeonString64.append(str_array69);
    org.mafagafogigante.dungeon.gui.WritingSpecifications writingSpecifications71 = null;
    org.mafagafogigante.dungeon.io.Writer.write((org.mafagafogigante.dungeon.game.Writable)dungeonString64, writingSpecifications71);
    observer9.writeCreatureSight((java.util.List<org.mafagafogigante.dungeon.entity.creatures.Creature>)arraylist_creature61, dungeonString64);
    boolean b74 = visibilityCriteria1.isMetBy(observer9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(visibilityCriterion_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "visibilityCriteria=VisibilityCriteria{[]}"+ "'", str5.equals("visibilityCriteria=VisibilityCriteria{[]}"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(visibilityCriterion_array6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(item_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(visibilityCriterion_array17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(item_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_coloredString30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_item36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b56 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i57 == 32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(creature_array60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b74 == true);

  }

  @Test
  public void test342() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test342"); }

    java.lang.String str1 = org.mafagafogigante.dungeon.io.Converter.bytesToHuman((long)(short)100);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "100 B"+ "'", str1.equals("100 B"));

  }

  @Test
  public void test343() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test343"); }

    org.mafagafogigante.dungeon.entity.items.ItemPreset itemPreset1 = new org.mafagafogigante.dungeon.entity.items.ItemPreset();
    org.mafagafogigante.dungeon.entity.Integrity integrity2 = itemPreset1.getIntegrity();
    org.mafagafogigante.dungeon.entity.Integrity integrity3 = null;
    itemPreset1.setIntegrity(integrity3);
    org.mafagafogigante.dungeon.util.Percentage percentage5 = itemPreset1.getVisibility();
    java.lang.String str6 = itemPreset1.getType();
    itemPreset1.setIntegrityDecrementOnHit((int)(short)100);
    org.mafagafogigante.dungeon.util.Percentage percentage10 = new org.mafagafogigante.dungeon.util.Percentage((double)57);
    itemPreset1.setVisibility(percentage10);
    org.mafagafogigante.dungeon.game.Id id12 = null;
    itemPreset1.setId(id12);
    itemPreset1.setPutrefactionPeriod((long)(short)1);
    org.mafagafogigante.dungeon.entity.TagSet<org.mafagafogigante.dungeon.entity.items.Item.Tag> tagset_tag16 = itemPreset1.getTagSet();
    org.mafagafogigante.dungeon.entity.items.ItemPreset itemPreset20 = new org.mafagafogigante.dungeon.entity.items.ItemPreset();
    itemPreset20.setDrinkableHealing((int)(short)0);
    org.mafagafogigante.dungeon.util.Percentage percentage24 = new org.mafagafogigante.dungeon.util.Percentage((double)57);
    itemPreset20.setVisibility(percentage24);
    double d26 = org.mafagafogigante.dungeon.util.DungeonMath.weightedAverage((double)10.0f, 100.0d, percentage24);
    org.mafagafogigante.dungeon.entity.items.ItemPreset itemPreset27 = new org.mafagafogigante.dungeon.entity.items.ItemPreset();
    org.mafagafogigante.dungeon.entity.Integrity integrity28 = itemPreset27.getIntegrity();
    org.mafagafogigante.dungeon.entity.Integrity integrity29 = null;
    itemPreset27.setIntegrity(integrity29);
    org.mafagafogigante.dungeon.util.Percentage percentage31 = itemPreset27.getVisibility();
    java.lang.String str32 = itemPreset27.getType();
    org.mafagafogigante.dungeon.entity.items.Item.Tag tag33 = org.mafagafogigante.dungeon.entity.items.Item.Tag.REPAIRABLE;
    itemPreset27.addTag(tag33);
    org.mafagafogigante.dungeon.util.Percentage percentage36 = new org.mafagafogigante.dungeon.util.Percentage((double)'#');
    boolean b38 = percentage36.equals((java.lang.Object)10.0d);
    org.mafagafogigante.dungeon.entity.Luminosity luminosity39 = new org.mafagafogigante.dungeon.entity.Luminosity(percentage36);
    itemPreset27.setVisibility(percentage36);
    boolean b41 = percentage24.biggerThanOrEqualTo(percentage36);
    org.mafagafogigante.dungeon.entity.items.WeaponComponent weaponComponent43 = new org.mafagafogigante.dungeon.entity.items.WeaponComponent((int)(short)10, percentage36, 1);
    itemPreset1.setVisibility(percentage36);
    org.mafagafogigante.dungeon.entity.Luminosity luminosity45 = new org.mafagafogigante.dungeon.entity.Luminosity(percentage36);
    org.mafagafogigante.dungeon.entity.items.WeaponComponent weaponComponent47 = new org.mafagafogigante.dungeon.entity.items.WeaponComponent((int)'a', percentage36, (int)'a');
    org.mafagafogigante.dungeon.util.Percentage percentage48 = weaponComponent47.getHitRate();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(integrity2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(percentage5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(tagset_tag16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d26 == 100.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(integrity28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(percentage31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str32);
    org.junit.Assert.assertTrue("'" + tag33 + "' != '" + org.mafagafogigante.dungeon.entity.items.Item.Tag.REPAIRABLE + "'", tag33.equals(org.mafagafogigante.dungeon.entity.items.Item.Tag.REPAIRABLE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(percentage48);

  }

  @Test
  public void test344() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test344"); }

    org.mafagafogigante.dungeon.schema.JsonRule jsonRule1 = org.mafagafogigante.dungeon.schema.rules.JsonRuleFactory.makeStringLengthRule(0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonRule1);

  }

  @Test
  public void test345() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test345"); }

    org.mafagafogigante.dungeon.stats.Statistics statistics0 = new org.mafagafogigante.dungeon.stats.Statistics();
    org.mafagafogigante.dungeon.stats.BattleStatistics battleStatistics1 = statistics0.getBattleStatistics();
    org.mafagafogigante.dungeon.stats.WorldStatistics worldStatistics2 = statistics0.getWorldStatistics();
    org.mafagafogigante.dungeon.util.CounterMap<java.lang.String> countermap_str3 = worldStatistics2.getSpawnCounter();
    org.mafagafogigante.dungeon.util.CounterMap<java.lang.String> countermap_str4 = worldStatistics2.getLocationCounter();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(battleStatistics1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(worldStatistics2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(countermap_str3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(countermap_str4);

  }

  @Test
  public void test346() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test346"); }

    org.mafagafogigante.dungeon.game.Id id0 = null;
    org.mafagafogigante.dungeon.stats.CauseOfDeath causeOfDeath2 = org.mafagafogigante.dungeon.stats.CauseOfDeath.getUnarmedCauseOfDeath();
    org.mafagafogigante.dungeon.entity.creatures.HealthState healthState3 = org.mafagafogigante.dungeon.entity.creatures.HealthState.DEAD;
    boolean b4 = causeOfDeath2.equals((java.lang.Object)healthState3);
    java.lang.String[] str_array10 = new java.lang.String[] { "hi!", "visibilityCriteria=VisibilityCriteria{[]}", "visibilityCriteria=VisibilityCriteria{[]}", "Damaged", "hi!" };
    org.mafagafogigante.dungeon.util.Table table11 = new org.mafagafogigante.dungeon.util.Table(str_array10);
    java.util.List<org.mafagafogigante.dungeon.game.ColoredString> list_coloredString12 = table11.toColoredStringList();
    boolean b13 = causeOfDeath2.equals((java.lang.Object)table11);
    org.mafagafogigante.dungeon.game.PartOfDay partOfDay14 = org.mafagafogigante.dungeon.game.PartOfDay.NOON;
    org.mafagafogigante.dungeon.stats.BattleRecord battleRecord15 = new org.mafagafogigante.dungeon.stats.BattleRecord(id0, "East", causeOfDeath2, partOfDay14);
    java.lang.String str16 = battleRecord15.getType();
    org.mafagafogigante.dungeon.game.PartOfDay partOfDay17 = battleRecord15.getPartOfDay();
    java.lang.String str18 = battleRecord15.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(causeOfDeath2);
    org.junit.Assert.assertTrue("'" + healthState3 + "' != '" + org.mafagafogigante.dungeon.entity.creatures.HealthState.DEAD + "'", healthState3.equals(org.mafagafogigante.dungeon.entity.creatures.HealthState.DEAD));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_coloredString12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    org.junit.Assert.assertTrue("'" + partOfDay14 + "' != '" + org.mafagafogigante.dungeon.game.PartOfDay.NOON + "'", partOfDay14.equals(org.mafagafogigante.dungeon.game.PartOfDay.NOON));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "East"+ "'", str16.equals("East"));
    org.junit.Assert.assertTrue("'" + partOfDay17 + "' != '" + org.mafagafogigante.dungeon.game.PartOfDay.NOON + "'", partOfDay17.equals(org.mafagafogigante.dungeon.game.PartOfDay.NOON));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "BattleEntry{id=null, type='East', causeOfDeath=Unarmed : UNARMED, partOfDay=Noon}"+ "'", str18.equals("BattleEntry{id=null, type='East', causeOfDeath=Unarmed : UNARMED, partOfDay=Noon}"));

  }

  @Test
  public void test347() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test347"); }

    org.mafagafogigante.dungeon.commands.CommandHistory commandHistory0 = new org.mafagafogigante.dungeon.commands.CommandHistory();
    java.lang.String str2 = commandHistory0.getLastSimilarCommand("52 Nights");
    org.mafagafogigante.dungeon.commands.IssuedCommand issuedCommand4 = new org.mafagafogigante.dungeon.commands.IssuedCommand("the sky is cloudy");
    commandHistory0.addCommand(issuedCommand4);
    org.mafagafogigante.dungeon.commands.CommandHistory.Cursor cursor6 = commandHistory0.getCursor();
    org.mafagafogigante.dungeon.commands.CommandHistory.Cursor cursor7 = commandHistory0.getCursor();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(cursor6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(cursor7);

  }

  @Test
  public void test348() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test348"); }

    org.mafagafogigante.dungeon.entity.items.ItemPreset itemPreset0 = new org.mafagafogigante.dungeon.entity.items.ItemPreset();
    org.mafagafogigante.dungeon.entity.Integrity integrity1 = itemPreset0.getIntegrity();
    org.mafagafogigante.dungeon.entity.Integrity integrity2 = null;
    itemPreset0.setIntegrity(integrity2);
    org.mafagafogigante.dungeon.entity.Integrity integrity4 = itemPreset0.getIntegrity();
    itemPreset0.setDamage(0);
    itemPreset0.setDrinkableDoses(35);
    java.lang.String str9 = itemPreset0.getType();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(integrity1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(integrity4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str9);

  }

  @Test
  public void test349() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test349"); }

    org.mafagafogigante.dungeon.commands.IssuedCommand issuedCommand1 = new org.mafagafogigante.dungeon.commands.IssuedCommand("ItemIntegrity{integrity=0/1, item=null}");
    java.lang.String str2 = issuedCommand1.getStringRepresentation();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "ItemIntegrity{integrity=0/1, item=null}"+ "'", str2.equals("ItemIntegrity{integrity=0/1, item=null}"));

  }

  @Test
  public void test350() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test350"); }

    int i1 = org.mafagafogigante.dungeon.game.Random.nextInteger(46719);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 44105);

  }

  @Test
  public void test351() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test351"); }

    org.mafagafogigante.dungeon.commands.IssuedCommand issuedCommand1 = new org.mafagafogigante.dungeon.commands.IssuedCommand("BattleStatistics{records=CounterMap{map={}}}");
    java.lang.String str2 = issuedCommand1.toString();
    org.mafagafogigante.dungeon.commands.PreparedIssuedCommand preparedIssuedCommand3 = org.mafagafogigante.dungeon.commands.IssuedCommandProcessor.prepareIssuedCommand(issuedCommand1);
    org.mafagafogigante.dungeon.commands.IssuedCommandEvaluation issuedCommandEvaluation4 = org.mafagafogigante.dungeon.commands.IssuedCommandProcessor.evaluateIssuedCommand(issuedCommand1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "BattleStatistics{records=CounterMap{map={}}}"+ "'", str2.equals("BattleStatistics{records=CounterMap{map={}}}"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(preparedIssuedCommand3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(issuedCommandEvaluation4);

  }

  @Test
  public void test352() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test352"); }

    org.mafagafogigante.dungeon.entity.items.ItemPreset itemPreset0 = new org.mafagafogigante.dungeon.entity.items.ItemPreset();
    org.mafagafogigante.dungeon.entity.Integrity integrity1 = itemPreset0.getIntegrity();
    itemPreset0.setIntegrityDecrementOnEat((-1));
    itemPreset0.setPutrefactionPeriod((-1L));
    itemPreset0.setDrinkableDoses((int)(short)10);
    java.lang.String str8 = itemPreset0.getText();
    org.mafagafogigante.dungeon.util.Percentage percentage10 = new org.mafagafogigante.dungeon.util.Percentage((double)'#');
    boolean b12 = percentage10.equals((java.lang.Object)10.0d);
    org.mafagafogigante.dungeon.entity.Luminosity luminosity13 = new org.mafagafogigante.dungeon.entity.Luminosity(percentage10);
    org.mafagafogigante.dungeon.util.Percentage percentage14 = luminosity13.toPercentage();
    itemPreset0.setLuminosity(luminosity13);
    // The following exception was thrown during execution in test generation
    try {
    itemPreset0.setSpellId("User: Nicholas\nTime: 15:42:12\nDate: 2017-04-09\nJava: Java version 1.8.0_121 by Oracle Corporation\nHeap: Using 41.5 MiB out of the allocated 154.5 MiB\nOS: Windows 10 (amd64) 10.0");
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(integrity1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(percentage14);

  }

  @Test
  public void test353() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test353"); }

    org.mafagafogigante.dungeon.entity.items.ItemPreset itemPreset0 = new org.mafagafogigante.dungeon.entity.items.ItemPreset();
    org.mafagafogigante.dungeon.entity.Integrity integrity1 = itemPreset0.getIntegrity();
    org.mafagafogigante.dungeon.entity.Integrity integrity2 = null;
    itemPreset0.setIntegrity(integrity2);
    org.mafagafogigante.dungeon.util.Percentage percentage4 = itemPreset0.getVisibility();
    java.lang.String str5 = itemPreset0.getType();
    itemPreset0.setIntegrityDecrementOnHit((int)(short)100);
    org.mafagafogigante.dungeon.entity.TagSet<org.mafagafogigante.dungeon.entity.items.Item.Tag> tagset_tag8 = itemPreset0.getTagSet();
    org.mafagafogigante.dungeon.game.Id id9 = null;
    itemPreset0.setId(id9);
    itemPreset0.setIntegrityDecrementOnEat((int)(short)0);
    org.mafagafogigante.dungeon.entity.TagSet<org.mafagafogigante.dungeon.entity.items.Item.Tag> tagset_tag13 = itemPreset0.getTagSet();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(integrity1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(percentage4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(tagset_tag8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(tagset_tag13);

  }

  @Test
  public void test354() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test354"); }

    org.mafagafogigante.dungeon.stats.CauseOfDeath causeOfDeath0 = org.mafagafogigante.dungeon.stats.CauseOfDeath.getUnarmedCauseOfDeath();
    org.mafagafogigante.dungeon.achievements.BattleStatisticsQuery battleStatisticsQuery1 = new org.mafagafogigante.dungeon.achievements.BattleStatisticsQuery();
    battleStatisticsQuery1.setType("Damaged");
    battleStatisticsQuery1.setType("");
    boolean b6 = causeOfDeath0.equals((java.lang.Object)battleStatisticsQuery1);
    java.lang.String str7 = causeOfDeath0.toString();
    org.mafagafogigante.dungeon.entity.creatures.Creature creature9 = null;
    org.mafagafogigante.dungeon.entity.creatures.CreatureHealth creatureHealth10 = org.mafagafogigante.dungeon.entity.creatures.CreatureHealth.makeCreatureHealth(100, creature9);
    boolean b11 = creatureHealth10.isAlive();
    java.lang.String str12 = creatureHealth10.toString();
    creatureHealth10.decrementBy((int)(byte)10);
    org.mafagafogigante.dungeon.entity.creatures.HealthState healthState15 = creatureHealth10.getHealthState();
    java.lang.String str16 = healthState15.toString();
    boolean b17 = causeOfDeath0.equals((java.lang.Object)str16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(causeOfDeath0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "Unarmed : UNARMED"+ "'", str7.equals("Unarmed : UNARMED"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(creatureHealth10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "CreatureHealth{integrity=100/100}"+ "'", str12.equals("CreatureHealth{integrity=100/100}"));
    org.junit.Assert.assertTrue("'" + healthState15 + "' != '" + org.mafagafogigante.dungeon.entity.creatures.HealthState.UNINJURED + "'", healthState15.equals(org.mafagafogigante.dungeon.entity.creatures.HealthState.UNINJURED));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "Uninjured"+ "'", str16.equals("Uninjured"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);

  }

  @Test
  public void test355() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test355"); }

    boolean b1 = org.mafagafogigante.dungeon.commands.IssuedCommand.isValidSource("00:00:00 : the sky is cloudy");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == true);

  }

  @Test
  public void test356() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test356"); }

    org.mafagafogigante.dungeon.entity.items.ItemPreset itemPreset0 = new org.mafagafogigante.dungeon.entity.items.ItemPreset();
    org.mafagafogigante.dungeon.entity.Integrity integrity1 = itemPreset0.getIntegrity();
    org.mafagafogigante.dungeon.entity.Integrity integrity2 = null;
    itemPreset0.setIntegrity(integrity2);
    org.mafagafogigante.dungeon.util.Percentage percentage4 = itemPreset0.getVisibility();
    java.lang.String str5 = itemPreset0.getType();
    itemPreset0.setIntegrityDecrementOnHit((int)(short)100);
    org.mafagafogigante.dungeon.entity.TagSet<org.mafagafogigante.dungeon.entity.items.Item.Tag> tagset_tag8 = itemPreset0.getTagSet();
    org.mafagafogigante.dungeon.entity.Weight weight10 = org.mafagafogigante.dungeon.entity.Weight.newInstance((double)(byte)-1);
    itemPreset0.setWeight(weight10);
    org.mafagafogigante.dungeon.entity.items.ItemPreset itemPreset12 = new org.mafagafogigante.dungeon.entity.items.ItemPreset();
    org.mafagafogigante.dungeon.entity.Integrity integrity13 = itemPreset12.getIntegrity();
    org.mafagafogigante.dungeon.entity.Integrity integrity14 = null;
    itemPreset12.setIntegrity(integrity14);
    org.mafagafogigante.dungeon.util.Percentage percentage17 = new org.mafagafogigante.dungeon.util.Percentage((double)'#');
    itemPreset12.setHitRate(percentage17);
    itemPreset0.setHitRate(percentage17);
    double d20 = percentage17.toDouble();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(integrity1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(percentage4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(tagset_tag8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(weight10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(integrity13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d20 == 1.0d);

  }

  @Test
  public void test357() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test357"); }

    org.mafagafogigante.dungeon.entity.Integrity integrity2 = new org.mafagafogigante.dungeon.entity.Integrity(1, 0);
    boolean b3 = integrity2.isMaximum();
    org.mafagafogigante.dungeon.entity.items.Item item4 = null;
    org.mafagafogigante.dungeon.entity.items.ItemIntegrity itemIntegrity5 = org.mafagafogigante.dungeon.entity.items.ItemIntegrity.makeItemIntegrity(integrity2, item4);
    org.mafagafogigante.dungeon.util.Percentage percentage6 = itemIntegrity5.toPercentage();
    boolean b7 = itemIntegrity5.isPerfect();
    boolean b8 = itemIntegrity5.isPerfect();
    org.mafagafogigante.dungeon.util.Percentage percentage9 = itemIntegrity5.toPercentage();
    itemIntegrity5.incrementBy(57);
    int i12 = itemIntegrity5.getMaximum();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(itemIntegrity5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(percentage6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(percentage9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 1);

  }

  @Test
  public void test358() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test358"); }

    org.mafagafogigante.dungeon.entity.creatures.Creature creature1 = null;
    org.mafagafogigante.dungeon.entity.creatures.CreatureHealth creatureHealth2 = org.mafagafogigante.dungeon.entity.creatures.CreatureHealth.makeCreatureHealth(100, creature1);
    creatureHealth2.incrementBy(57);
    creatureHealth2.incrementBy(32);
    java.lang.String str7 = creatureHealth2.toString();
    boolean b8 = creatureHealth2.isFull();
    java.lang.String str9 = creatureHealth2.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(creatureHealth2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "CreatureHealth{integrity=100/100}"+ "'", str7.equals("CreatureHealth{integrity=100/100}"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "CreatureHealth{integrity=100/100}"+ "'", str9.equals("CreatureHealth{integrity=100/100}"));

  }

  @Test
  public void test359() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test359"); }

    org.mafagafogigante.dungeon.commands.CommandHistory commandHistory0 = new org.mafagafogigante.dungeon.commands.CommandHistory();
    java.lang.String str2 = commandHistory0.getLastSimilarCommand("East");
    org.mafagafogigante.dungeon.commands.CommandHistory.Cursor cursor3 = commandHistory0.getCursor();
    java.lang.String str4 = cursor3.getSelectedCommand();
    org.mafagafogigante.dungeon.commands.CommandHistory.Cursor cursor5 = cursor3.moveDown();
    java.lang.String str6 = cursor3.getSelectedCommand();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(cursor3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(cursor5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str6);

  }

  @Test
  public void test360() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test360"); }

    org.mafagafogigante.dungeon.stats.Statistics statistics0 = new org.mafagafogigante.dungeon.stats.Statistics();
    statistics0.writeStatistics();
    statistics0.writeStatistics();
    statistics0.writeStatistics();
    org.mafagafogigante.dungeon.commands.IssuedCommand issuedCommand5 = new org.mafagafogigante.dungeon.commands.IssuedCommand("BattleStatistics{records=CounterMap{map={}}}");
    org.mafagafogigante.dungeon.commands.PreparedIssuedCommand preparedIssuedCommand6 = org.mafagafogigante.dungeon.commands.IssuedCommandProcessor.prepareIssuedCommand(issuedCommand5);
    statistics0.addCommand(issuedCommand5);
    statistics0.writeStatistics();
    org.mafagafogigante.dungeon.stats.BattleStatistics battleStatistics9 = statistics0.getBattleStatistics();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(preparedIssuedCommand6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(battleStatistics9);

  }

  @Test
  public void test361() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test361"); }

    org.mafagafogigante.dungeon.entity.creatures.Creature creature1 = null;
    org.mafagafogigante.dungeon.entity.creatures.CreatureHealth creatureHealth2 = org.mafagafogigante.dungeon.entity.creatures.CreatureHealth.makeCreatureHealth(100, creature1);
    creatureHealth2.incrementBy(57);
    creatureHealth2.incrementBy(32);
    boolean b7 = creatureHealth2.isFull();
    creatureHealth2.decrementBy(2);
    boolean b10 = creatureHealth2.isFull();
    org.mafagafogigante.dungeon.util.Percentage percentage11 = creatureHealth2.toPercentage();
    boolean b12 = creatureHealth2.isAlive();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(creatureHealth2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(percentage11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);

  }

  @Test
  public void test362() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test362"); }

    org.mafagafogigante.dungeon.entity.creatures.Creature creature2 = null;
    org.mafagafogigante.dungeon.entity.creatures.CreatureHealth creatureHealth3 = org.mafagafogigante.dungeon.entity.creatures.CreatureHealth.makeCreatureHealth(100, creature2);
    int i4 = creatureHealth3.getMaximum();
    org.mafagafogigante.dungeon.util.Percentage percentage5 = creatureHealth3.toPercentage();
    org.mafagafogigante.dungeon.entity.items.WeaponComponent weaponComponent7 = new org.mafagafogigante.dungeon.entity.items.WeaponComponent((-1), percentage5, (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(creatureHealth3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(percentage5);

  }

  @Test
  public void test363() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test363"); }

    org.mafagafogigante.dungeon.stats.CauseOfDeath causeOfDeath0 = org.mafagafogigante.dungeon.stats.CauseOfDeath.getUnarmedCauseOfDeath();
    java.lang.String str1 = causeOfDeath0.toString();
    org.mafagafogigante.dungeon.date.Date date5 = new org.mafagafogigante.dungeon.date.Date(10L, 100L, 100L);
    org.mafagafogigante.dungeon.date.Date date9 = new org.mafagafogigante.dungeon.date.Date(10L, 100L, 100L);
    int i10 = date5.compareTo(date9);
    org.mafagafogigante.dungeon.game.PartOfDay partOfDay11 = org.mafagafogigante.dungeon.game.PartOfDay.getCorrespondingConstant(date5);
    java.lang.String[] str_array17 = new java.lang.String[] { "hi!", "visibilityCriteria=VisibilityCriteria{[]}", "visibilityCriteria=VisibilityCriteria{[]}", "Damaged", "hi!" };
    org.mafagafogigante.dungeon.util.Table table18 = new org.mafagafogigante.dungeon.util.Table(str_array17);
    java.util.List<org.mafagafogigante.dungeon.game.ColoredString> list_coloredString19 = table18.toColoredStringList();
    org.mafagafogigante.dungeon.game.ColoredString coloredString20 = org.mafagafogigante.dungeon.game.Random.select(list_coloredString19);
    boolean b21 = date5.equals((java.lang.Object)coloredString20);
    org.mafagafogigante.dungeon.date.Date date25 = new org.mafagafogigante.dungeon.date.Date(10L, 100L, 100L);
    org.mafagafogigante.dungeon.date.Date date29 = new org.mafagafogigante.dungeon.date.Date(10L, 100L, 100L);
    int i30 = date25.compareTo(date29);
    org.mafagafogigante.dungeon.game.PartOfDay partOfDay31 = org.mafagafogigante.dungeon.game.PartOfDay.getCorrespondingConstant(date25);
    long long32 = date25.getYear();
    org.mafagafogigante.dungeon.date.Date date36 = new org.mafagafogigante.dungeon.date.Date(10L, 100L, 100L);
    org.mafagafogigante.dungeon.date.Date date40 = new org.mafagafogigante.dungeon.date.Date(10L, 100L, 100L);
    int i41 = date36.compareTo(date40);
    long long42 = date36.getYear();
    int i43 = date25.compareTo(date36);
    org.mafagafogigante.dungeon.date.Duration duration44 = new org.mafagafogigante.dungeon.date.Duration(date5, date36);
    org.mafagafogigante.dungeon.date.Date date49 = new org.mafagafogigante.dungeon.date.Date(10L, 100L, 100L);
    org.mafagafogigante.dungeon.date.Date date53 = new org.mafagafogigante.dungeon.date.Date(10L, 100L, 100L);
    int i54 = date49.compareTo(date53);
    org.mafagafogigante.dungeon.game.PartOfDay partOfDay55 = org.mafagafogigante.dungeon.game.PartOfDay.getCorrespondingConstant(date49);
    long long56 = date49.getYear();
    org.mafagafogigante.dungeon.date.Date date60 = new org.mafagafogigante.dungeon.date.Date(10L, 100L, 100L);
    org.mafagafogigante.dungeon.date.Date date64 = new org.mafagafogigante.dungeon.date.Date(10L, 100L, 100L);
    int i65 = date60.compareTo(date64);
    long long66 = date60.getYear();
    int i67 = date49.compareTo(date60);
    org.mafagafogigante.dungeon.date.DungeonTimeUnit dungeonTimeUnit69 = org.mafagafogigante.dungeon.date.DungeonTimeUnit.HOUR;
    org.mafagafogigante.dungeon.date.Date date70 = date60.minus(35, dungeonTimeUnit69);
    org.mafagafogigante.dungeon.date.Date date71 = date36.plus(3, dungeonTimeUnit69);
    long long72 = date36.getHour();
    boolean b73 = causeOfDeath0.equals((java.lang.Object)date36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(causeOfDeath0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Unarmed : UNARMED"+ "'", str1.equals("Unarmed : UNARMED"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 0);
    org.junit.Assert.assertTrue("'" + partOfDay11 + "' != '" + org.mafagafogigante.dungeon.game.PartOfDay.MIDNIGHT + "'", partOfDay11.equals(org.mafagafogigante.dungeon.game.PartOfDay.MIDNIGHT));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_coloredString19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(coloredString20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i30 == 0);
    org.junit.Assert.assertTrue("'" + partOfDay31 + "' != '" + org.mafagafogigante.dungeon.game.PartOfDay.MIDNIGHT + "'", partOfDay31.equals(org.mafagafogigante.dungeon.game.PartOfDay.MIDNIGHT));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long32 == 10L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i41 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long42 == 10L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i43 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i54 == 0);
    org.junit.Assert.assertTrue("'" + partOfDay55 + "' != '" + org.mafagafogigante.dungeon.game.PartOfDay.MIDNIGHT + "'", partOfDay55.equals(org.mafagafogigante.dungeon.game.PartOfDay.MIDNIGHT));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long56 == 10L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i65 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long66 == 10L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i67 == 0);
    org.junit.Assert.assertTrue("'" + dungeonTimeUnit69 + "' != '" + org.mafagafogigante.dungeon.date.DungeonTimeUnit.HOUR + "'", dungeonTimeUnit69.equals(org.mafagafogigante.dungeon.date.DungeonTimeUnit.HOUR));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(date70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(date71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long72 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b73 == false);

  }

  @Test
  public void test364() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test364"); }

    org.mafagafogigante.dungeon.world.VisibilityCriterion[] visibilityCriterion_array0 = new org.mafagafogigante.dungeon.world.VisibilityCriterion[] {  };
    org.mafagafogigante.dungeon.world.VisibilityCriteria visibilityCriteria1 = new org.mafagafogigante.dungeon.world.VisibilityCriteria(visibilityCriterion_array0);
    org.mafagafogigante.dungeon.entity.creatures.Creature creature2 = null;
    org.mafagafogigante.dungeon.entity.creatures.Observer observer3 = new org.mafagafogigante.dungeon.entity.creatures.Observer(creature2);
    boolean b4 = visibilityCriteria1.isMetBy(observer3);
    org.mafagafogigante.dungeon.world.VisibilityCriterion[] visibilityCriterion_array5 = new org.mafagafogigante.dungeon.world.VisibilityCriterion[] {  };
    org.mafagafogigante.dungeon.world.VisibilityCriteria visibilityCriteria6 = new org.mafagafogigante.dungeon.world.VisibilityCriteria(visibilityCriterion_array5);
    org.mafagafogigante.dungeon.entity.creatures.Creature creature7 = null;
    org.mafagafogigante.dungeon.entity.creatures.Observer observer8 = new org.mafagafogigante.dungeon.entity.creatures.Observer(creature7);
    boolean b9 = visibilityCriteria6.isMetBy(observer8);
    org.mafagafogigante.dungeon.entity.items.Item[] item_array10 = new org.mafagafogigante.dungeon.entity.items.Item[] {  };
    java.util.ArrayList<org.mafagafogigante.dungeon.entity.items.Item> arraylist_item11 = new java.util.ArrayList<org.mafagafogigante.dungeon.entity.items.Item>();
    boolean b12 = java.util.Collections.addAll((java.util.Collection<org.mafagafogigante.dungeon.entity.items.Item>)arraylist_item11, item_array10);
    org.mafagafogigante.dungeon.game.DungeonString dungeonString14 = new org.mafagafogigante.dungeon.game.DungeonString("hi!");
    java.lang.String[] str_array19 = new java.lang.String[] { "hi!", "Damaged", "BattleStatistics{records=CounterMap{map={}}}", "" };
    dungeonString14.append(str_array19);
    observer8.writeItemSight((java.util.List<org.mafagafogigante.dungeon.entity.items.Item>)arraylist_item11, dungeonString14);
    org.mafagafogigante.dungeon.entity.creatures.Creature[] creature_array22 = new org.mafagafogigante.dungeon.entity.creatures.Creature[] {  };
    java.util.ArrayList<org.mafagafogigante.dungeon.entity.creatures.Creature> arraylist_creature23 = new java.util.ArrayList<org.mafagafogigante.dungeon.entity.creatures.Creature>();
    boolean b24 = java.util.Collections.addAll((java.util.Collection<org.mafagafogigante.dungeon.entity.creatures.Creature>)arraylist_creature23, creature_array22);
    org.mafagafogigante.dungeon.game.DungeonString dungeonString26 = new org.mafagafogigante.dungeon.game.DungeonString("hi!");
    java.lang.String[] str_array31 = new java.lang.String[] { "hi!", "Damaged", "BattleStatistics{records=CounterMap{map={}}}", "" };
    dungeonString26.append(str_array31);
    java.lang.String str33 = dungeonString26.toString();
    org.mafagafogigante.dungeon.game.Point point37 = new org.mafagafogigante.dungeon.game.Point(10, (int)'a', 0);
    java.lang.String[] str_array40 = new java.lang.String[] { "", "" };
    org.mafagafogigante.dungeon.util.Table table41 = new org.mafagafogigante.dungeon.util.Table(str_array40);
    boolean b42 = point37.equals((java.lang.Object)str_array40);
    dungeonString26.append(str_array40);
    observer8.writeCreatureSight((java.util.List<org.mafagafogigante.dungeon.entity.creatures.Creature>)arraylist_creature23, dungeonString26);
    org.mafagafogigante.dungeon.game.DungeonString dungeonString46 = new org.mafagafogigante.dungeon.game.DungeonString("");
    java.util.List<org.mafagafogigante.dungeon.game.ColoredString> list_coloredString47 = dungeonString46.toColoredStringList();
    observer3.writeCreatureSight((java.util.List<org.mafagafogigante.dungeon.entity.creatures.Creature>)arraylist_creature23, dungeonString46);
    org.mafagafogigante.dungeon.gui.WritingSpecifications writingSpecifications51 = new org.mafagafogigante.dungeon.gui.WritingSpecifications(false, 46800);
    org.mafagafogigante.dungeon.io.Writer.write((org.mafagafogigante.dungeon.game.Writable)dungeonString46, writingSpecifications51);
    java.lang.String str53 = dungeonString46.toString();
    java.util.List<org.mafagafogigante.dungeon.game.ColoredString> list_coloredString54 = dungeonString46.toColoredStringList();
    org.mafagafogigante.dungeon.entity.creatures.Hero hero55 = null;
    org.mafagafogigante.dungeon.entity.creatures.HeroSpellcaster heroSpellcaster56 = new org.mafagafogigante.dungeon.entity.creatures.HeroSpellcaster(hero55);
    java.util.List<org.mafagafogigante.dungeon.spells.Spell> list_spell57 = heroSpellcaster56.getSpellList();
    java.lang.String[] str_array58 = new java.lang.String[] {  };
    heroSpellcaster56.parseCast(str_array58);
    org.mafagafogigante.dungeon.spells.Spell spell60 = null;
    boolean b61 = heroSpellcaster56.knowsSpell(spell60);
    org.mafagafogigante.dungeon.entity.creatures.Hero hero62 = null;
    org.mafagafogigante.dungeon.entity.creatures.HeroSpellcaster heroSpellcaster63 = new org.mafagafogigante.dungeon.entity.creatures.HeroSpellcaster(hero62);
    java.util.List<org.mafagafogigante.dungeon.spells.Spell> list_spell64 = heroSpellcaster63.getSpellList();
    java.lang.String[] str_array70 = new java.lang.String[] { "hi!", "visibilityCriteria=VisibilityCriteria{[]}", "visibilityCriteria=VisibilityCriteria{[]}", "Damaged", "hi!" };
    org.mafagafogigante.dungeon.util.Table table71 = new org.mafagafogigante.dungeon.util.Table(str_array70);
    heroSpellcaster63.parseCast(str_array70);
    heroSpellcaster56.parseCast(str_array70);
    dungeonString46.append(str_array70);
    // The following exception was thrown during execution in test generation
    try {
    org.mafagafogigante.dungeon.io.PoemWriter.parsePoemCommand(str_array70);
      org.junit.Assert.fail("Expected exception of type java.lang.NoClassDefFoundError");
    } catch (java.lang.NoClassDefFoundError e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(visibilityCriterion_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(visibilityCriterion_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(item_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(creature_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str33 + "' != '" + "DungeonString{coloredStringList=[ColoredString{string='hi!hi!DamagedBattleStatistics{records=CounterMap{map={}}}', color=java.awt.Color[r=192,g=192,b=192]}], currentColor=java.awt.Color[r=192,g=192,b=192]}"+ "'", str33.equals("DungeonString{coloredStringList=[ColoredString{string='hi!hi!DamagedBattleStatistics{records=CounterMap{map={}}}', color=java.awt.Color[r=192,g=192,b=192]}], currentColor=java.awt.Color[r=192,g=192,b=192]}"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_coloredString47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str53 + "' != '" + "DungeonString{coloredStringList=[ColoredString{string='\nYou don't see anyone here.\n', color=java.awt.Color[r=192,g=192,b=192]}], currentColor=java.awt.Color[r=192,g=192,b=192]}"+ "'", str53.equals("DungeonString{coloredStringList=[ColoredString{string='\nYou don't see anyone here.\n', color=java.awt.Color[r=192,g=192,b=192]}], currentColor=java.awt.Color[r=192,g=192,b=192]}"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_coloredString54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_spell57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_spell64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array70);

  }

  @Test
  public void test365() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test365"); }

    org.mafagafogigante.dungeon.entity.items.LocationInventory locationInventory0 = new org.mafagafogigante.dungeon.entity.items.LocationInventory();
    org.mafagafogigante.dungeon.entity.items.Item item1 = null;
    boolean b2 = locationInventory0.hasItem(item1);
    locationInventory0.refreshItems();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);

  }

  @Test
  public void test366() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test366"); }

    org.mafagafogigante.dungeon.stats.BattleStatistics battleStatistics0 = new org.mafagafogigante.dungeon.stats.BattleStatistics();
    org.mafagafogigante.dungeon.achievements.BattleStatisticsRequirement battleStatisticsRequirement1 = null;
    boolean b2 = battleStatistics0.satisfies(battleStatisticsRequirement1);
    java.lang.String str3 = battleStatistics0.toString();
    org.mafagafogigante.dungeon.achievements.BattleStatisticsQuery battleStatisticsQuery4 = new org.mafagafogigante.dungeon.achievements.BattleStatisticsQuery();
    org.mafagafogigante.dungeon.achievements.BattleStatisticsRequirement battleStatisticsRequirement6 = new org.mafagafogigante.dungeon.achievements.BattleStatisticsRequirement(battleStatisticsQuery4, (int)(byte)100);
    boolean b7 = battleStatistics0.satisfies(battleStatisticsRequirement6);
    org.mafagafogigante.dungeon.util.CounterMap<org.mafagafogigante.dungeon.stats.CauseOfDeath> countermap_causeOfDeath8 = battleStatistics0.getKillsByCauseOfDeath();
    org.mafagafogigante.dungeon.achievements.BattleStatisticsQuery battleStatisticsQuery9 = new org.mafagafogigante.dungeon.achievements.BattleStatisticsQuery();
    org.mafagafogigante.dungeon.achievements.BattleStatisticsRequirement battleStatisticsRequirement11 = new org.mafagafogigante.dungeon.achievements.BattleStatisticsRequirement(battleStatisticsQuery9, (int)(byte)100);
    int i12 = battleStatisticsRequirement11.getCount();
    int i13 = battleStatisticsRequirement11.getCount();
    int i14 = battleStatisticsRequirement11.getCount();
    boolean b15 = battleStatistics0.satisfies(battleStatisticsRequirement11);
    org.mafagafogigante.dungeon.entity.creatures.Creature creature16 = null;
    org.mafagafogigante.dungeon.achievements.BattleStatisticsQuery battleStatisticsQuery17 = new org.mafagafogigante.dungeon.achievements.BattleStatisticsQuery();
    battleStatisticsQuery17.setType("Damaged");
    org.mafagafogigante.dungeon.game.Id id20 = null;
    battleStatisticsQuery17.setId(id20);
    org.mafagafogigante.dungeon.game.Id id22 = null;
    org.mafagafogigante.dungeon.achievements.BattleStatisticsQuery battleStatisticsQuery24 = new org.mafagafogigante.dungeon.achievements.BattleStatisticsQuery();
    org.mafagafogigante.dungeon.stats.CauseOfDeath causeOfDeath25 = org.mafagafogigante.dungeon.stats.CauseOfDeath.getUnarmedCauseOfDeath();
    battleStatisticsQuery24.setCauseOfDeath(causeOfDeath25);
    org.mafagafogigante.dungeon.game.PartOfDay partOfDay27 = org.mafagafogigante.dungeon.game.PartOfDay.NIGHT;
    org.mafagafogigante.dungeon.stats.BattleRecord battleRecord28 = new org.mafagafogigante.dungeon.stats.BattleRecord(id22, "", causeOfDeath25, partOfDay27);
    boolean b29 = battleStatisticsQuery17.matches(battleRecord28);
    org.mafagafogigante.dungeon.stats.CauseOfDeath causeOfDeath30 = battleRecord28.getCauseOfDeath();
    org.mafagafogigante.dungeon.game.Id id31 = null;
    org.mafagafogigante.dungeon.achievements.BattleStatisticsQuery battleStatisticsQuery33 = new org.mafagafogigante.dungeon.achievements.BattleStatisticsQuery();
    org.mafagafogigante.dungeon.stats.CauseOfDeath causeOfDeath34 = org.mafagafogigante.dungeon.stats.CauseOfDeath.getUnarmedCauseOfDeath();
    battleStatisticsQuery33.setCauseOfDeath(causeOfDeath34);
    org.mafagafogigante.dungeon.game.PartOfDay partOfDay36 = org.mafagafogigante.dungeon.game.PartOfDay.NIGHT;
    org.mafagafogigante.dungeon.stats.BattleRecord battleRecord37 = new org.mafagafogigante.dungeon.stats.BattleRecord(id31, "", causeOfDeath34, partOfDay36);
    // The following exception was thrown during execution in test generation
    try {
    battleStatistics0.addBattle(creature16, causeOfDeath30, partOfDay36);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "BattleStatistics{records=CounterMap{map={}}}"+ "'", str3.equals("BattleStatistics{records=CounterMap{map={}}}"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(countermap_causeOfDeath8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(causeOfDeath25);
    org.junit.Assert.assertTrue("'" + partOfDay27 + "' != '" + org.mafagafogigante.dungeon.game.PartOfDay.NIGHT + "'", partOfDay27.equals(org.mafagafogigante.dungeon.game.PartOfDay.NIGHT));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(causeOfDeath30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(causeOfDeath34);
    org.junit.Assert.assertTrue("'" + partOfDay36 + "' != '" + org.mafagafogigante.dungeon.game.PartOfDay.NIGHT + "'", partOfDay36.equals(org.mafagafogigante.dungeon.game.PartOfDay.NIGHT));

  }

  @Test
  public void test367() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test367"); }

    org.mafagafogigante.dungeon.game.PartOfDay partOfDay0 = org.mafagafogigante.dungeon.game.PartOfDay.NIGHT;
    org.mafagafogigante.dungeon.entity.Luminosity luminosity1 = partOfDay0.getLuminosity();
    org.mafagafogigante.dungeon.game.Name name2 = partOfDay0.getName();
    java.lang.String str4 = name2.getQuantifiedName((int)'a');
    java.lang.String str5 = name2.getSingular();
    java.lang.String str6 = name2.toString();
    java.lang.String str7 = name2.getSingular();
    java.lang.String str8 = name2.getPlural();
    java.lang.String str9 = name2.getPlural();
    java.lang.String str11 = name2.getQuantifiedName(20601);
    java.lang.String str12 = name2.toString();
    java.lang.String str14 = name2.getQuantifiedName((int)(byte)100);
    java.lang.String str15 = name2.getSingular();
    org.junit.Assert.assertTrue("'" + partOfDay0 + "' != '" + org.mafagafogigante.dungeon.game.PartOfDay.NIGHT + "'", partOfDay0.equals(org.mafagafogigante.dungeon.game.PartOfDay.NIGHT));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(luminosity1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(name2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "a few Nights"+ "'", str4.equals("a few Nights"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "Night"+ "'", str5.equals("Night"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "Night"+ "'", str6.equals("Night"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "Night"+ "'", str7.equals("Night"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "Nights"+ "'", str8.equals("Nights"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "Nights"+ "'", str9.equals("Nights"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "a few Nights"+ "'", str11.equals("a few Nights"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "Night"+ "'", str12.equals("Night"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "a few Nights"+ "'", str14.equals("a few Nights"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "Night"+ "'", str15.equals("Night"));

  }

  @Test
  public void test368() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test368"); }

    org.mafagafogigante.dungeon.game.Id id0 = null;
    org.mafagafogigante.dungeon.entity.items.BookComponent bookComponent2 = new org.mafagafogigante.dungeon.entity.items.BookComponent(id0, "");
    boolean b3 = bookComponent2.isDidactic();
    java.lang.String str4 = bookComponent2.getText();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + ""+ "'", str4.equals(""));

  }

  @Test
  public void test369() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test369"); }

    org.mafagafogigante.dungeon.stats.Statistics statistics0 = new org.mafagafogigante.dungeon.stats.Statistics();
    statistics0.writeStatistics();
    statistics0.writeStatistics();
    statistics0.writeStatistics();
    org.mafagafogigante.dungeon.commands.IssuedCommand issuedCommand5 = new org.mafagafogigante.dungeon.commands.IssuedCommand("BattleStatistics{records=CounterMap{map={}}}");
    org.mafagafogigante.dungeon.commands.PreparedIssuedCommand preparedIssuedCommand6 = org.mafagafogigante.dungeon.commands.IssuedCommandProcessor.prepareIssuedCommand(issuedCommand5);
    statistics0.addCommand(issuedCommand5);
    java.lang.String str8 = issuedCommand5.toString();
    org.mafagafogigante.dungeon.commands.IssuedCommandEvaluation issuedCommandEvaluation9 = org.mafagafogigante.dungeon.commands.IssuedCommandProcessor.evaluateIssuedCommand(issuedCommand5);
    boolean b10 = issuedCommandEvaluation9.isValid();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(preparedIssuedCommand6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "BattleStatistics{records=CounterMap{map={}}}"+ "'", str8.equals("BattleStatistics{records=CounterMap{map={}}}"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(issuedCommandEvaluation9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);

  }

  @Test
  public void test370() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test370"); }

    org.mafagafogigante.dungeon.stats.BattleStatistics battleStatistics0 = new org.mafagafogigante.dungeon.stats.BattleStatistics();
    org.mafagafogigante.dungeon.achievements.BattleStatisticsRequirement battleStatisticsRequirement1 = null;
    boolean b2 = battleStatistics0.satisfies(battleStatisticsRequirement1);
    java.lang.String str3 = battleStatistics0.toString();
    org.mafagafogigante.dungeon.achievements.BattleStatisticsQuery battleStatisticsQuery4 = new org.mafagafogigante.dungeon.achievements.BattleStatisticsQuery();
    org.mafagafogigante.dungeon.achievements.BattleStatisticsRequirement battleStatisticsRequirement6 = new org.mafagafogigante.dungeon.achievements.BattleStatisticsRequirement(battleStatisticsQuery4, (int)(byte)100);
    boolean b7 = battleStatistics0.satisfies(battleStatisticsRequirement6);
    org.mafagafogigante.dungeon.util.CounterMap<org.mafagafogigante.dungeon.stats.CauseOfDeath> countermap_causeOfDeath8 = battleStatistics0.getKillsByCauseOfDeath();
    org.mafagafogigante.dungeon.util.CounterMap<org.mafagafogigante.dungeon.stats.CauseOfDeath> countermap_causeOfDeath9 = battleStatistics0.getKillsByCauseOfDeath();
    org.mafagafogigante.dungeon.achievements.BattleStatisticsQuery battleStatisticsQuery10 = new org.mafagafogigante.dungeon.achievements.BattleStatisticsQuery();
    org.mafagafogigante.dungeon.achievements.BattleStatisticsRequirement battleStatisticsRequirement12 = new org.mafagafogigante.dungeon.achievements.BattleStatisticsRequirement(battleStatisticsQuery10, (int)(byte)100);
    org.mafagafogigante.dungeon.achievements.BattleStatisticsQuery battleStatisticsQuery13 = battleStatisticsRequirement12.getQuery();
    boolean b14 = battleStatistics0.satisfies(battleStatisticsRequirement12);
    org.mafagafogigante.dungeon.achievements.BattleStatisticsQuery battleStatisticsQuery15 = battleStatisticsRequirement12.getQuery();
    org.mafagafogigante.dungeon.game.Id id16 = null;
    battleStatisticsQuery15.setId(id16);
    org.mafagafogigante.dungeon.entity.creatures.Creature creature18 = null;
    org.mafagafogigante.dungeon.entity.items.CreatureInventory creatureInventory21 = new org.mafagafogigante.dungeon.entity.items.CreatureInventory(creature18, (-1), 0.0d);
    org.mafagafogigante.dungeon.entity.Weight weight22 = creatureInventory21.getWeight();
    int i23 = creatureInventory21.getItemCount();
    int i24 = creatureInventory21.getItemCount();
    org.mafagafogigante.dungeon.entity.Weight weight25 = creatureInventory21.getWeightLimit();
    org.mafagafogigante.dungeon.stats.Statistics statistics26 = new org.mafagafogigante.dungeon.stats.Statistics();
    org.mafagafogigante.dungeon.stats.BattleStatistics battleStatistics27 = statistics26.getBattleStatistics();
    org.mafagafogigante.dungeon.stats.WorldStatistics worldStatistics28 = statistics26.getWorldStatistics();
    boolean b29 = weight25.equals((java.lang.Object)statistics26);
    org.mafagafogigante.dungeon.stats.ExplorationStatistics explorationStatistics30 = statistics26.getExplorationStatistics();
    org.mafagafogigante.dungeon.game.Id id31 = null;
    int i32 = explorationStatistics30.getKillCount(id31);
    org.mafagafogigante.dungeon.game.Id id33 = null;
    int i34 = explorationStatistics30.getKillCount(id33);
    org.mafagafogigante.dungeon.game.Id id35 = null;
    int i36 = explorationStatistics30.getVisitedLocations(id35);
    org.mafagafogigante.dungeon.stats.ExplorationStatistics explorationStatistics37 = new org.mafagafogigante.dungeon.stats.ExplorationStatistics();
    org.mafagafogigante.dungeon.game.Point point38 = null;
    org.mafagafogigante.dungeon.game.Id id39 = null;
    explorationStatistics37.createEntryIfNotExists(point38, id39);
    org.mafagafogigante.dungeon.game.Point point44 = new org.mafagafogigante.dungeon.game.Point(10, (int)'a', 0);
    java.lang.String[] str_array47 = new java.lang.String[] { "", "" };
    org.mafagafogigante.dungeon.util.Table table48 = new org.mafagafogigante.dungeon.util.Table(str_array47);
    boolean b49 = point44.equals((java.lang.Object)str_array47);
    org.mafagafogigante.dungeon.game.Id id50 = null;
    explorationStatistics37.addVisit(point44, id50);
    org.mafagafogigante.dungeon.stats.ExplorationStatistics explorationStatistics52 = new org.mafagafogigante.dungeon.stats.ExplorationStatistics();
    org.mafagafogigante.dungeon.game.Point point53 = null;
    org.mafagafogigante.dungeon.game.Id id54 = null;
    explorationStatistics52.createEntryIfNotExists(point53, id54);
    org.mafagafogigante.dungeon.game.Point point59 = new org.mafagafogigante.dungeon.game.Point((int)' ', (int)(byte)0, (int)(short)-1);
    org.mafagafogigante.dungeon.game.Id id60 = null;
    explorationStatistics52.addVisit(point59, id60);
    java.lang.String str62 = point59.toString();
    int i63 = point59.getZ();
    org.mafagafogigante.dungeon.game.Id id64 = null;
    explorationStatistics37.addVisit(point59, id64);
    org.mafagafogigante.dungeon.entity.items.ItemPreset itemPreset66 = new org.mafagafogigante.dungeon.entity.items.ItemPreset();
    org.mafagafogigante.dungeon.entity.Integrity integrity67 = itemPreset66.getIntegrity();
    org.mafagafogigante.dungeon.entity.Integrity integrity68 = null;
    itemPreset66.setIntegrity(integrity68);
    org.mafagafogigante.dungeon.util.Percentage percentage70 = itemPreset66.getVisibility();
    org.mafagafogigante.dungeon.entity.Integrity integrity71 = itemPreset66.getIntegrity();
    java.lang.String str72 = itemPreset66.getText();
    java.lang.String str73 = itemPreset66.getType();
    org.mafagafogigante.dungeon.entity.Integrity integrity76 = new org.mafagafogigante.dungeon.entity.Integrity(1, 0);
    boolean b77 = integrity76.isMaximum();
    integrity76.incrementBy((int)(short)0);
    org.mafagafogigante.dungeon.util.Percentage percentage80 = integrity76.toPercentage();
    itemPreset66.setHitRate(percentage80);
    org.mafagafogigante.dungeon.game.Id id83 = new org.mafagafogigante.dungeon.game.Id("100");
    java.lang.String str84 = id83.toString();
    itemPreset66.setId(id83);
    explorationStatistics30.addVisit(point59, id83);
    battleStatisticsQuery15.setId(id83);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "BattleStatistics{records=CounterMap{map={}}}"+ "'", str3.equals("BattleStatistics{records=CounterMap{map={}}}"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(countermap_causeOfDeath8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(countermap_causeOfDeath9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(battleStatisticsQuery13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(battleStatisticsQuery15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(weight22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i23 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(weight25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(battleStatistics27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(worldStatistics28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(explorationStatistics30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i32 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i34 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i36 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str62 + "' != '" + "{32, 0, -1}"+ "'", str62.equals("{32, 0, -1}"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i63 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(integrity67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(percentage70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(integrity71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b77 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(percentage80);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str84 + "' != '" + "100"+ "'", str84.equals("100"));

  }

  @Test
  public void test371() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test371"); }

    org.mafagafogigante.dungeon.game.LocationPreset locationPreset0 = null;
    org.mafagafogigante.dungeon.game.World world1 = null;
    org.mafagafogigante.dungeon.stats.ExplorationStatistics explorationStatistics2 = new org.mafagafogigante.dungeon.stats.ExplorationStatistics();
    org.mafagafogigante.dungeon.game.Id id3 = null;
    int i4 = explorationStatistics2.getMaximumNumberOfVisits(id3);
    org.mafagafogigante.dungeon.game.Id id5 = null;
    int i6 = explorationStatistics2.getVisitedLocations(id5);
    org.mafagafogigante.dungeon.stats.ExplorationStatistics explorationStatistics7 = new org.mafagafogigante.dungeon.stats.ExplorationStatistics();
    org.mafagafogigante.dungeon.game.Point point8 = null;
    org.mafagafogigante.dungeon.game.Id id9 = null;
    explorationStatistics7.createEntryIfNotExists(point8, id9);
    org.mafagafogigante.dungeon.game.Point point14 = new org.mafagafogigante.dungeon.game.Point(10, (int)'a', 0);
    java.lang.String[] str_array17 = new java.lang.String[] { "", "" };
    org.mafagafogigante.dungeon.util.Table table18 = new org.mafagafogigante.dungeon.util.Table(str_array17);
    boolean b19 = point14.equals((java.lang.Object)str_array17);
    org.mafagafogigante.dungeon.game.Id id20 = null;
    explorationStatistics7.addVisit(point14, id20);
    org.mafagafogigante.dungeon.stats.ExplorationStatistics explorationStatistics22 = new org.mafagafogigante.dungeon.stats.ExplorationStatistics();
    org.mafagafogigante.dungeon.game.Point point23 = null;
    org.mafagafogigante.dungeon.game.Id id24 = null;
    explorationStatistics22.createEntryIfNotExists(point23, id24);
    org.mafagafogigante.dungeon.game.Point point29 = new org.mafagafogigante.dungeon.game.Point((int)' ', (int)(byte)0, (int)(short)-1);
    org.mafagafogigante.dungeon.game.Id id30 = null;
    explorationStatistics22.addVisit(point29, id30);
    java.lang.String str32 = point29.toString();
    int i33 = point29.getZ();
    org.mafagafogigante.dungeon.game.Id id34 = null;
    explorationStatistics7.addVisit(point29, id34);
    org.mafagafogigante.dungeon.game.Id id36 = null;
    explorationStatistics2.addVisit(point29, id36);
    org.mafagafogigante.dungeon.stats.ExplorationStatistics explorationStatistics38 = new org.mafagafogigante.dungeon.stats.ExplorationStatistics();
    org.mafagafogigante.dungeon.game.Point point39 = null;
    org.mafagafogigante.dungeon.game.Id id40 = null;
    explorationStatistics38.createEntryIfNotExists(point39, id40);
    org.mafagafogigante.dungeon.game.Point point45 = new org.mafagafogigante.dungeon.game.Point(10, (int)'a', 0);
    java.lang.String[] str_array48 = new java.lang.String[] { "", "" };
    org.mafagafogigante.dungeon.util.Table table49 = new org.mafagafogigante.dungeon.util.Table(str_array48);
    boolean b50 = point45.equals((java.lang.Object)str_array48);
    org.mafagafogigante.dungeon.game.Id id51 = null;
    explorationStatistics38.addVisit(point45, id51);
    org.mafagafogigante.dungeon.game.Id id53 = null;
    explorationStatistics2.addVisit(point45, id53);
    org.mafagafogigante.dungeon.entity.items.ItemPreset itemPreset55 = new org.mafagafogigante.dungeon.entity.items.ItemPreset();
    itemPreset55.setDrinkableHealing((int)(short)0);
    org.mafagafogigante.dungeon.util.Percentage percentage59 = new org.mafagafogigante.dungeon.util.Percentage((double)57);
    itemPreset55.setVisibility(percentage59);
    itemPreset55.setDrinkableDoses(46800);
    boolean b63 = point45.equals((java.lang.Object)itemPreset55);
    // The following exception was thrown during execution in test generation
    try {
    org.mafagafogigante.dungeon.game.Location location64 = new org.mafagafogigante.dungeon.game.Location(locationPreset0, world1, point45);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str32 + "' != '" + "{32, 0, -1}"+ "'", str32.equals("{32, 0, -1}"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i33 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b63 == false);

  }

  @Test
  public void test372() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test372"); }

    org.mafagafogigante.dungeon.world.Sky sky0 = org.mafagafogigante.dungeon.world.SkyFactory.makeDarrowmereSky();
    java.lang.String str1 = sky0.toString();
    java.lang.String str2 = sky0.toString();
    org.mafagafogigante.dungeon.world.VisibilityCriterion[] visibilityCriterion_array3 = new org.mafagafogigante.dungeon.world.VisibilityCriterion[] {  };
    org.mafagafogigante.dungeon.world.VisibilityCriteria visibilityCriteria4 = new org.mafagafogigante.dungeon.world.VisibilityCriteria(visibilityCriterion_array3);
    org.mafagafogigante.dungeon.entity.creatures.Creature creature5 = null;
    org.mafagafogigante.dungeon.entity.creatures.Observer observer6 = new org.mafagafogigante.dungeon.entity.creatures.Observer(creature5);
    boolean b7 = visibilityCriteria4.isMetBy(observer6);
    org.mafagafogigante.dungeon.entity.items.Item[] item_array8 = new org.mafagafogigante.dungeon.entity.items.Item[] {  };
    java.util.ArrayList<org.mafagafogigante.dungeon.entity.items.Item> arraylist_item9 = new java.util.ArrayList<org.mafagafogigante.dungeon.entity.items.Item>();
    boolean b10 = java.util.Collections.addAll((java.util.Collection<org.mafagafogigante.dungeon.entity.items.Item>)arraylist_item9, item_array8);
    org.mafagafogigante.dungeon.game.DungeonString dungeonString12 = new org.mafagafogigante.dungeon.game.DungeonString("hi!");
    java.lang.String[] str_array17 = new java.lang.String[] { "hi!", "Damaged", "BattleStatistics{records=CounterMap{map={}}}", "" };
    dungeonString12.append(str_array17);
    observer6.writeItemSight((java.util.List<org.mafagafogigante.dungeon.entity.items.Item>)arraylist_item9, dungeonString12);
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str20 = sky0.describeYourself(observer6);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(sky0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Sky{astronomicalBodies=[the Sun, a large, golden, spherical body, Mino, a small, dull white spherical body, Sario, a very small, green-tinted, perfectly spherical body]}"+ "'", str1.equals("Sky{astronomicalBodies=[the Sun, a large, golden, spherical body, Mino, a small, dull white spherical body, Sario, a very small, green-tinted, perfectly spherical body]}"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "Sky{astronomicalBodies=[the Sun, a large, golden, spherical body, Mino, a small, dull white spherical body, Sario, a very small, green-tinted, perfectly spherical body]}"+ "'", str2.equals("Sky{astronomicalBodies=[the Sun, a large, golden, spherical body, Mino, a small, dull white spherical body, Sario, a very small, green-tinted, perfectly spherical body]}"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(visibilityCriterion_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(item_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array17);

  }

  @Test
  public void test373() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test373"); }

    org.mafagafogigante.dungeon.achievements.BattleStatisticsQuery battleStatisticsQuery0 = new org.mafagafogigante.dungeon.achievements.BattleStatisticsQuery();
    java.lang.String str1 = battleStatisticsQuery0.toString();
    org.mafagafogigante.dungeon.stats.ExplorationStatistics explorationStatistics2 = new org.mafagafogigante.dungeon.stats.ExplorationStatistics();
    org.mafagafogigante.dungeon.game.Point point3 = null;
    org.mafagafogigante.dungeon.game.Id id4 = null;
    explorationStatistics2.createEntryIfNotExists(point3, id4);
    org.mafagafogigante.dungeon.game.Point point9 = new org.mafagafogigante.dungeon.game.Point((int)' ', (int)(byte)0, (int)(short)-1);
    org.mafagafogigante.dungeon.game.Id id10 = null;
    explorationStatistics2.addVisit(point9, id10);
    boolean b12 = battleStatisticsQuery0.equals((java.lang.Object)explorationStatistics2);
    org.mafagafogigante.dungeon.date.Date date16 = new org.mafagafogigante.dungeon.date.Date(10L, 100L, 100L);
    org.mafagafogigante.dungeon.date.Date date20 = new org.mafagafogigante.dungeon.date.Date(10L, 100L, 100L);
    int i21 = date16.compareTo(date20);
    org.mafagafogigante.dungeon.game.PartOfDay partOfDay22 = org.mafagafogigante.dungeon.game.PartOfDay.getCorrespondingConstant(date16);
    long long23 = date16.getYear();
    org.mafagafogigante.dungeon.date.Date date27 = new org.mafagafogigante.dungeon.date.Date(10L, 100L, 100L);
    org.mafagafogigante.dungeon.date.Date date31 = new org.mafagafogigante.dungeon.date.Date(10L, 100L, 100L);
    int i32 = date27.compareTo(date31);
    long long33 = date27.getYear();
    int i34 = date16.compareTo(date27);
    org.mafagafogigante.dungeon.date.Date date38 = new org.mafagafogigante.dungeon.date.Date(10L, 100L, 100L);
    org.mafagafogigante.dungeon.date.Date date42 = new org.mafagafogigante.dungeon.date.Date(10L, 100L, 100L);
    int i43 = date38.compareTo(date42);
    long long44 = date38.getYear();
    int i45 = date16.compareTo(date38);
    org.mafagafogigante.dungeon.game.PartOfDay partOfDay46 = org.mafagafogigante.dungeon.game.PartOfDay.getCorrespondingConstant(date16);
    battleStatisticsQuery0.setPartOfDay(partOfDay46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "BattleStatisticsQuery{id=null, type='null', causeOfDeath=null, partOfDay=null}"+ "'", str1.equals("BattleStatisticsQuery{id=null, type='null', causeOfDeath=null, partOfDay=null}"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i21 == 0);
    org.junit.Assert.assertTrue("'" + partOfDay22 + "' != '" + org.mafagafogigante.dungeon.game.PartOfDay.MIDNIGHT + "'", partOfDay22.equals(org.mafagafogigante.dungeon.game.PartOfDay.MIDNIGHT));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long23 == 10L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i32 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long33 == 10L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i34 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i43 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long44 == 10L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i45 == 0);
    org.junit.Assert.assertTrue("'" + partOfDay46 + "' != '" + org.mafagafogigante.dungeon.game.PartOfDay.MIDNIGHT + "'", partOfDay46.equals(org.mafagafogigante.dungeon.game.PartOfDay.MIDNIGHT));

  }

  @Test
  public void test374() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test374"); }

    org.mafagafogigante.dungeon.gui.WritingSpecifications writingSpecifications2 = new org.mafagafogigante.dungeon.gui.WritingSpecifications(false, (int)(short)100);

  }

  @Test
  public void test375() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test375"); }

    org.mafagafogigante.dungeon.stats.WorldStatistics worldStatistics0 = new org.mafagafogigante.dungeon.stats.WorldStatistics();
    int i1 = worldStatistics0.getLocationCount();
    org.mafagafogigante.dungeon.util.CounterMap<java.lang.String> countermap_str2 = worldStatistics0.getSpawnCounter();
    org.mafagafogigante.dungeon.util.CounterMap<java.lang.String> countermap_str3 = worldStatistics0.getSpawnCounter();
    int i4 = worldStatistics0.getLocationCount();
    worldStatistics0.addLocation("");
    worldStatistics0.addLocation("CreatureHealth{integrity=100/100}");
    int i9 = worldStatistics0.getLocationCount();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(countermap_str2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(countermap_str3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 2);

  }

  @Test
  public void test376() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test376"); }

    org.mafagafogigante.dungeon.entity.items.ItemPreset itemPreset0 = new org.mafagafogigante.dungeon.entity.items.ItemPreset();
    org.mafagafogigante.dungeon.entity.Integrity integrity1 = itemPreset0.getIntegrity();
    org.mafagafogigante.dungeon.entity.Integrity integrity2 = null;
    itemPreset0.setIntegrity(integrity2);
    org.mafagafogigante.dungeon.util.Percentage percentage4 = itemPreset0.getVisibility();
    java.lang.String str5 = itemPreset0.getType();
    org.mafagafogigante.dungeon.entity.items.Item.Tag tag6 = org.mafagafogigante.dungeon.entity.items.Item.Tag.REPAIRABLE;
    itemPreset0.addTag(tag6);
    int i8 = itemPreset0.getNutrition();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(integrity1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(percentage4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str5);
    org.junit.Assert.assertTrue("'" + tag6 + "' != '" + org.mafagafogigante.dungeon.entity.items.Item.Tag.REPAIRABLE + "'", tag6.equals(org.mafagafogigante.dungeon.entity.items.Item.Tag.REPAIRABLE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 0);

  }

  @Test
  public void test377() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test377"); }

    org.mafagafogigante.dungeon.util.ShuffledRange shuffledRange2 = new org.mafagafogigante.dungeon.util.ShuffledRange(81, 46800);
    int i4 = shuffledRange2.get(4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 13843);

  }

  @Test
  public void test378() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test378"); }

    org.mafagafogigante.dungeon.entity.items.ItemPreset itemPreset0 = new org.mafagafogigante.dungeon.entity.items.ItemPreset();
    itemPreset0.setDrinkableHealing((int)(short)0);
    org.mafagafogigante.dungeon.util.Percentage percentage4 = new org.mafagafogigante.dungeon.util.Percentage((double)57);
    itemPreset0.setVisibility(percentage4);
    int i6 = itemPreset0.getDrinkableDoses();
    int i7 = itemPreset0.getIntegrityDecrementOnHit();
    org.mafagafogigante.dungeon.entity.items.ItemPreset itemPreset8 = new org.mafagafogigante.dungeon.entity.items.ItemPreset();
    org.mafagafogigante.dungeon.entity.Luminosity luminosity9 = itemPreset8.getLuminosity();
    itemPreset0.setLuminosity(luminosity9);
    itemPreset0.setIntegrityDecrementPerDose(38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(luminosity9);

  }

  @Test
  public void test379() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test379"); }

    org.mafagafogigante.dungeon.entity.items.ItemPreset itemPreset0 = new org.mafagafogigante.dungeon.entity.items.ItemPreset();
    org.mafagafogigante.dungeon.entity.Integrity integrity1 = itemPreset0.getIntegrity();
    org.mafagafogigante.dungeon.entity.Integrity integrity2 = null;
    itemPreset0.setIntegrity(integrity2);
    org.mafagafogigante.dungeon.util.Percentage percentage4 = itemPreset0.getVisibility();
    boolean b5 = itemPreset0.isUnique();
    org.mafagafogigante.dungeon.game.Id id6 = null;
    itemPreset0.setId(id6);
    int i8 = itemPreset0.getDamage();
    int i9 = itemPreset0.getDamage();
    int i10 = itemPreset0.getIntegrityDecrementOnEat();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(integrity1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(percentage4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 0);

  }

  @Test
  public void test380() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test380"); }

    org.mafagafogigante.dungeon.entity.creatures.Creature creature0 = null;
    org.mafagafogigante.dungeon.entity.items.CreatureInventory creatureInventory3 = new org.mafagafogigante.dungeon.entity.items.CreatureInventory(creature0, (-1), 0.0d);
    org.mafagafogigante.dungeon.entity.Weight weight4 = creatureInventory3.getWeight();
    int i5 = creatureInventory3.getItemCount();
    int i6 = creatureInventory3.getItemCount();
    java.util.List<org.mafagafogigante.dungeon.entity.items.Item> list_item7 = creatureInventory3.getItems();
    org.mafagafogigante.dungeon.entity.items.Item item8 = null;
    boolean b9 = creatureInventory3.hasItem(item8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(weight4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_item7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);

  }

  @Test
  public void test381() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test381"); }

    org.mafagafogigante.dungeon.stats.BattleStatistics battleStatistics0 = new org.mafagafogigante.dungeon.stats.BattleStatistics();
    org.mafagafogigante.dungeon.achievements.BattleStatisticsRequirement battleStatisticsRequirement1 = null;
    boolean b2 = battleStatistics0.satisfies(battleStatisticsRequirement1);
    java.lang.String str3 = battleStatistics0.toString();
    org.mafagafogigante.dungeon.achievements.BattleStatisticsQuery battleStatisticsQuery4 = new org.mafagafogigante.dungeon.achievements.BattleStatisticsQuery();
    org.mafagafogigante.dungeon.achievements.BattleStatisticsRequirement battleStatisticsRequirement6 = new org.mafagafogigante.dungeon.achievements.BattleStatisticsRequirement(battleStatisticsQuery4, (int)(byte)100);
    boolean b7 = battleStatistics0.satisfies(battleStatisticsRequirement6);
    org.mafagafogigante.dungeon.util.CounterMap<org.mafagafogigante.dungeon.stats.CauseOfDeath> countermap_causeOfDeath8 = battleStatistics0.getKillsByCauseOfDeath();
    org.mafagafogigante.dungeon.util.CounterMap<org.mafagafogigante.dungeon.stats.CauseOfDeath> countermap_causeOfDeath9 = battleStatistics0.getKillsByCauseOfDeath();
    org.mafagafogigante.dungeon.achievements.BattleStatisticsQuery battleStatisticsQuery10 = new org.mafagafogigante.dungeon.achievements.BattleStatisticsQuery();
    org.mafagafogigante.dungeon.achievements.BattleStatisticsRequirement battleStatisticsRequirement12 = new org.mafagafogigante.dungeon.achievements.BattleStatisticsRequirement(battleStatisticsQuery10, (int)(byte)100);
    org.mafagafogigante.dungeon.achievements.BattleStatisticsQuery battleStatisticsQuery13 = battleStatisticsRequirement12.getQuery();
    boolean b14 = battleStatistics0.satisfies(battleStatisticsRequirement12);
    org.mafagafogigante.dungeon.util.CounterMap<org.mafagafogigante.dungeon.stats.CauseOfDeath> countermap_causeOfDeath15 = battleStatistics0.getKillsByCauseOfDeath();
    org.mafagafogigante.dungeon.stats.CauseOfDeath causeOfDeath16 = org.mafagafogigante.dungeon.stats.CauseOfDeath.getUnarmedCauseOfDeath();
    java.lang.String str17 = causeOfDeath16.toString();
    countermap_causeOfDeath15.incrementCounter(causeOfDeath16, (java.lang.Integer)17518);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "BattleStatistics{records=CounterMap{map={}}}"+ "'", str3.equals("BattleStatistics{records=CounterMap{map={}}}"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(countermap_causeOfDeath8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(countermap_causeOfDeath9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(battleStatisticsQuery13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(countermap_causeOfDeath15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(causeOfDeath16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "Unarmed : UNARMED"+ "'", str17.equals("Unarmed : UNARMED"));

  }

  @Test
  public void test382() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test382"); }

    org.mafagafogigante.dungeon.entity.items.ItemPreset itemPreset0 = new org.mafagafogigante.dungeon.entity.items.ItemPreset();
    org.mafagafogigante.dungeon.entity.Integrity integrity1 = itemPreset0.getIntegrity();
    org.mafagafogigante.dungeon.entity.Integrity integrity2 = null;
    itemPreset0.setIntegrity(integrity2);
    org.mafagafogigante.dungeon.util.Percentage percentage4 = itemPreset0.getVisibility();
    java.lang.String str5 = itemPreset0.getType();
    itemPreset0.setIntegrityDecrementOnHit((int)(short)100);
    org.mafagafogigante.dungeon.entity.TagSet<org.mafagafogigante.dungeon.entity.items.Item.Tag> tagset_tag8 = itemPreset0.getTagSet();
    org.mafagafogigante.dungeon.entity.Weight weight10 = org.mafagafogigante.dungeon.entity.Weight.newInstance((double)(byte)-1);
    itemPreset0.setWeight(weight10);
    org.mafagafogigante.dungeon.entity.items.ItemPreset itemPreset12 = new org.mafagafogigante.dungeon.entity.items.ItemPreset();
    org.mafagafogigante.dungeon.entity.Integrity integrity13 = itemPreset12.getIntegrity();
    org.mafagafogigante.dungeon.entity.Integrity integrity14 = null;
    itemPreset12.setIntegrity(integrity14);
    org.mafagafogigante.dungeon.util.Percentage percentage17 = new org.mafagafogigante.dungeon.util.Percentage((double)'#');
    itemPreset12.setHitRate(percentage17);
    itemPreset0.setHitRate(percentage17);
    org.mafagafogigante.dungeon.entity.Luminosity luminosity20 = itemPreset0.getLuminosity();
    org.mafagafogigante.dungeon.entity.LightSource lightSource21 = new org.mafagafogigante.dungeon.entity.LightSource(luminosity20);
    org.mafagafogigante.dungeon.entity.LightSource lightSource22 = new org.mafagafogigante.dungeon.entity.LightSource(luminosity20);
    lightSource22.disable();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(integrity1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(percentage4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(tagset_tag8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(weight10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(integrity13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(luminosity20);

  }

  @Test
  public void test383() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test383"); }

    org.mafagafogigante.dungeon.achievements.BattleStatisticsQuery battleStatisticsQuery0 = new org.mafagafogigante.dungeon.achievements.BattleStatisticsQuery();
    battleStatisticsQuery0.setType("Damaged");
    org.mafagafogigante.dungeon.game.Id id3 = null;
    battleStatisticsQuery0.setId(id3);
    org.mafagafogigante.dungeon.game.Id id5 = null;
    org.mafagafogigante.dungeon.achievements.BattleStatisticsQuery battleStatisticsQuery7 = new org.mafagafogigante.dungeon.achievements.BattleStatisticsQuery();
    org.mafagafogigante.dungeon.stats.CauseOfDeath causeOfDeath8 = org.mafagafogigante.dungeon.stats.CauseOfDeath.getUnarmedCauseOfDeath();
    battleStatisticsQuery7.setCauseOfDeath(causeOfDeath8);
    org.mafagafogigante.dungeon.game.PartOfDay partOfDay10 = org.mafagafogigante.dungeon.game.PartOfDay.NIGHT;
    org.mafagafogigante.dungeon.stats.BattleRecord battleRecord11 = new org.mafagafogigante.dungeon.stats.BattleRecord(id5, "", causeOfDeath8, partOfDay10);
    boolean b12 = battleStatisticsQuery0.matches(battleRecord11);
    java.lang.String str13 = battleRecord11.getType();
    java.lang.String str14 = battleRecord11.getType();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(causeOfDeath8);
    org.junit.Assert.assertTrue("'" + partOfDay10 + "' != '" + org.mafagafogigante.dungeon.game.PartOfDay.NIGHT + "'", partOfDay10.equals(org.mafagafogigante.dungeon.game.PartOfDay.NIGHT));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + ""+ "'", str13.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + ""+ "'", str14.equals(""));

  }

  @Test
  public void test384() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test384"); }

    org.mafagafogigante.dungeon.entity.creatures.CreaturePreset creaturePreset0 = new org.mafagafogigante.dungeon.entity.creatures.CreaturePreset();
    org.mafagafogigante.dungeon.game.Id id1 = null;
    creaturePreset0.setWeaponId(id1);
    creaturePreset0.setAttack(57);
    int i5 = creaturePreset0.getAttack();
    int i6 = creaturePreset0.getInventoryItemLimit();
    org.mafagafogigante.dungeon.entity.creatures.CreaturePreset creaturePreset7 = new org.mafagafogigante.dungeon.entity.creatures.CreaturePreset();
    org.mafagafogigante.dungeon.game.Id id8 = null;
    creaturePreset7.setWeaponId(id8);
    creaturePreset7.setAttack(57);
    org.mafagafogigante.dungeon.entity.Luminosity luminosity12 = creaturePreset7.getLuminosity();
    creaturePreset7.setInventoryItemLimit(57);
    org.mafagafogigante.dungeon.util.Percentage percentage16 = new org.mafagafogigante.dungeon.util.Percentage((double)'#');
    boolean b18 = percentage16.equals((java.lang.Object)10.0d);
    org.mafagafogigante.dungeon.entity.Luminosity luminosity19 = new org.mafagafogigante.dungeon.entity.Luminosity(percentage16);
    org.mafagafogigante.dungeon.util.Percentage percentage20 = luminosity19.toPercentage();
    java.lang.String str21 = percentage20.toString();
    creaturePreset7.setVisibility(percentage20);
    org.mafagafogigante.dungeon.entity.creatures.CreaturePreset creaturePreset23 = new org.mafagafogigante.dungeon.entity.creatures.CreaturePreset();
    org.mafagafogigante.dungeon.game.Id id24 = null;
    creaturePreset23.setWeaponId(id24);
    creaturePreset23.setAttack(57);
    org.mafagafogigante.dungeon.entity.Luminosity luminosity28 = creaturePreset23.getLuminosity();
    org.mafagafogigante.dungeon.entity.creatures.CreaturePreset creaturePreset29 = new org.mafagafogigante.dungeon.entity.creatures.CreaturePreset();
    org.mafagafogigante.dungeon.game.Id id30 = null;
    creaturePreset29.setWeaponId(id30);
    creaturePreset29.setAttack(57);
    org.mafagafogigante.dungeon.game.Id[] id_array34 = new org.mafagafogigante.dungeon.game.Id[] {  };
    java.util.ArrayList<org.mafagafogigante.dungeon.game.Id> arraylist_id35 = new java.util.ArrayList<org.mafagafogigante.dungeon.game.Id>();
    boolean b36 = java.util.Collections.addAll((java.util.Collection<org.mafagafogigante.dungeon.game.Id>)arraylist_id35, id_array34);
    creaturePreset29.setItems((java.util.List<org.mafagafogigante.dungeon.game.Id>)arraylist_id35);
    creaturePreset23.setItems((java.util.List<org.mafagafogigante.dungeon.game.Id>)arraylist_id35);
    int i39 = creaturePreset23.getHealth();
    org.mafagafogigante.dungeon.util.Percentage percentage41 = new org.mafagafogigante.dungeon.util.Percentage((double)57);
    java.lang.String str42 = percentage41.toString();
    org.mafagafogigante.dungeon.util.Percentage percentage44 = new org.mafagafogigante.dungeon.util.Percentage((double)100);
    org.mafagafogigante.dungeon.entity.items.ItemPreset itemPreset45 = new org.mafagafogigante.dungeon.entity.items.ItemPreset();
    org.mafagafogigante.dungeon.entity.Integrity integrity46 = itemPreset45.getIntegrity();
    org.mafagafogigante.dungeon.entity.Integrity integrity47 = null;
    itemPreset45.setIntegrity(integrity47);
    org.mafagafogigante.dungeon.util.Percentage percentage49 = itemPreset45.getVisibility();
    java.lang.String str50 = itemPreset45.getType();
    itemPreset45.setIntegrityDecrementOnHit((int)(short)100);
    org.mafagafogigante.dungeon.util.Percentage percentage54 = new org.mafagafogigante.dungeon.util.Percentage((double)57);
    itemPreset45.setVisibility(percentage54);
    boolean b56 = org.mafagafogigante.dungeon.game.Random.roll(percentage54);
    int i57 = percentage44.compareTo(percentage54);
    java.lang.String str58 = percentage54.toString();
    org.mafagafogigante.dungeon.util.Percentage percentage59 = percentage41.multiply(percentage54);
    creaturePreset23.setVisibility(percentage41);
    org.mafagafogigante.dungeon.entity.creatures.CreaturePreset creaturePreset61 = new org.mafagafogigante.dungeon.entity.creatures.CreaturePreset();
    org.mafagafogigante.dungeon.game.Id id62 = null;
    creaturePreset61.setWeaponId(id62);
    creaturePreset61.setAttack(57);
    org.mafagafogigante.dungeon.game.Id[] id_array66 = new org.mafagafogigante.dungeon.game.Id[] {  };
    java.util.ArrayList<org.mafagafogigante.dungeon.game.Id> arraylist_id67 = new java.util.ArrayList<org.mafagafogigante.dungeon.game.Id>();
    boolean b68 = java.util.Collections.addAll((java.util.Collection<org.mafagafogigante.dungeon.game.Id>)arraylist_id67, id_array66);
    creaturePreset61.setItems((java.util.List<org.mafagafogigante.dungeon.game.Id>)arraylist_id67);
    creaturePreset23.setItems((java.util.List<org.mafagafogigante.dungeon.game.Id>)arraylist_id67);
    creaturePreset7.setItems((java.util.List<org.mafagafogigante.dungeon.game.Id>)arraylist_id67);
    creaturePreset0.setItems((java.util.List<org.mafagafogigante.dungeon.game.Id>)arraylist_id67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(luminosity12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(percentage20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "100.00%"+ "'", str21.equals("100.00%"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(luminosity28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(id_array34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i39 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str42 + "' != '" + "100.00%"+ "'", str42.equals("100.00%"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(integrity46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(percentage49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b56 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i57 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str58 + "' != '" + "100.00%"+ "'", str58.equals("100.00%"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(percentage59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(id_array66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b68 == false);

  }

  @Test
  public void test385() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test385"); }

    org.mafagafogigante.dungeon.stats.CauseOfDeath causeOfDeath0 = org.mafagafogigante.dungeon.stats.CauseOfDeath.getUnarmedCauseOfDeath();
    org.mafagafogigante.dungeon.achievements.BattleStatisticsQuery battleStatisticsQuery1 = new org.mafagafogigante.dungeon.achievements.BattleStatisticsQuery();
    battleStatisticsQuery1.setType("Damaged");
    battleStatisticsQuery1.setType("");
    boolean b6 = causeOfDeath0.equals((java.lang.Object)battleStatisticsQuery1);
    org.mafagafogigante.dungeon.game.PartOfDay partOfDay7 = org.mafagafogigante.dungeon.game.PartOfDay.AFTERNOON;
    battleStatisticsQuery1.setPartOfDay(partOfDay7);
    org.mafagafogigante.dungeon.achievements.BattleStatisticsQuery battleStatisticsQuery9 = new org.mafagafogigante.dungeon.achievements.BattleStatisticsQuery();
    battleStatisticsQuery9.setType("Damaged");
    org.mafagafogigante.dungeon.stats.CauseOfDeath causeOfDeath12 = org.mafagafogigante.dungeon.stats.CauseOfDeath.getUnarmedCauseOfDeath();
    org.mafagafogigante.dungeon.achievements.BattleStatisticsQuery battleStatisticsQuery13 = new org.mafagafogigante.dungeon.achievements.BattleStatisticsQuery();
    battleStatisticsQuery13.setType("Damaged");
    battleStatisticsQuery13.setType("");
    boolean b18 = causeOfDeath12.equals((java.lang.Object)battleStatisticsQuery13);
    org.mafagafogigante.dungeon.game.Id id19 = null;
    org.mafagafogigante.dungeon.achievements.BattleStatisticsQuery battleStatisticsQuery21 = new org.mafagafogigante.dungeon.achievements.BattleStatisticsQuery();
    org.mafagafogigante.dungeon.stats.CauseOfDeath causeOfDeath22 = org.mafagafogigante.dungeon.stats.CauseOfDeath.getUnarmedCauseOfDeath();
    battleStatisticsQuery21.setCauseOfDeath(causeOfDeath22);
    org.mafagafogigante.dungeon.game.PartOfDay partOfDay24 = org.mafagafogigante.dungeon.game.PartOfDay.NIGHT;
    org.mafagafogigante.dungeon.stats.BattleRecord battleRecord25 = new org.mafagafogigante.dungeon.stats.BattleRecord(id19, "", causeOfDeath22, partOfDay24);
    boolean b26 = battleStatisticsQuery13.matches(battleRecord25);
    org.mafagafogigante.dungeon.stats.CauseOfDeath causeOfDeath27 = battleRecord25.getCauseOfDeath();
    boolean b28 = battleStatisticsQuery9.matches(battleRecord25);
    boolean b29 = battleStatisticsQuery1.matches(battleRecord25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(causeOfDeath0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    org.junit.Assert.assertTrue("'" + partOfDay7 + "' != '" + org.mafagafogigante.dungeon.game.PartOfDay.AFTERNOON + "'", partOfDay7.equals(org.mafagafogigante.dungeon.game.PartOfDay.AFTERNOON));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(causeOfDeath12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(causeOfDeath22);
    org.junit.Assert.assertTrue("'" + partOfDay24 + "' != '" + org.mafagafogigante.dungeon.game.PartOfDay.NIGHT + "'", partOfDay24.equals(org.mafagafogigante.dungeon.game.PartOfDay.NIGHT));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(causeOfDeath27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);

  }

  @Test
  public void test386() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test386"); }

    org.mafagafogigante.dungeon.util.NonNegativeInteger nonNegativeInteger1 = new org.mafagafogigante.dungeon.util.NonNegativeInteger((java.lang.Integer)38);
    java.lang.Integer i2 = nonNegativeInteger1.toInteger();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i2 + "' != '" + 38+ "'", i2.equals(38));

  }

  @Test
  public void test387() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test387"); }

    org.mafagafogigante.dungeon.game.BlockedEntrances blockedEntrances0 = new org.mafagafogigante.dungeon.game.BlockedEntrances();
    org.mafagafogigante.dungeon.game.Direction direction1 = org.mafagafogigante.dungeon.game.Direction.EAST;
    boolean b3 = direction1.equalsIgnoreCase("");
    blockedEntrances0.block(direction1);
    org.mafagafogigante.dungeon.game.BlockedEntrances blockedEntrances5 = new org.mafagafogigante.dungeon.game.BlockedEntrances();
    org.mafagafogigante.dungeon.game.Point point9 = new org.mafagafogigante.dungeon.game.Point(100, 10, (int)(byte)10);
    java.lang.String str10 = point9.toString();
    org.mafagafogigante.dungeon.game.Direction direction11 = org.mafagafogigante.dungeon.game.Direction.EAST;
    boolean b13 = direction11.equalsIgnoreCase("Damaged");
    org.mafagafogigante.dungeon.game.Point point14 = new org.mafagafogigante.dungeon.game.Point(point9, direction11);
    boolean b15 = blockedEntrances5.isBlocked(direction11);
    blockedEntrances0.block(direction11);
    org.junit.Assert.assertTrue("'" + direction1 + "' != '" + org.mafagafogigante.dungeon.game.Direction.EAST + "'", direction1.equals(org.mafagafogigante.dungeon.game.Direction.EAST));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "{100, 10, 10}"+ "'", str10.equals("{100, 10, 10}"));
    org.junit.Assert.assertTrue("'" + direction11 + "' != '" + org.mafagafogigante.dungeon.game.Direction.EAST + "'", direction11.equals(org.mafagafogigante.dungeon.game.Direction.EAST));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);

  }

  @Test
  public void test388() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test388"); }

    org.mafagafogigante.dungeon.game.DungeonString dungeonString1 = new org.mafagafogigante.dungeon.game.DungeonString("hi!");
    java.lang.String[] str_array6 = new java.lang.String[] { "hi!", "Damaged", "BattleStatistics{records=CounterMap{map={}}}", "" };
    dungeonString1.append(str_array6);
    org.mafagafogigante.dungeon.gui.WritingSpecifications writingSpecifications8 = null;
    org.mafagafogigante.dungeon.io.Writer.write((org.mafagafogigante.dungeon.game.Writable)dungeonString1, writingSpecifications8);
    java.lang.String[] str_array14 = new java.lang.String[] { "User: Nicholas\nTime: 15:42:12\nDate: 2017-04-09\nJava: Java version 1.8.0_121 by Oracle Corporation\nHeap: Using 34.4 MiB out of the allocated 123.0 MiB\nOS: Windows 10 (amd64) 10.0", "97 B", "DungeonString{coloredStringList=[ColoredString{string='hi!hi!DamagedBattleStatistics{records=CounterMap{map={}}}', color=java.awt.Color[r=192,g=192,b=192]}], currentColor=java.awt.Color[r=192,g=192,b=192]}", "Unarmed : UNARMED" };
    dungeonString1.append(str_array14);
    org.mafagafogigante.dungeon.gui.WritingSpecifications writingSpecifications18 = new org.mafagafogigante.dungeon.gui.WritingSpecifications(false, 32);
    boolean b19 = writingSpecifications18.shouldWait();
    java.lang.String str20 = writingSpecifications18.toString();
    org.mafagafogigante.dungeon.io.Writer.write((org.mafagafogigante.dungeon.game.Writable)dungeonString1, writingSpecifications18);
    int i22 = writingSpecifications18.getWait();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + "WritingSpecifications{scrollDown=false}"+ "'", str20.equals("WritingSpecifications{scrollDown=false}"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i22 == 32);

  }

  @Test
  public void test389() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test389"); }

    // The following exception was thrown during execution in test generation
    try {
    org.mafagafogigante.dungeon.commands.IssuedCommand issuedCommand1 = new org.mafagafogigante.dungeon.commands.IssuedCommand("");
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  @Test
  public void test390() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test390"); }

    java.awt.Color color1 = null;
    org.mafagafogigante.dungeon.game.LocationDescription locationDescription2 = new org.mafagafogigante.dungeon.game.LocationDescription('a', color1);
    java.awt.Color color3 = locationDescription2.getColor();
    locationDescription2.setInfo("Night");
    java.awt.Color color6 = locationDescription2.getColor();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(color3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(color6);

  }

  @Test
  public void test391() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test391"); }

    org.mafagafogigante.dungeon.entity.creatures.CreaturePreset creaturePreset0 = new org.mafagafogigante.dungeon.entity.creatures.CreaturePreset();
    org.mafagafogigante.dungeon.game.Id id1 = null;
    creaturePreset0.setWeaponId(id1);
    creaturePreset0.setAttack((int)(short)100);
    org.mafagafogigante.dungeon.game.Id id5 = creaturePreset0.getWeaponId();
    org.mafagafogigante.dungeon.entity.Luminosity luminosity6 = creaturePreset0.getLuminosity();
    creaturePreset0.setInventoryItemLimit((int)(byte)100);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(id5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(luminosity6);

  }

  @Test
  public void test392() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test392"); }

    java.awt.Color color1 = null;
    org.mafagafogigante.dungeon.game.LocationDescription locationDescription2 = new org.mafagafogigante.dungeon.game.LocationDescription('4', color1);
    java.awt.Color color3 = locationDescription2.getColor();
    java.lang.String str4 = locationDescription2.toString();
    java.awt.Color color5 = locationDescription2.getColor();
    java.lang.String str6 = locationDescription2.getInfo();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(color3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "LocationDescription{symbol=4, color=null, info='You don't discover anything.'}"+ "'", str4.equals("LocationDescription{symbol=4, color=null, info='You don't discover anything.'}"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(color5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "You don't discover anything."+ "'", str6.equals("You don't discover anything."));

  }

  @Test
  public void test393() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test393"); }

    org.mafagafogigante.dungeon.util.CircularList<java.lang.Comparable<org.mafagafogigante.dungeon.entity.Weight>> circularlist_comparable_weight1 = new org.mafagafogigante.dungeon.util.CircularList<java.lang.Comparable<org.mafagafogigante.dungeon.entity.Weight>>(100);
    org.mafagafogigante.dungeon.entity.creatures.Creature creature2 = null;
    org.mafagafogigante.dungeon.entity.items.CreatureInventory creatureInventory5 = new org.mafagafogigante.dungeon.entity.items.CreatureInventory(creature2, (-1), 0.0d);
    org.mafagafogigante.dungeon.entity.Weight weight6 = creatureInventory5.getWeight();
    circularlist_comparable_weight1.add((java.lang.Comparable<org.mafagafogigante.dungeon.entity.Weight>)weight6);
    org.mafagafogigante.dungeon.entity.Weight weight9 = org.mafagafogigante.dungeon.entity.Weight.newInstance((double)(byte)-1);
    org.mafagafogigante.dungeon.entity.Weight weight10 = org.mafagafogigante.dungeon.entity.Weight.ZERO;
    org.mafagafogigante.dungeon.entity.Weight weight11 = weight9.add(weight10);
    org.mafagafogigante.dungeon.entity.Weight weight13 = org.mafagafogigante.dungeon.entity.Weight.newInstance((double)'#');
    org.mafagafogigante.dungeon.entity.Weight weight14 = weight11.add(weight13);
    circularlist_comparable_weight1.add((java.lang.Comparable<org.mafagafogigante.dungeon.entity.Weight>)weight11);
    org.mafagafogigante.dungeon.entity.Weight weight17 = org.mafagafogigante.dungeon.entity.Weight.newInstance((double)(byte)-1);
    org.mafagafogigante.dungeon.entity.Weight weight18 = org.mafagafogigante.dungeon.entity.Weight.ZERO;
    org.mafagafogigante.dungeon.entity.Weight weight19 = weight17.add(weight18);
    org.mafagafogigante.dungeon.entity.Weight weight21 = org.mafagafogigante.dungeon.entity.Weight.newInstance((double)'#');
    org.mafagafogigante.dungeon.entity.Weight weight22 = weight19.add(weight21);
    circularlist_comparable_weight1.add((java.lang.Comparable<org.mafagafogigante.dungeon.entity.Weight>)weight19);
    int i24 = circularlist_comparable_weight1.size();
    java.lang.Comparable<org.mafagafogigante.dungeon.entity.Weight> comparable_weight25 = null;
    circularlist_comparable_weight1.add(comparable_weight25);
    boolean b27 = circularlist_comparable_weight1.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(weight6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(weight9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(weight10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(weight11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(weight13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(weight14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(weight17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(weight18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(weight19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(weight21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(weight22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i24 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);

  }

  @Test
  public void test394() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test394"); }

    org.mafagafogigante.dungeon.date.Date date3 = new org.mafagafogigante.dungeon.date.Date(10L, 100L, 100L);
    java.lang.String str4 = date3.toDateString();
    org.mafagafogigante.dungeon.date.Date date8 = new org.mafagafogigante.dungeon.date.Date(10L, 100L, 100L);
    org.mafagafogigante.dungeon.date.Date date12 = new org.mafagafogigante.dungeon.date.Date(10L, 100L, 100L);
    int i13 = date8.compareTo(date12);
    org.mafagafogigante.dungeon.game.PartOfDay partOfDay14 = org.mafagafogigante.dungeon.game.PartOfDay.getCorrespondingConstant(date8);
    long long15 = date8.getYear();
    int i16 = date3.compareTo(date8);
    org.mafagafogigante.dungeon.date.Date date21 = new org.mafagafogigante.dungeon.date.Date(10L, 100L, 100L);
    org.mafagafogigante.dungeon.date.Date date25 = new org.mafagafogigante.dungeon.date.Date(10L, 100L, 100L);
    int i26 = date21.compareTo(date25);
    java.lang.String str27 = date21.toTimeString();
    org.mafagafogigante.dungeon.date.Date date32 = new org.mafagafogigante.dungeon.date.Date(10L, 100L, 100L);
    org.mafagafogigante.dungeon.date.Date date36 = new org.mafagafogigante.dungeon.date.Date(10L, 100L, 100L);
    int i37 = date32.compareTo(date36);
    org.mafagafogigante.dungeon.game.PartOfDay partOfDay38 = org.mafagafogigante.dungeon.game.PartOfDay.getCorrespondingConstant(date32);
    long long39 = date32.getYear();
    org.mafagafogigante.dungeon.date.Date date43 = new org.mafagafogigante.dungeon.date.Date(10L, 100L, 100L);
    org.mafagafogigante.dungeon.date.Date date47 = new org.mafagafogigante.dungeon.date.Date(10L, 100L, 100L);
    int i48 = date43.compareTo(date47);
    long long49 = date43.getYear();
    int i50 = date32.compareTo(date43);
    org.mafagafogigante.dungeon.date.DungeonTimeUnit dungeonTimeUnit52 = org.mafagafogigante.dungeon.date.DungeonTimeUnit.HOUR;
    org.mafagafogigante.dungeon.date.Date date53 = date43.minus(35, dungeonTimeUnit52);
    org.mafagafogigante.dungeon.date.Date date54 = date21.plus((int)'a', dungeonTimeUnit52);
    org.mafagafogigante.dungeon.date.Date date55 = date3.plus(45056, dungeonTimeUnit52);
    org.mafagafogigante.dungeon.date.Date date59 = new org.mafagafogigante.dungeon.date.Date(10L, 100L, 100L);
    org.mafagafogigante.dungeon.date.Date date63 = new org.mafagafogigante.dungeon.date.Date(10L, 100L, 100L);
    int i64 = date59.compareTo(date63);
    org.mafagafogigante.dungeon.game.PartOfDay partOfDay65 = org.mafagafogigante.dungeon.game.PartOfDay.getCorrespondingConstant(date59);
    long long66 = date59.getYear();
    org.mafagafogigante.dungeon.date.Date date70 = new org.mafagafogigante.dungeon.date.Date(10L, 100L, 100L);
    org.mafagafogigante.dungeon.date.Date date74 = new org.mafagafogigante.dungeon.date.Date(10L, 100L, 100L);
    int i75 = date70.compareTo(date74);
    long long76 = date70.getYear();
    int i77 = date59.compareTo(date70);
    org.mafagafogigante.dungeon.date.DungeonTimeUnit dungeonTimeUnit79 = org.mafagafogigante.dungeon.date.DungeonTimeUnit.HOUR;
    org.mafagafogigante.dungeon.date.Date date80 = date70.minus(35, dungeonTimeUnit79);
    // The following exception was thrown during execution in test generation
    try {
    long long81 = dungeonTimeUnit52.as(dungeonTimeUnit79);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "day 10 of month 10 of the year 10"+ "'", str4.equals("day 10 of month 10 of the year 10"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 0);
    org.junit.Assert.assertTrue("'" + partOfDay14 + "' != '" + org.mafagafogigante.dungeon.game.PartOfDay.MIDNIGHT + "'", partOfDay14.equals(org.mafagafogigante.dungeon.game.PartOfDay.MIDNIGHT));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long15 == 10L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i26 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str27 + "' != '" + "00:00:00"+ "'", str27.equals("00:00:00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i37 == 0);
    org.junit.Assert.assertTrue("'" + partOfDay38 + "' != '" + org.mafagafogigante.dungeon.game.PartOfDay.MIDNIGHT + "'", partOfDay38.equals(org.mafagafogigante.dungeon.game.PartOfDay.MIDNIGHT));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long39 == 10L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i48 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long49 == 10L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i50 == 0);
    org.junit.Assert.assertTrue("'" + dungeonTimeUnit52 + "' != '" + org.mafagafogigante.dungeon.date.DungeonTimeUnit.HOUR + "'", dungeonTimeUnit52.equals(org.mafagafogigante.dungeon.date.DungeonTimeUnit.HOUR));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(date53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(date54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(date55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i64 == 0);
    org.junit.Assert.assertTrue("'" + partOfDay65 + "' != '" + org.mafagafogigante.dungeon.game.PartOfDay.MIDNIGHT + "'", partOfDay65.equals(org.mafagafogigante.dungeon.game.PartOfDay.MIDNIGHT));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long66 == 10L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i75 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long76 == 10L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i77 == 0);
    org.junit.Assert.assertTrue("'" + dungeonTimeUnit79 + "' != '" + org.mafagafogigante.dungeon.date.DungeonTimeUnit.HOUR + "'", dungeonTimeUnit79.equals(org.mafagafogigante.dungeon.date.DungeonTimeUnit.HOUR));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(date80);

  }

//  @Test
//  public void test395() throws Throwable {
//
//    if (debug) { System.out.format("%n%s%n","RegressionTest2.test395"); }
//
//    org.mafagafogigante.dungeon.entity.creatures.CreaturePreset creaturePreset0 = new org.mafagafogigante.dungeon.entity.creatures.CreaturePreset();
//    org.mafagafogigante.dungeon.game.Id id1 = null;
//    creaturePreset0.setWeaponId(id1);
//    creaturePreset0.setAttack(57);
//    org.mafagafogigante.dungeon.entity.Luminosity luminosity5 = creaturePreset0.getLuminosity();
//    creaturePreset0.setInventoryItemLimit(57);
//    org.mafagafogigante.dungeon.entity.creatures.Drop[] drop_array8 = new org.mafagafogigante.dungeon.entity.creatures.Drop[] {  };
//    java.util.ArrayList<org.mafagafogigante.dungeon.entity.creatures.Drop> arraylist_drop9 = new java.util.ArrayList<org.mafagafogigante.dungeon.entity.creatures.Drop>();
//    boolean b10 = java.util.Collections.addAll((java.util.Collection<org.mafagafogigante.dungeon.entity.creatures.Drop>)arraylist_drop9, drop_array8);
//    creaturePreset0.setDropList((java.util.List<org.mafagafogigante.dungeon.entity.creatures.Drop>)arraylist_drop9);
//    creaturePreset0.setInventoryWeightLimit((double)(byte)0);
//    org.mafagafogigante.dungeon.entity.creatures.AttackAlgorithmId attackAlgorithmId14 = creaturePreset0.getAttackAlgorithmId();
//    org.mafagafogigante.dungeon.entity.creatures.CreaturePreset creaturePreset15 = new org.mafagafogigante.dungeon.entity.creatures.CreaturePreset();
//    org.mafagafogigante.dungeon.game.Id id16 = null;
//    creaturePreset15.setWeaponId(id16);
//    creaturePreset15.setAttack(57);
//    org.mafagafogigante.dungeon.entity.Luminosity luminosity20 = creaturePreset15.getLuminosity();
//    org.mafagafogigante.dungeon.entity.creatures.CreaturePreset creaturePreset21 = new org.mafagafogigante.dungeon.entity.creatures.CreaturePreset();
//    org.mafagafogigante.dungeon.game.Id id22 = null;
//    creaturePreset21.setWeaponId(id22);
//    creaturePreset21.setAttack(57);
//    org.mafagafogigante.dungeon.game.Id[] id_array26 = new org.mafagafogigante.dungeon.game.Id[] {  };
//    java.util.ArrayList<org.mafagafogigante.dungeon.game.Id> arraylist_id27 = new java.util.ArrayList<org.mafagafogigante.dungeon.game.Id>();
//    boolean b28 = java.util.Collections.addAll((java.util.Collection<org.mafagafogigante.dungeon.game.Id>)arraylist_id27, id_array26);
//    creaturePreset21.setItems((java.util.List<org.mafagafogigante.dungeon.game.Id>)arraylist_id27);
//    creaturePreset15.setItems((java.util.List<org.mafagafogigante.dungeon.game.Id>)arraylist_id27);
//    org.mafagafogigante.dungeon.game.PartOfDay partOfDay31 = org.mafagafogigante.dungeon.game.PartOfDay.NIGHT;
//    org.mafagafogigante.dungeon.entity.Luminosity luminosity32 = partOfDay31.getLuminosity();
//    org.mafagafogigante.dungeon.game.Name name33 = partOfDay31.getName();
//    java.lang.String str35 = name33.getQuantifiedName((int)'a');
//    creaturePreset15.setName(name33);
//    creaturePreset0.setName(name33);
//    org.mafagafogigante.dungeon.entity.Weight weight38 = creaturePreset0.getWeight();
//    
//    // Regression assertion (captures the current behavior of the code)
//    org.junit.Assert.assertNotNull(luminosity5);
//    
//    // Regression assertion (captures the current behavior of the code)
//    org.junit.Assert.assertNotNull(drop_array8);
//    
//    // Regression assertion (captures the current behavior of the code)
//    org.junit.Assert.assertTrue(b10 == false);
//    
//    // Regression assertion (captures the current behavior of the code)
//    org.junit.Assert.assertNull(attackAlgorithmId14);
//    
//    // Regression assertion (captures the current behavior of the code)
//    org.junit.Assert.assertNotNull(luminosity20);
//    
//    // Regression assertion (captures the current behavior of the code)
//    org.junit.Assert.assertNotNull(id_array26);
//    
//    // Regression assertion (captures the current behavior of the code)
//    org.junit.Assert.assertTrue(b28 == false);
//    org.junit.Assert.assertTrue("'" + partOfDay31 + "' != '" + org.mafagafogigante.dungeon.game.PartOfDay.NIGHT + "'", partOfDay31.equals(org.mafagafogigante.dungeon.game.PartOfDay.NIGHT));
//    
//    // Regression assertion (captures the current behavior of the code)
//    org.junit.Assert.assertNotNull(luminosity32);
//    
//    // Regression assertion (captures the current behavior of the code)
//    org.junit.Assert.assertNotNull(name33);
//    
//    // Regression assertion (captures the current behavior of the code)
//    org.junit.Assert.assertTrue("'" + str35 + "' != '" + "a few Nights"+ "'", str35.equals("a few Nights"));
//    
//    // Regression assertion (captures the current behavior of the code)
//    org.junit.Assert.assertNull(weight38);
//
//  }

  @Test
  public void test396() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test396"); }

    org.mafagafogigante.dungeon.entity.items.ItemPreset itemPreset0 = new org.mafagafogigante.dungeon.entity.items.ItemPreset();
    org.mafagafogigante.dungeon.util.Percentage percentage1 = itemPreset0.getHitRate();
    org.mafagafogigante.dungeon.game.Id id2 = itemPreset0.getId();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(percentage1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(id2);

  }

  @Test
  public void test397() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test397"); }

    org.mafagafogigante.dungeon.date.Date date3 = new org.mafagafogigante.dungeon.date.Date((long)82800, 60L, (long)0);
    java.lang.String str4 = date3.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "82800-10-01 00:00:00"+ "'", str4.equals("82800-10-01 00:00:00"));

  }

  @Test
  public void test398() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test398"); }

    org.mafagafogigante.dungeon.game.LocationPreset locationPreset0 = null;
    org.mafagafogigante.dungeon.game.World world1 = null;
    org.mafagafogigante.dungeon.game.BlockedEntrances blockedEntrances2 = new org.mafagafogigante.dungeon.game.BlockedEntrances();
    org.mafagafogigante.dungeon.game.Direction direction3 = org.mafagafogigante.dungeon.game.Direction.EAST;
    boolean b5 = direction3.equalsIgnoreCase("");
    blockedEntrances2.block(direction3);
    org.mafagafogigante.dungeon.game.BlockedEntrances blockedEntrances7 = new org.mafagafogigante.dungeon.game.BlockedEntrances(blockedEntrances2);
    org.mafagafogigante.dungeon.game.Direction direction8 = org.mafagafogigante.dungeon.game.Direction.EAST;
    org.mafagafogigante.dungeon.game.Direction direction9 = direction8.invert();
    blockedEntrances7.block(direction9);
    org.mafagafogigante.dungeon.game.Direction direction11 = org.mafagafogigante.dungeon.game.Direction.EAST;
    java.lang.String str12 = direction11.toString();
    java.lang.String str13 = direction11.toString();
    blockedEntrances7.block(direction11);
    org.mafagafogigante.dungeon.game.Point point15 = direction11.getOffset();
    // The following exception was thrown during execution in test generation
    try {
    org.mafagafogigante.dungeon.game.Location location16 = new org.mafagafogigante.dungeon.game.Location(locationPreset0, world1, point15);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    org.junit.Assert.assertTrue("'" + direction3 + "' != '" + org.mafagafogigante.dungeon.game.Direction.EAST + "'", direction3.equals(org.mafagafogigante.dungeon.game.Direction.EAST));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    org.junit.Assert.assertTrue("'" + direction8 + "' != '" + org.mafagafogigante.dungeon.game.Direction.EAST + "'", direction8.equals(org.mafagafogigante.dungeon.game.Direction.EAST));
    org.junit.Assert.assertTrue("'" + direction9 + "' != '" + org.mafagafogigante.dungeon.game.Direction.WEST + "'", direction9.equals(org.mafagafogigante.dungeon.game.Direction.WEST));
    org.junit.Assert.assertTrue("'" + direction11 + "' != '" + org.mafagafogigante.dungeon.game.Direction.EAST + "'", direction11.equals(org.mafagafogigante.dungeon.game.Direction.EAST));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "East"+ "'", str12.equals("East"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "East"+ "'", str13.equals("East"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(point15);

  }

  @Test
  public void test399() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test399"); }

    java.lang.String[] str_array3 = new java.lang.String[] { "Damaged", "visibilityCriteria=VisibilityCriteria{[]}", "hi!" };
    java.util.ArrayList<java.lang.String> arraylist_str4 = new java.util.ArrayList<java.lang.String>();
    boolean b5 = java.util.Collections.addAll((java.util.Collection<java.lang.String>)arraylist_str4, str_array3);
    org.mafagafogigante.dungeon.io.Split split6 = org.mafagafogigante.dungeon.io.Split.splitOnOn((java.util.List<java.lang.String>)arraylist_str4);
    java.util.List<java.lang.String> list_str7 = split6.getBefore();
    org.mafagafogigante.dungeon.io.Split split8 = org.mafagafogigante.dungeon.io.Split.splitOnOn(list_str7);
    org.mafagafogigante.dungeon.io.Split split9 = org.mafagafogigante.dungeon.io.Split.splitOnOn(list_str7);
    org.mafagafogigante.dungeon.io.Split split10 = org.mafagafogigante.dungeon.io.Split.splitOnOn(list_str7);
    java.util.List<java.lang.String> list_str11 = split10.getBefore();
    java.util.List<java.lang.String> list_str12 = split10.getBefore();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(split6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_str7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(split8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(split9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(split10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_str11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_str12);

  }

  @Test
  public void test400() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test400"); }

    org.mafagafogigante.dungeon.entity.items.ItemPreset itemPreset0 = new org.mafagafogigante.dungeon.entity.items.ItemPreset();
    org.mafagafogigante.dungeon.entity.Integrity integrity1 = itemPreset0.getIntegrity();
    org.mafagafogigante.dungeon.entity.Integrity integrity2 = null;
    itemPreset0.setIntegrity(integrity2);
    org.mafagafogigante.dungeon.util.Percentage percentage4 = itemPreset0.getVisibility();
    java.lang.String str5 = itemPreset0.getType();
    itemPreset0.setIntegrityDecrementOnHit((int)(short)100);
    org.mafagafogigante.dungeon.entity.TagSet<org.mafagafogigante.dungeon.entity.items.Item.Tag> tagset_tag8 = itemPreset0.getTagSet();
    org.mafagafogigante.dungeon.entity.Integrity integrity11 = new org.mafagafogigante.dungeon.entity.Integrity((int)(byte)1, (int)(byte)0);
    itemPreset0.setIntegrity(integrity11);
    org.mafagafogigante.dungeon.game.PartOfDay partOfDay13 = org.mafagafogigante.dungeon.game.PartOfDay.NIGHT;
    org.mafagafogigante.dungeon.entity.Luminosity luminosity14 = partOfDay13.getLuminosity();
    org.mafagafogigante.dungeon.game.Name name15 = partOfDay13.getName();
    java.lang.String str17 = name15.getQuantifiedName((int)'a');
    java.lang.String str18 = name15.getSingular();
    java.lang.String str19 = name15.toString();
    java.lang.String str21 = name15.getQuantifiedName((int)(short)10);
    java.lang.String str22 = name15.getSingular();
    itemPreset0.setName(name15);
    java.lang.String str24 = name15.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(integrity1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(percentage4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(tagset_tag8);
    org.junit.Assert.assertTrue("'" + partOfDay13 + "' != '" + org.mafagafogigante.dungeon.game.PartOfDay.NIGHT + "'", partOfDay13.equals(org.mafagafogigante.dungeon.game.PartOfDay.NIGHT));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(luminosity14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(name15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "a few Nights"+ "'", str17.equals("a few Nights"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "Night"+ "'", str18.equals("Night"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "Night"+ "'", str19.equals("Night"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "a few Nights"+ "'", str21.equals("a few Nights"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "Night"+ "'", str22.equals("Night"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str24 + "' != '" + "Night"+ "'", str24.equals("Night"));

  }

  @Test
  public void test401() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test401"); }

    org.mafagafogigante.dungeon.stats.Statistics statistics0 = new org.mafagafogigante.dungeon.stats.Statistics();
    org.mafagafogigante.dungeon.stats.BattleStatistics battleStatistics1 = statistics0.getBattleStatistics();
    org.mafagafogigante.dungeon.util.CounterMap<org.mafagafogigante.dungeon.stats.CauseOfDeath> countermap_causeOfDeath2 = battleStatistics1.getKillsByCauseOfDeath();
    org.mafagafogigante.dungeon.util.CounterMap<org.mafagafogigante.dungeon.stats.CauseOfDeath> countermap_causeOfDeath3 = battleStatistics1.getKillsByCauseOfDeath();
    org.mafagafogigante.dungeon.stats.BattleStatistics battleStatistics4 = new org.mafagafogigante.dungeon.stats.BattleStatistics();
    org.mafagafogigante.dungeon.achievements.BattleStatisticsRequirement battleStatisticsRequirement5 = null;
    boolean b6 = battleStatistics4.satisfies(battleStatisticsRequirement5);
    org.mafagafogigante.dungeon.achievements.BattleStatisticsQuery battleStatisticsQuery7 = new org.mafagafogigante.dungeon.achievements.BattleStatisticsQuery();
    org.mafagafogigante.dungeon.achievements.BattleStatisticsRequirement battleStatisticsRequirement9 = new org.mafagafogigante.dungeon.achievements.BattleStatisticsRequirement(battleStatisticsQuery7, (int)(byte)100);
    boolean b10 = battleStatistics4.satisfies(battleStatisticsRequirement9);
    boolean b11 = battleStatistics1.satisfies(battleStatisticsRequirement9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(battleStatistics1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(countermap_causeOfDeath2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(countermap_causeOfDeath3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);

  }

  @Test
  public void test402() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test402"); }

    // The following exception was thrown during execution in test generation
    try {
    org.mafagafogigante.dungeon.entity.items.IntegrityState integrityState2 = org.mafagafogigante.dungeon.entity.items.IntegrityState.getIntegrityState(152, (int)(byte)1);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  @Test
  public void test403() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test403"); }

    org.mafagafogigante.dungeon.stats.BattleStatistics battleStatistics0 = new org.mafagafogigante.dungeon.stats.BattleStatistics();
    org.mafagafogigante.dungeon.achievements.BattleStatisticsRequirement battleStatisticsRequirement1 = null;
    boolean b2 = battleStatistics0.satisfies(battleStatisticsRequirement1);
    java.lang.String str3 = battleStatistics0.toString();
    org.mafagafogigante.dungeon.util.CounterMap<org.mafagafogigante.dungeon.stats.CauseOfDeath> countermap_causeOfDeath4 = battleStatistics0.getKillsByCauseOfDeath();
    java.lang.String str5 = countermap_causeOfDeath4.toString();
    boolean b6 = countermap_causeOfDeath4.isNotEmpty();
    java.util.Iterator<org.mafagafogigante.dungeon.stats.CauseOfDeath> iterator_causeOfDeath7 = countermap_causeOfDeath4.iterator();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "BattleStatistics{records=CounterMap{map={}}}"+ "'", str3.equals("BattleStatistics{records=CounterMap{map={}}}"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(countermap_causeOfDeath4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "CounterMap{map={}}"+ "'", str5.equals("CounterMap{map={}}"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_causeOfDeath7);

  }

  @Test
  public void test404() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test404"); }

    org.mafagafogigante.dungeon.date.Date date3 = new org.mafagafogigante.dungeon.date.Date(10L, 100L, 100L);
    org.mafagafogigante.dungeon.date.Date date7 = new org.mafagafogigante.dungeon.date.Date(10L, 100L, 100L);
    int i8 = date3.compareTo(date7);
    org.mafagafogigante.dungeon.game.PartOfDay partOfDay9 = org.mafagafogigante.dungeon.game.PartOfDay.getCorrespondingConstant(date3);
    long long10 = date3.getYear();
    long long11 = date3.getMonth();
    org.mafagafogigante.dungeon.game.PartOfDay partOfDay12 = org.mafagafogigante.dungeon.game.PartOfDay.getCorrespondingConstant(date3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 0);
    org.junit.Assert.assertTrue("'" + partOfDay9 + "' != '" + org.mafagafogigante.dungeon.game.PartOfDay.MIDNIGHT + "'", partOfDay9.equals(org.mafagafogigante.dungeon.game.PartOfDay.MIDNIGHT));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long10 == 10L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long11 == 10L);
    org.junit.Assert.assertTrue("'" + partOfDay12 + "' != '" + org.mafagafogigante.dungeon.game.PartOfDay.MIDNIGHT + "'", partOfDay12.equals(org.mafagafogigante.dungeon.game.PartOfDay.MIDNIGHT));

  }

  @Test
  public void test405() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test405"); }

    org.mafagafogigante.dungeon.world.VisibilityCriterion[] visibilityCriterion_array0 = new org.mafagafogigante.dungeon.world.VisibilityCriterion[] {  };
    org.mafagafogigante.dungeon.world.VisibilityCriteria visibilityCriteria1 = new org.mafagafogigante.dungeon.world.VisibilityCriteria(visibilityCriterion_array0);
    org.mafagafogigante.dungeon.entity.creatures.Creature creature2 = null;
    org.mafagafogigante.dungeon.entity.creatures.Observer observer3 = new org.mafagafogigante.dungeon.entity.creatures.Observer(creature2);
    boolean b4 = visibilityCriteria1.isMetBy(observer3);
    org.mafagafogigante.dungeon.world.VisibilityCriterion[] visibilityCriterion_array5 = new org.mafagafogigante.dungeon.world.VisibilityCriterion[] {  };
    org.mafagafogigante.dungeon.world.VisibilityCriteria visibilityCriteria6 = new org.mafagafogigante.dungeon.world.VisibilityCriteria(visibilityCriterion_array5);
    org.mafagafogigante.dungeon.entity.creatures.Creature creature7 = null;
    org.mafagafogigante.dungeon.entity.creatures.Observer observer8 = new org.mafagafogigante.dungeon.entity.creatures.Observer(creature7);
    boolean b9 = visibilityCriteria6.isMetBy(observer8);
    org.mafagafogigante.dungeon.entity.items.Item[] item_array10 = new org.mafagafogigante.dungeon.entity.items.Item[] {  };
    java.util.ArrayList<org.mafagafogigante.dungeon.entity.items.Item> arraylist_item11 = new java.util.ArrayList<org.mafagafogigante.dungeon.entity.items.Item>();
    boolean b12 = java.util.Collections.addAll((java.util.Collection<org.mafagafogigante.dungeon.entity.items.Item>)arraylist_item11, item_array10);
    org.mafagafogigante.dungeon.game.DungeonString dungeonString14 = new org.mafagafogigante.dungeon.game.DungeonString("hi!");
    java.lang.String[] str_array19 = new java.lang.String[] { "hi!", "Damaged", "BattleStatistics{records=CounterMap{map={}}}", "" };
    dungeonString14.append(str_array19);
    observer8.writeItemSight((java.util.List<org.mafagafogigante.dungeon.entity.items.Item>)arraylist_item11, dungeonString14);
    org.mafagafogigante.dungeon.entity.creatures.Creature[] creature_array22 = new org.mafagafogigante.dungeon.entity.creatures.Creature[] {  };
    java.util.ArrayList<org.mafagafogigante.dungeon.entity.creatures.Creature> arraylist_creature23 = new java.util.ArrayList<org.mafagafogigante.dungeon.entity.creatures.Creature>();
    boolean b24 = java.util.Collections.addAll((java.util.Collection<org.mafagafogigante.dungeon.entity.creatures.Creature>)arraylist_creature23, creature_array22);
    org.mafagafogigante.dungeon.game.DungeonString dungeonString26 = new org.mafagafogigante.dungeon.game.DungeonString("hi!");
    java.lang.String[] str_array31 = new java.lang.String[] { "hi!", "Damaged", "BattleStatistics{records=CounterMap{map={}}}", "" };
    dungeonString26.append(str_array31);
    java.lang.String str33 = dungeonString26.toString();
    org.mafagafogigante.dungeon.game.Point point37 = new org.mafagafogigante.dungeon.game.Point(10, (int)'a', 0);
    java.lang.String[] str_array40 = new java.lang.String[] { "", "" };
    org.mafagafogigante.dungeon.util.Table table41 = new org.mafagafogigante.dungeon.util.Table(str_array40);
    boolean b42 = point37.equals((java.lang.Object)str_array40);
    dungeonString26.append(str_array40);
    observer8.writeCreatureSight((java.util.List<org.mafagafogigante.dungeon.entity.creatures.Creature>)arraylist_creature23, dungeonString26);
    org.mafagafogigante.dungeon.game.DungeonString dungeonString46 = new org.mafagafogigante.dungeon.game.DungeonString("");
    java.util.List<org.mafagafogigante.dungeon.game.ColoredString> list_coloredString47 = dungeonString46.toColoredStringList();
    observer3.writeCreatureSight((java.util.List<org.mafagafogigante.dungeon.entity.creatures.Creature>)arraylist_creature23, dungeonString46);
    int i49 = dungeonString46.getLength();
    dungeonString46.resetColor();
    org.mafagafogigante.dungeon.io.Writer.write((org.mafagafogigante.dungeon.game.Writable)dungeonString46);
    org.mafagafogigante.dungeon.entity.items.Item[] item_array52 = new org.mafagafogigante.dungeon.entity.items.Item[] {  };
    java.util.ArrayList<org.mafagafogigante.dungeon.entity.items.Item> arraylist_item53 = new java.util.ArrayList<org.mafagafogigante.dungeon.entity.items.Item>();
    boolean b54 = java.util.Collections.addAll((java.util.Collection<org.mafagafogigante.dungeon.entity.items.Item>)arraylist_item53, item_array52);
    org.mafagafogigante.dungeon.game.DungeonString dungeonString56 = new org.mafagafogigante.dungeon.game.DungeonString("hi!");
    java.lang.String[] str_array61 = new java.lang.String[] { "hi!", "Damaged", "BattleStatistics{records=CounterMap{map={}}}", "" };
    dungeonString56.append(str_array61);
    java.util.List<org.mafagafogigante.dungeon.entity.items.Item> list_item63 = org.mafagafogigante.dungeon.entity.creatures.HeroUtils.findItems((java.util.List<org.mafagafogigante.dungeon.entity.items.Item>)arraylist_item53, str_array61);
    org.mafagafogigante.dungeon.game.DungeonString dungeonString65 = new org.mafagafogigante.dungeon.game.DungeonString("hi!");
    java.lang.String[] str_array70 = new java.lang.String[] { "hi!", "Damaged", "BattleStatistics{records=CounterMap{map={}}}", "" };
    dungeonString65.append(str_array70);
    java.lang.String str72 = dungeonString65.toString();
    org.mafagafogigante.dungeon.game.Point point76 = new org.mafagafogigante.dungeon.game.Point(10, (int)'a', 0);
    java.lang.String[] str_array79 = new java.lang.String[] { "", "" };
    org.mafagafogigante.dungeon.util.Table table80 = new org.mafagafogigante.dungeon.util.Table(str_array79);
    boolean b81 = point76.equals((java.lang.Object)str_array79);
    dungeonString65.append(str_array79);
    java.util.List<org.mafagafogigante.dungeon.entity.items.Item> list_item83 = org.mafagafogigante.dungeon.entity.creatures.HeroUtils.findItems(list_item63, str_array79);
    org.mafagafogigante.dungeon.wiki.WikiSearcher.search(str_array79);
    dungeonString46.append(str_array79);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(visibilityCriterion_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(visibilityCriterion_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(item_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(creature_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str33 + "' != '" + "DungeonString{coloredStringList=[ColoredString{string='hi!hi!DamagedBattleStatistics{records=CounterMap{map={}}}', color=java.awt.Color[r=192,g=192,b=192]}], currentColor=java.awt.Color[r=192,g=192,b=192]}"+ "'", str33.equals("DungeonString{coloredStringList=[ColoredString{string='hi!hi!DamagedBattleStatistics{records=CounterMap{map={}}}', color=java.awt.Color[r=192,g=192,b=192]}], currentColor=java.awt.Color[r=192,g=192,b=192]}"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_coloredString47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i49 == 28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(item_array52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_item63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str72 + "' != '" + "DungeonString{coloredStringList=[ColoredString{string='hi!hi!DamagedBattleStatistics{records=CounterMap{map={}}}', color=java.awt.Color[r=192,g=192,b=192]}], currentColor=java.awt.Color[r=192,g=192,b=192]}"+ "'", str72.equals("DungeonString{coloredStringList=[ColoredString{string='hi!hi!DamagedBattleStatistics{records=CounterMap{map={}}}', color=java.awt.Color[r=192,g=192,b=192]}], currentColor=java.awt.Color[r=192,g=192,b=192]}"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array79);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b81 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_item83);

  }

  @Test
  public void test406() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test406"); }

    org.mafagafogigante.dungeon.date.Date date5 = new org.mafagafogigante.dungeon.date.Date(10L, 100L, 100L);
    org.mafagafogigante.dungeon.date.Date date9 = new org.mafagafogigante.dungeon.date.Date(10L, 100L, 100L);
    int i10 = date5.compareTo(date9);
    org.mafagafogigante.dungeon.game.PartOfDay partOfDay11 = org.mafagafogigante.dungeon.game.PartOfDay.getCorrespondingConstant(date5);
    java.lang.String[] str_array17 = new java.lang.String[] { "hi!", "visibilityCriteria=VisibilityCriteria{[]}", "visibilityCriteria=VisibilityCriteria{[]}", "Damaged", "hi!" };
    org.mafagafogigante.dungeon.util.Table table18 = new org.mafagafogigante.dungeon.util.Table(str_array17);
    java.util.List<org.mafagafogigante.dungeon.game.ColoredString> list_coloredString19 = table18.toColoredStringList();
    org.mafagafogigante.dungeon.game.ColoredString coloredString20 = org.mafagafogigante.dungeon.game.Random.select(list_coloredString19);
    boolean b21 = date5.equals((java.lang.Object)coloredString20);
    java.awt.Color color22 = coloredString20.getColor();
    org.mafagafogigante.dungeon.game.LocationDescription locationDescription23 = new org.mafagafogigante.dungeon.game.LocationDescription('a', color22);
    org.mafagafogigante.dungeon.game.DungeonString dungeonString24 = new org.mafagafogigante.dungeon.game.DungeonString("Evening", color22);
    dungeonString24.resetColor();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 0);
    org.junit.Assert.assertTrue("'" + partOfDay11 + "' != '" + org.mafagafogigante.dungeon.game.PartOfDay.MIDNIGHT + "'", partOfDay11.equals(org.mafagafogigante.dungeon.game.PartOfDay.MIDNIGHT));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_coloredString19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(coloredString20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color22);

  }

  @Test
  public void test407() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test407"); }

    org.mafagafogigante.dungeon.date.Date date5 = new org.mafagafogigante.dungeon.date.Date(10L, 100L, 100L);
    org.mafagafogigante.dungeon.date.Date date9 = new org.mafagafogigante.dungeon.date.Date(10L, 100L, 100L);
    int i10 = date5.compareTo(date9);
    org.mafagafogigante.dungeon.game.PartOfDay partOfDay11 = org.mafagafogigante.dungeon.game.PartOfDay.getCorrespondingConstant(date5);
    java.lang.String[] str_array17 = new java.lang.String[] { "hi!", "visibilityCriteria=VisibilityCriteria{[]}", "visibilityCriteria=VisibilityCriteria{[]}", "Damaged", "hi!" };
    org.mafagafogigante.dungeon.util.Table table18 = new org.mafagafogigante.dungeon.util.Table(str_array17);
    java.util.List<org.mafagafogigante.dungeon.game.ColoredString> list_coloredString19 = table18.toColoredStringList();
    org.mafagafogigante.dungeon.game.ColoredString coloredString20 = org.mafagafogigante.dungeon.game.Random.select(list_coloredString19);
    boolean b21 = date5.equals((java.lang.Object)coloredString20);
    java.awt.Color color22 = coloredString20.getColor();
    org.mafagafogigante.dungeon.game.ColoredString coloredString23 = new org.mafagafogigante.dungeon.game.ColoredString("User: Nicholas\nTime: 15:42:12\nDate: 2017-04-09\nJava: Java version 1.8.0_121 by Oracle Corporation\nHeap: Using 41.5 MiB out of the allocated 154.5 MiB\nOS: Windows 10 (amd64) 10.0", color22);
    java.awt.Color color24 = coloredString23.getColor();
    java.awt.Color color25 = coloredString23.getColor();
    org.mafagafogigante.dungeon.game.DungeonString dungeonString26 = new org.mafagafogigante.dungeon.game.DungeonString("hi!", color25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 0);
    org.junit.Assert.assertTrue("'" + partOfDay11 + "' != '" + org.mafagafogigante.dungeon.game.PartOfDay.MIDNIGHT + "'", partOfDay11.equals(org.mafagafogigante.dungeon.game.PartOfDay.MIDNIGHT));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_coloredString19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(coloredString20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color25);

  }

  @Test
  public void test408() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test408"); }

    java.awt.Color color1 = null;
    org.mafagafogigante.dungeon.game.LocationDescription locationDescription2 = new org.mafagafogigante.dungeon.game.LocationDescription('4', color1);
    java.awt.Color color3 = locationDescription2.getColor();
    java.lang.String str4 = locationDescription2.toString();
    java.lang.String str5 = locationDescription2.toString();
    java.lang.String str6 = locationDescription2.getInfo();
    java.lang.String str7 = locationDescription2.getInfo();
    locationDescription2.setInfo("Disabled LightSource of luminosity of null");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(color3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "LocationDescription{symbol=4, color=null, info='You don't discover anything.'}"+ "'", str4.equals("LocationDescription{symbol=4, color=null, info='You don't discover anything.'}"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "LocationDescription{symbol=4, color=null, info='You don't discover anything.'}"+ "'", str5.equals("LocationDescription{symbol=4, color=null, info='You don't discover anything.'}"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "You don't discover anything."+ "'", str6.equals("You don't discover anything."));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "You don't discover anything."+ "'", str7.equals("You don't discover anything."));

  }

  @Test
  public void test409() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test409"); }

    org.mafagafogigante.dungeon.entity.items.ItemPreset itemPreset0 = new org.mafagafogigante.dungeon.entity.items.ItemPreset();
    org.mafagafogigante.dungeon.entity.Integrity integrity1 = itemPreset0.getIntegrity();
    org.mafagafogigante.dungeon.util.Percentage percentage2 = itemPreset0.getVisibility();
    java.lang.String str3 = itemPreset0.getType();
    itemPreset0.setDrinkableHealing(10);
    org.mafagafogigante.dungeon.game.PartOfDay partOfDay6 = org.mafagafogigante.dungeon.game.PartOfDay.NIGHT;
    org.mafagafogigante.dungeon.entity.Luminosity luminosity7 = partOfDay6.getLuminosity();
    org.mafagafogigante.dungeon.game.Name name8 = partOfDay6.getName();
    java.lang.String str10 = name8.getQuantifiedName((int)'a');
    java.lang.String str11 = name8.getSingular();
    java.lang.String str12 = name8.toString();
    java.lang.String str13 = name8.getSingular();
    itemPreset0.setName(name8);
    org.mafagafogigante.dungeon.entity.items.ItemPreset itemPreset15 = new org.mafagafogigante.dungeon.entity.items.ItemPreset();
    org.mafagafogigante.dungeon.entity.Integrity integrity16 = itemPreset15.getIntegrity();
    org.mafagafogigante.dungeon.entity.Integrity integrity17 = null;
    itemPreset15.setIntegrity(integrity17);
    org.mafagafogigante.dungeon.util.Percentage percentage19 = itemPreset15.getVisibility();
    java.lang.String str20 = itemPreset15.getType();
    itemPreset15.setIntegrityDecrementOnHit((int)(short)100);
    org.mafagafogigante.dungeon.util.Percentage percentage24 = new org.mafagafogigante.dungeon.util.Percentage((double)57);
    itemPreset15.setVisibility(percentage24);
    org.mafagafogigante.dungeon.game.Id id26 = null;
    itemPreset15.setId(id26);
    itemPreset15.setPutrefactionPeriod((long)(short)1);
    org.mafagafogigante.dungeon.entity.items.Item.Tag tag30 = org.mafagafogigante.dungeon.entity.items.Item.Tag.DECOMPOSES;
    boolean b31 = itemPreset15.hasTag(tag30);
    itemPreset0.addTag(tag30);
    org.mafagafogigante.dungeon.entity.Entity[] entity_array33 = new org.mafagafogigante.dungeon.entity.Entity[] {  };
    java.util.ArrayList<org.mafagafogigante.dungeon.entity.Entity> arraylist_entity34 = new java.util.ArrayList<org.mafagafogigante.dungeon.entity.Entity>();
    boolean b35 = java.util.Collections.addAll((java.util.Collection<org.mafagafogigante.dungeon.entity.Entity>)arraylist_entity34, entity_array33);
    org.mafagafogigante.dungeon.entity.Luminosity luminosity36 = org.mafagafogigante.dungeon.entity.Luminosity.resultantLuminosity((java.util.Collection<org.mafagafogigante.dungeon.entity.Entity>)arraylist_entity34);
    org.mafagafogigante.dungeon.util.Percentage percentage37 = luminosity36.toPercentage();
    itemPreset0.setLuminosity(luminosity36);
    java.lang.String str39 = luminosity36.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(integrity1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(percentage2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str3);
    org.junit.Assert.assertTrue("'" + partOfDay6 + "' != '" + org.mafagafogigante.dungeon.game.PartOfDay.NIGHT + "'", partOfDay6.equals(org.mafagafogigante.dungeon.game.PartOfDay.NIGHT));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(luminosity7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(name8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "a few Nights"+ "'", str10.equals("a few Nights"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "Night"+ "'", str11.equals("Night"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "Night"+ "'", str12.equals("Night"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "Night"+ "'", str13.equals("Night"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(integrity16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(percentage19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str20);
    org.junit.Assert.assertTrue("'" + tag30 + "' != '" + org.mafagafogigante.dungeon.entity.items.Item.Tag.DECOMPOSES + "'", tag30.equals(org.mafagafogigante.dungeon.entity.items.Item.Tag.DECOMPOSES));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(entity_array33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(luminosity36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(percentage37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str39 + "' != '" + "Luminosity of 0.00%"+ "'", str39.equals("Luminosity of 0.00%"));

  }

  @Test
  public void test410() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test410"); }

    org.mafagafogigante.dungeon.game.DungeonString dungeonString1 = new org.mafagafogigante.dungeon.game.DungeonString("hi!");
    java.lang.String[] str_array6 = new java.lang.String[] { "hi!", "Damaged", "BattleStatistics{records=CounterMap{map={}}}", "" };
    dungeonString1.append(str_array6);
    org.mafagafogigante.dungeon.gui.WritingSpecifications writingSpecifications8 = null;
    org.mafagafogigante.dungeon.io.Writer.write((org.mafagafogigante.dungeon.game.Writable)dungeonString1, writingSpecifications8);
    org.mafagafogigante.dungeon.io.Writer.write((org.mafagafogigante.dungeon.game.Writable)dungeonString1);
    org.mafagafogigante.dungeon.gui.WritingSpecifications writingSpecifications13 = new org.mafagafogigante.dungeon.gui.WritingSpecifications(false, 32);
    boolean b14 = writingSpecifications13.shouldWait();
    int i15 = writingSpecifications13.getWait();
    int i16 = writingSpecifications13.getWait();
    org.mafagafogigante.dungeon.io.Writer.write((org.mafagafogigante.dungeon.game.Writable)dungeonString1, writingSpecifications13);
    boolean b18 = writingSpecifications13.shouldWait();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);

  }

  @Test
  public void test411() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test411"); }

    org.mafagafogigante.dungeon.entity.creatures.Creature creature0 = null;
    org.mafagafogigante.dungeon.entity.items.CreatureInventory creatureInventory3 = new org.mafagafogigante.dungeon.entity.items.CreatureInventory(creature0, 32, (double)'4');
    org.mafagafogigante.dungeon.entity.Weight weight4 = creatureInventory3.getWeight();
    int i5 = creatureInventory3.getItemCount();
    org.mafagafogigante.dungeon.entity.items.Item item6 = null;
    boolean b7 = creatureInventory3.hasItem(item6);
    org.mafagafogigante.dungeon.entity.items.Item item8 = null;
    // The following exception was thrown during execution in test generation
    try {
    creatureInventory3.removeItem(item8);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(weight4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);

  }

  @Test
  public void test412() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test412"); }

    org.mafagafogigante.dungeon.entity.creatures.Creature creature1 = null;
    org.mafagafogigante.dungeon.entity.creatures.CreatureHealth creatureHealth2 = org.mafagafogigante.dungeon.entity.creatures.CreatureHealth.makeCreatureHealth(100, creature1);
    int i3 = creatureHealth2.getMaximum();
    boolean b4 = creatureHealth2.isDead();
    creatureHealth2.incrementBy(5);
    boolean b7 = creatureHealth2.isDead();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(creatureHealth2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);

  }

  @Test
  public void test413() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test413"); }

    org.mafagafogigante.dungeon.entity.items.ItemPreset itemPreset0 = new org.mafagafogigante.dungeon.entity.items.ItemPreset();
    org.mafagafogigante.dungeon.entity.Integrity integrity1 = itemPreset0.getIntegrity();
    org.mafagafogigante.dungeon.entity.Integrity integrity2 = null;
    itemPreset0.setIntegrity(integrity2);
    org.mafagafogigante.dungeon.entity.Integrity integrity4 = itemPreset0.getIntegrity();
    org.mafagafogigante.dungeon.util.Percentage percentage5 = itemPreset0.getHitRate();
    itemPreset0.setNutrition((int)(short)1);
    int i8 = itemPreset0.getDrinkableHealing();
    itemPreset0.setPutrefactionPeriod(60L);
    int i11 = itemPreset0.getNutrition();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(integrity1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(integrity4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(percentage5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 1);

  }

  @Test
  public void test414() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test414"); }

    org.mafagafogigante.dungeon.entity.creatures.CreaturePreset creaturePreset0 = new org.mafagafogigante.dungeon.entity.creatures.CreaturePreset();
    org.mafagafogigante.dungeon.game.Id id1 = null;
    creaturePreset0.setWeaponId(id1);
    int i3 = creaturePreset0.getInventoryItemLimit();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);

  }

  @Test
  public void test415() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test415"); }

    org.mafagafogigante.dungeon.world.TimeVisibilityCriterion timeVisibilityCriterion2 = new org.mafagafogigante.dungeon.world.TimeVisibilityCriterion((int)'4', (int)(short)10);
    org.mafagafogigante.dungeon.world.VisibilityCriterion[] visibilityCriterion_array3 = new org.mafagafogigante.dungeon.world.VisibilityCriterion[] {  };
    org.mafagafogigante.dungeon.world.VisibilityCriteria visibilityCriteria4 = new org.mafagafogigante.dungeon.world.VisibilityCriteria(visibilityCriterion_array3);
    org.mafagafogigante.dungeon.entity.creatures.Creature creature5 = null;
    org.mafagafogigante.dungeon.entity.creatures.Observer observer6 = new org.mafagafogigante.dungeon.entity.creatures.Observer(creature5);
    boolean b7 = visibilityCriteria4.isMetBy(observer6);
    org.mafagafogigante.dungeon.world.VisibilityCriterion[] visibilityCriterion_array8 = new org.mafagafogigante.dungeon.world.VisibilityCriterion[] {  };
    org.mafagafogigante.dungeon.world.VisibilityCriteria visibilityCriteria9 = new org.mafagafogigante.dungeon.world.VisibilityCriteria(visibilityCriterion_array8);
    org.mafagafogigante.dungeon.entity.creatures.Creature creature10 = null;
    org.mafagafogigante.dungeon.entity.creatures.Observer observer11 = new org.mafagafogigante.dungeon.entity.creatures.Observer(creature10);
    boolean b12 = visibilityCriteria9.isMetBy(observer11);
    org.mafagafogigante.dungeon.entity.items.Item[] item_array13 = new org.mafagafogigante.dungeon.entity.items.Item[] {  };
    java.util.ArrayList<org.mafagafogigante.dungeon.entity.items.Item> arraylist_item14 = new java.util.ArrayList<org.mafagafogigante.dungeon.entity.items.Item>();
    boolean b15 = java.util.Collections.addAll((java.util.Collection<org.mafagafogigante.dungeon.entity.items.Item>)arraylist_item14, item_array13);
    org.mafagafogigante.dungeon.game.DungeonString dungeonString17 = new org.mafagafogigante.dungeon.game.DungeonString("hi!");
    java.lang.String[] str_array22 = new java.lang.String[] { "hi!", "Damaged", "BattleStatistics{records=CounterMap{map={}}}", "" };
    dungeonString17.append(str_array22);
    observer11.writeItemSight((java.util.List<org.mafagafogigante.dungeon.entity.items.Item>)arraylist_item14, dungeonString17);
    org.mafagafogigante.dungeon.entity.creatures.Creature[] creature_array25 = new org.mafagafogigante.dungeon.entity.creatures.Creature[] {  };
    java.util.ArrayList<org.mafagafogigante.dungeon.entity.creatures.Creature> arraylist_creature26 = new java.util.ArrayList<org.mafagafogigante.dungeon.entity.creatures.Creature>();
    boolean b27 = java.util.Collections.addAll((java.util.Collection<org.mafagafogigante.dungeon.entity.creatures.Creature>)arraylist_creature26, creature_array25);
    org.mafagafogigante.dungeon.game.DungeonString dungeonString29 = new org.mafagafogigante.dungeon.game.DungeonString("hi!");
    java.lang.String[] str_array34 = new java.lang.String[] { "hi!", "Damaged", "BattleStatistics{records=CounterMap{map={}}}", "" };
    dungeonString29.append(str_array34);
    java.lang.String str36 = dungeonString29.toString();
    org.mafagafogigante.dungeon.game.Point point40 = new org.mafagafogigante.dungeon.game.Point(10, (int)'a', 0);
    java.lang.String[] str_array43 = new java.lang.String[] { "", "" };
    org.mafagafogigante.dungeon.util.Table table44 = new org.mafagafogigante.dungeon.util.Table(str_array43);
    boolean b45 = point40.equals((java.lang.Object)str_array43);
    dungeonString29.append(str_array43);
    observer11.writeCreatureSight((java.util.List<org.mafagafogigante.dungeon.entity.creatures.Creature>)arraylist_creature26, dungeonString29);
    org.mafagafogigante.dungeon.game.DungeonString dungeonString49 = new org.mafagafogigante.dungeon.game.DungeonString("");
    java.util.List<org.mafagafogigante.dungeon.game.ColoredString> list_coloredString50 = dungeonString49.toColoredStringList();
    observer6.writeCreatureSight((java.util.List<org.mafagafogigante.dungeon.entity.creatures.Creature>)arraylist_creature26, dungeonString49);
    // The following exception was thrown during execution in test generation
    try {
    boolean b52 = timeVisibilityCriterion2.isMetBy(observer6);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(visibilityCriterion_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(visibilityCriterion_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(item_array13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(creature_array25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str36 + "' != '" + "DungeonString{coloredStringList=[ColoredString{string='hi!hi!DamagedBattleStatistics{records=CounterMap{map={}}}', color=java.awt.Color[r=192,g=192,b=192]}], currentColor=java.awt.Color[r=192,g=192,b=192]}"+ "'", str36.equals("DungeonString{coloredStringList=[ColoredString{string='hi!hi!DamagedBattleStatistics{records=CounterMap{map={}}}', color=java.awt.Color[r=192,g=192,b=192]}], currentColor=java.awt.Color[r=192,g=192,b=192]}"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_coloredString50);

  }

  @Test
  public void test416() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test416"); }

    org.mafagafogigante.dungeon.entity.items.ItemPreset itemPreset0 = new org.mafagafogigante.dungeon.entity.items.ItemPreset();
    org.mafagafogigante.dungeon.entity.Integrity integrity1 = itemPreset0.getIntegrity();
    org.mafagafogigante.dungeon.entity.Integrity integrity2 = null;
    itemPreset0.setIntegrity(integrity2);
    org.mafagafogigante.dungeon.util.Percentage percentage4 = itemPreset0.getVisibility();
    java.lang.String str5 = itemPreset0.getType();
    itemPreset0.setIntegrityDecrementOnHit((int)(short)100);
    org.mafagafogigante.dungeon.entity.TagSet<org.mafagafogigante.dungeon.entity.items.Item.Tag> tagset_tag8 = itemPreset0.getTagSet();
    org.mafagafogigante.dungeon.game.Id id9 = null;
    itemPreset0.setId(id9);
    itemPreset0.setIntegrityDecrementOnEat((int)(short)0);
    itemPreset0.setIntegrityDecrementOnHit(13843);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(integrity1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(percentage4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(tagset_tag8);

  }

  @Test
  public void test417() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test417"); }

    org.mafagafogigante.dungeon.util.CounterMap<java.lang.Comparable<java.lang.String>> countermap_comparable_str0 = new org.mafagafogigante.dungeon.util.CounterMap<java.lang.Comparable<java.lang.String>>();
    java.util.Set<java.lang.Comparable<java.lang.String>> set_comparable_str1 = countermap_comparable_str0.keySet();
    java.util.Set<java.lang.Comparable<java.lang.String>> set_comparable_str2 = countermap_comparable_str0.keySet();
    countermap_comparable_str0.incrementCounter((java.lang.Comparable<java.lang.String>)"ColoredString{string='', color=null}", (java.lang.Integer)2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_comparable_str1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_comparable_str2);

  }

  @Test
  public void test418() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test418"); }

    org.mafagafogigante.dungeon.util.NonNegativeInteger nonNegativeInteger1 = new org.mafagafogigante.dungeon.util.NonNegativeInteger((java.lang.Integer)3600);

  }

  @Test
  public void test419() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test419"); }

    org.mafagafogigante.dungeon.entity.items.ItemPresetFactory[] itemPresetFactory_array0 = new org.mafagafogigante.dungeon.entity.items.ItemPresetFactory[] {  };
    org.mafagafogigante.dungeon.entity.items.ItemFactory itemFactory1 = new org.mafagafogigante.dungeon.entity.items.ItemFactory(itemPresetFactory_array0);
    org.mafagafogigante.dungeon.entity.items.ItemFactory itemFactory2 = new org.mafagafogigante.dungeon.entity.items.ItemFactory(itemPresetFactory_array0);
    org.mafagafogigante.dungeon.entity.items.ItemFactory itemFactory3 = new org.mafagafogigante.dungeon.entity.items.ItemFactory(itemPresetFactory_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(itemPresetFactory_array0);

  }

  @Test
  public void test420() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test420"); }

    org.mafagafogigante.dungeon.entity.items.FoodComponent foodComponent2 = new org.mafagafogigante.dungeon.entity.items.FoodComponent((int)(byte)100, (int)'4');

  }

  @Test
  public void test421() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test421"); }

    org.mafagafogigante.dungeon.entity.Integrity integrity2 = new org.mafagafogigante.dungeon.entity.Integrity(1, 0);
    java.lang.String str3 = integrity2.toString();
    java.lang.String str4 = integrity2.toString();
    boolean b5 = integrity2.isMaximum();
    int i6 = integrity2.getMaximum();
    int i7 = integrity2.getCurrent();
    java.lang.String str8 = integrity2.toString();
    org.mafagafogigante.dungeon.util.Percentage percentage9 = integrity2.toPercentage();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "0/1"+ "'", str3.equals("0/1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "0/1"+ "'", str4.equals("0/1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "0/1"+ "'", str8.equals("0/1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(percentage9);

  }

  @Test
  public void test422() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test422"); }

    org.mafagafogigante.dungeon.entity.creatures.Creature creature0 = null;
    org.mafagafogigante.dungeon.entity.items.CreatureInventory creatureInventory3 = new org.mafagafogigante.dungeon.entity.items.CreatureInventory(creature0, 0, (double)(short)10);
    creatureInventory3.refreshItems();
    org.mafagafogigante.dungeon.entity.Weight weight5 = creatureInventory3.getWeight();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(weight5);

  }

  @Test
  public void test423() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test423"); }

    org.mafagafogigante.dungeon.entity.items.ItemPreset itemPreset0 = new org.mafagafogigante.dungeon.entity.items.ItemPreset();
    itemPreset0.setDrinkableHealing((int)(short)0);
    org.mafagafogigante.dungeon.util.Percentage percentage4 = new org.mafagafogigante.dungeon.util.Percentage((double)57);
    itemPreset0.setVisibility(percentage4);
    org.mafagafogigante.dungeon.entity.Weight weight6 = itemPreset0.getWeight();
    long long7 = itemPreset0.getPutrefactionPeriod();
    org.mafagafogigante.dungeon.entity.Integrity integrity10 = new org.mafagafogigante.dungeon.entity.Integrity(1, 0);
    boolean b11 = integrity10.isMaximum();
    org.mafagafogigante.dungeon.entity.items.Item item12 = null;
    org.mafagafogigante.dungeon.entity.items.ItemIntegrity itemIntegrity13 = org.mafagafogigante.dungeon.entity.items.ItemIntegrity.makeItemIntegrity(integrity10, item12);
    org.mafagafogigante.dungeon.util.Percentage percentage14 = integrity10.toPercentage();
    double d15 = percentage14.toDouble();
    itemPreset0.setVisibility(percentage14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(weight6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long7 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(itemIntegrity13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(percentage14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d15 == 0.0d);

  }

  @Test
  public void test424() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test424"); }

    org.mafagafogigante.dungeon.entity.creatures.CreaturePresetFactory[] creaturePresetFactory_array0 = new org.mafagafogigante.dungeon.entity.creatures.CreaturePresetFactory[] {  };
    org.mafagafogigante.dungeon.entity.creatures.CreatureFactory creatureFactory1 = new org.mafagafogigante.dungeon.entity.creatures.CreatureFactory(creaturePresetFactory_array0);
    java.util.Collection<org.mafagafogigante.dungeon.entity.creatures.CreaturePreset> collection_creaturePreset2 = creatureFactory1.getPresets();
    java.util.Collection<org.mafagafogigante.dungeon.entity.creatures.CreaturePreset> collection_creaturePreset3 = creatureFactory1.getPresets();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(creaturePresetFactory_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection_creaturePreset2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection_creaturePreset3);

  }

  @Test
  public void test425() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test425"); }

    org.mafagafogigante.dungeon.stats.Statistics statistics0 = new org.mafagafogigante.dungeon.stats.Statistics();
    statistics0.writeStatistics();
    org.mafagafogigante.dungeon.achievements.AchievementTracker achievementTracker2 = new org.mafagafogigante.dungeon.achievements.AchievementTracker(statistics0);
    org.mafagafogigante.dungeon.stats.BattleStatistics battleStatistics3 = statistics0.getBattleStatistics();
    org.mafagafogigante.dungeon.stats.BattleStatistics battleStatistics4 = new org.mafagafogigante.dungeon.stats.BattleStatistics();
    org.mafagafogigante.dungeon.achievements.BattleStatisticsRequirement battleStatisticsRequirement5 = null;
    boolean b6 = battleStatistics4.satisfies(battleStatisticsRequirement5);
    java.lang.String str7 = battleStatistics4.toString();
    org.mafagafogigante.dungeon.achievements.BattleStatisticsQuery battleStatisticsQuery8 = new org.mafagafogigante.dungeon.achievements.BattleStatisticsQuery();
    org.mafagafogigante.dungeon.achievements.BattleStatisticsRequirement battleStatisticsRequirement10 = new org.mafagafogigante.dungeon.achievements.BattleStatisticsRequirement(battleStatisticsQuery8, (int)(byte)100);
    boolean b11 = battleStatistics4.satisfies(battleStatisticsRequirement10);
    org.mafagafogigante.dungeon.util.CounterMap<org.mafagafogigante.dungeon.stats.CauseOfDeath> countermap_causeOfDeath12 = battleStatistics4.getKillsByCauseOfDeath();
    org.mafagafogigante.dungeon.achievements.BattleStatisticsQuery battleStatisticsQuery13 = new org.mafagafogigante.dungeon.achievements.BattleStatisticsQuery();
    org.mafagafogigante.dungeon.achievements.BattleStatisticsRequirement battleStatisticsRequirement15 = new org.mafagafogigante.dungeon.achievements.BattleStatisticsRequirement(battleStatisticsQuery13, (int)(byte)100);
    int i16 = battleStatisticsRequirement15.getCount();
    int i17 = battleStatisticsRequirement15.getCount();
    int i18 = battleStatisticsRequirement15.getCount();
    boolean b19 = battleStatistics4.satisfies(battleStatisticsRequirement15);
    boolean b20 = battleStatistics3.satisfies(battleStatisticsRequirement15);
    java.lang.String str21 = battleStatisticsRequirement15.toString();
    int i22 = battleStatisticsRequirement15.getCount();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(battleStatistics3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "BattleStatistics{records=CounterMap{map={}}}"+ "'", str7.equals("BattleStatistics{records=CounterMap{map={}}}"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(countermap_causeOfDeath12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "BattleStatisticsRequirement{query=BattleStatisticsQuery{id=null, type='null', causeOfDeath=null, partOfDay=null}, count=100}"+ "'", str21.equals("BattleStatisticsRequirement{query=BattleStatisticsQuery{id=null, type='null', causeOfDeath=null, partOfDay=null}, count=100}"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i22 == 100);

  }

  @Test
  public void test426() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test426"); }

    org.mafagafogigante.dungeon.game.Id id0 = null;
    org.mafagafogigante.dungeon.stats.CauseOfDeath causeOfDeath2 = org.mafagafogigante.dungeon.stats.CauseOfDeath.getUnarmedCauseOfDeath();
    org.mafagafogigante.dungeon.achievements.BattleStatisticsQuery battleStatisticsQuery3 = new org.mafagafogigante.dungeon.achievements.BattleStatisticsQuery();
    battleStatisticsQuery3.setType("Damaged");
    battleStatisticsQuery3.setType("");
    boolean b8 = causeOfDeath2.equals((java.lang.Object)battleStatisticsQuery3);
    java.lang.String str9 = causeOfDeath2.toString();
    org.mafagafogigante.dungeon.date.Date date13 = new org.mafagafogigante.dungeon.date.Date(10L, 100L, 100L);
    org.mafagafogigante.dungeon.date.Date date17 = new org.mafagafogigante.dungeon.date.Date(10L, 100L, 100L);
    int i18 = date13.compareTo(date17);
    org.mafagafogigante.dungeon.game.PartOfDay partOfDay19 = org.mafagafogigante.dungeon.game.PartOfDay.getCorrespondingConstant(date13);
    long long20 = date13.getYear();
    org.mafagafogigante.dungeon.date.Date date24 = new org.mafagafogigante.dungeon.date.Date(10L, 100L, 100L);
    org.mafagafogigante.dungeon.date.Date date28 = new org.mafagafogigante.dungeon.date.Date(10L, 100L, 100L);
    int i29 = date24.compareTo(date28);
    long long30 = date24.getYear();
    int i31 = date13.compareTo(date24);
    org.mafagafogigante.dungeon.date.DungeonTimeUnit dungeonTimeUnit33 = org.mafagafogigante.dungeon.date.DungeonTimeUnit.HOUR;
    org.mafagafogigante.dungeon.date.Date date34 = date24.minus(35, dungeonTimeUnit33);
    org.mafagafogigante.dungeon.game.PartOfDay partOfDay35 = org.mafagafogigante.dungeon.game.PartOfDay.NIGHT;
    org.mafagafogigante.dungeon.entity.Luminosity luminosity36 = partOfDay35.getLuminosity();
    int i37 = org.mafagafogigante.dungeon.game.PartOfDay.getSecondsToNext(date34, partOfDay35);
    org.mafagafogigante.dungeon.stats.BattleRecord battleRecord38 = new org.mafagafogigante.dungeon.stats.BattleRecord(id0, "User: Nicholas\nTime: 15:42:14\nDate: 2017-04-09\nJava: Java version 1.8.0_121 by Oracle Corporation\nHeap: Using 43.1 MiB out of the allocated 149.0 MiB\nOS: Windows 10 (amd64) 10.0", causeOfDeath2, partOfDay35);
    org.mafagafogigante.dungeon.game.Id id39 = battleRecord38.getId();
    java.lang.String str40 = battleRecord38.getType();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(causeOfDeath2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "Unarmed : UNARMED"+ "'", str9.equals("Unarmed : UNARMED"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 0);
    org.junit.Assert.assertTrue("'" + partOfDay19 + "' != '" + org.mafagafogigante.dungeon.game.PartOfDay.MIDNIGHT + "'", partOfDay19.equals(org.mafagafogigante.dungeon.game.PartOfDay.MIDNIGHT));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long20 == 10L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i29 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long30 == 10L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i31 == 0);
    org.junit.Assert.assertTrue("'" + dungeonTimeUnit33 + "' != '" + org.mafagafogigante.dungeon.date.DungeonTimeUnit.HOUR + "'", dungeonTimeUnit33.equals(org.mafagafogigante.dungeon.date.DungeonTimeUnit.HOUR));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(date34);
    org.junit.Assert.assertTrue("'" + partOfDay35 + "' != '" + org.mafagafogigante.dungeon.game.PartOfDay.NIGHT + "'", partOfDay35.equals(org.mafagafogigante.dungeon.game.PartOfDay.NIGHT));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(luminosity36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i37 == 43200);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(id39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str40 + "' != '" + "User: Nicholas\nTime: 15:42:14\nDate: 2017-04-09\nJava: Java version 1.8.0_121 by Oracle Corporation\nHeap: Using 43.1 MiB out of the allocated 149.0 MiB\nOS: Windows 10 (amd64) 10.0"+ "'", str40.equals("User: Nicholas\nTime: 15:42:14\nDate: 2017-04-09\nJava: Java version 1.8.0_121 by Oracle Corporation\nHeap: Using 43.1 MiB out of the allocated 149.0 MiB\nOS: Windows 10 (amd64) 10.0"));

  }

  @Test
  public void test427() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test427"); }

    org.mafagafogigante.dungeon.entity.items.ItemPreset itemPreset0 = new org.mafagafogigante.dungeon.entity.items.ItemPreset();
    org.mafagafogigante.dungeon.entity.Luminosity luminosity1 = itemPreset0.getLuminosity();
    org.mafagafogigante.dungeon.entity.Integrity integrity4 = new org.mafagafogigante.dungeon.entity.Integrity(1, 0);
    java.lang.String str5 = integrity4.toString();
    itemPreset0.setIntegrity(integrity4);
    boolean b7 = integrity4.isZero();
    int i8 = integrity4.getCurrent();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(luminosity1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "0/1"+ "'", str5.equals("0/1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 0);

  }

  @Test
  public void test428() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test428"); }

    org.mafagafogigante.dungeon.date.Date date3 = new org.mafagafogigante.dungeon.date.Date(10L, 100L, 100L);
    org.mafagafogigante.dungeon.date.Date date7 = new org.mafagafogigante.dungeon.date.Date(10L, 100L, 100L);
    int i8 = date3.compareTo(date7);
    java.lang.String str9 = date3.toTimeString();
    org.mafagafogigante.dungeon.date.Date date14 = new org.mafagafogigante.dungeon.date.Date(10L, 100L, 100L);
    org.mafagafogigante.dungeon.date.Date date18 = new org.mafagafogigante.dungeon.date.Date(10L, 100L, 100L);
    int i19 = date14.compareTo(date18);
    org.mafagafogigante.dungeon.game.PartOfDay partOfDay20 = org.mafagafogigante.dungeon.game.PartOfDay.getCorrespondingConstant(date14);
    long long21 = date14.getYear();
    org.mafagafogigante.dungeon.date.Date date25 = new org.mafagafogigante.dungeon.date.Date(10L, 100L, 100L);
    org.mafagafogigante.dungeon.date.Date date29 = new org.mafagafogigante.dungeon.date.Date(10L, 100L, 100L);
    int i30 = date25.compareTo(date29);
    long long31 = date25.getYear();
    int i32 = date14.compareTo(date25);
    org.mafagafogigante.dungeon.date.DungeonTimeUnit dungeonTimeUnit34 = org.mafagafogigante.dungeon.date.DungeonTimeUnit.HOUR;
    org.mafagafogigante.dungeon.date.Date date35 = date25.minus(35, dungeonTimeUnit34);
    org.mafagafogigante.dungeon.date.Date date36 = date3.plus((int)'a', dungeonTimeUnit34);
    org.mafagafogigante.dungeon.date.DungeonTimeUnit dungeonTimeUnit38 = org.mafagafogigante.dungeon.date.DungeonTimeUnit.HOUR;
    org.mafagafogigante.dungeon.date.Date date39 = date36.plus(81, dungeonTimeUnit38);
    org.mafagafogigante.dungeon.date.DungeonTimeUnit dungeonTimeUnit40 = org.mafagafogigante.dungeon.date.DungeonTimeUnit.DAY;
    org.mafagafogigante.dungeon.date.DungeonTimeUnit dungeonTimeUnit41 = org.mafagafogigante.dungeon.date.DungeonTimeUnit.MILLISECOND;
    long long42 = dungeonTimeUnit40.as(dungeonTimeUnit41);
    // The following exception was thrown during execution in test generation
    try {
    long long43 = dungeonTimeUnit38.as(dungeonTimeUnit40);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "00:00:00"+ "'", str9.equals("00:00:00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == 0);
    org.junit.Assert.assertTrue("'" + partOfDay20 + "' != '" + org.mafagafogigante.dungeon.game.PartOfDay.MIDNIGHT + "'", partOfDay20.equals(org.mafagafogigante.dungeon.game.PartOfDay.MIDNIGHT));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long21 == 10L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i30 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long31 == 10L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i32 == 0);
    org.junit.Assert.assertTrue("'" + dungeonTimeUnit34 + "' != '" + org.mafagafogigante.dungeon.date.DungeonTimeUnit.HOUR + "'", dungeonTimeUnit34.equals(org.mafagafogigante.dungeon.date.DungeonTimeUnit.HOUR));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(date35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(date36);
    org.junit.Assert.assertTrue("'" + dungeonTimeUnit38 + "' != '" + org.mafagafogigante.dungeon.date.DungeonTimeUnit.HOUR + "'", dungeonTimeUnit38.equals(org.mafagafogigante.dungeon.date.DungeonTimeUnit.HOUR));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(date39);
    org.junit.Assert.assertTrue("'" + dungeonTimeUnit40 + "' != '" + org.mafagafogigante.dungeon.date.DungeonTimeUnit.DAY + "'", dungeonTimeUnit40.equals(org.mafagafogigante.dungeon.date.DungeonTimeUnit.DAY));
    org.junit.Assert.assertTrue("'" + dungeonTimeUnit41 + "' != '" + org.mafagafogigante.dungeon.date.DungeonTimeUnit.MILLISECOND + "'", dungeonTimeUnit41.equals(org.mafagafogigante.dungeon.date.DungeonTimeUnit.MILLISECOND));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long42 == 86400000L);

  }

  @Test
  public void test429() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test429"); }

    org.mafagafogigante.dungeon.date.Date date3 = new org.mafagafogigante.dungeon.date.Date(10L, 100L, 100L);
    org.mafagafogigante.dungeon.date.Date date7 = new org.mafagafogigante.dungeon.date.Date(10L, 100L, 100L);
    int i8 = date3.compareTo(date7);
    org.mafagafogigante.dungeon.game.PartOfDay partOfDay9 = org.mafagafogigante.dungeon.game.PartOfDay.getCorrespondingConstant(date3);
    java.lang.String[] str_array15 = new java.lang.String[] { "hi!", "visibilityCriteria=VisibilityCriteria{[]}", "visibilityCriteria=VisibilityCriteria{[]}", "Damaged", "hi!" };
    org.mafagafogigante.dungeon.util.Table table16 = new org.mafagafogigante.dungeon.util.Table(str_array15);
    java.util.List<org.mafagafogigante.dungeon.game.ColoredString> list_coloredString17 = table16.toColoredStringList();
    org.mafagafogigante.dungeon.game.ColoredString coloredString18 = org.mafagafogigante.dungeon.game.Random.select(list_coloredString17);
    boolean b19 = date3.equals((java.lang.Object)coloredString18);
    org.mafagafogigante.dungeon.date.Date date23 = new org.mafagafogigante.dungeon.date.Date(10L, 100L, 100L);
    org.mafagafogigante.dungeon.date.Date date27 = new org.mafagafogigante.dungeon.date.Date(10L, 100L, 100L);
    int i28 = date23.compareTo(date27);
    org.mafagafogigante.dungeon.game.PartOfDay partOfDay29 = org.mafagafogigante.dungeon.game.PartOfDay.getCorrespondingConstant(date23);
    long long30 = date23.getYear();
    org.mafagafogigante.dungeon.date.Date date34 = new org.mafagafogigante.dungeon.date.Date(10L, 100L, 100L);
    org.mafagafogigante.dungeon.date.Date date38 = new org.mafagafogigante.dungeon.date.Date(10L, 100L, 100L);
    int i39 = date34.compareTo(date38);
    long long40 = date34.getYear();
    int i41 = date23.compareTo(date34);
    org.mafagafogigante.dungeon.date.Duration duration42 = new org.mafagafogigante.dungeon.date.Duration(date3, date34);
    java.lang.String str43 = duration42.toString();
    org.mafagafogigante.dungeon.entity.items.ItemPreset itemPreset44 = new org.mafagafogigante.dungeon.entity.items.ItemPreset();
    org.mafagafogigante.dungeon.entity.Integrity integrity45 = itemPreset44.getIntegrity();
    org.mafagafogigante.dungeon.entity.Integrity integrity46 = null;
    itemPreset44.setIntegrity(integrity46);
    org.mafagafogigante.dungeon.util.Percentage percentage48 = itemPreset44.getVisibility();
    boolean b49 = itemPreset44.isUnique();
    org.mafagafogigante.dungeon.entity.Weight weight51 = org.mafagafogigante.dungeon.entity.Weight.newInstance((double)(byte)-1);
    org.mafagafogigante.dungeon.entity.Weight weight52 = org.mafagafogigante.dungeon.entity.Weight.ZERO;
    org.mafagafogigante.dungeon.entity.Weight weight53 = weight51.add(weight52);
    java.lang.String str54 = weight53.toString();
    itemPreset44.setWeight(weight53);
    boolean b56 = duration42.equals((java.lang.Object)weight53);
    org.mafagafogigante.dungeon.entity.Weight weight58 = org.mafagafogigante.dungeon.entity.Weight.newInstance((double)'#');
    org.mafagafogigante.dungeon.entity.Weight weight60 = org.mafagafogigante.dungeon.entity.Weight.newInstance((double)'#');
    org.mafagafogigante.dungeon.entity.Weight weight61 = weight58.add(weight60);
    int i62 = weight53.compareTo(weight60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 0);
    org.junit.Assert.assertTrue("'" + partOfDay9 + "' != '" + org.mafagafogigante.dungeon.game.PartOfDay.MIDNIGHT + "'", partOfDay9.equals(org.mafagafogigante.dungeon.game.PartOfDay.MIDNIGHT));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_coloredString17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(coloredString18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 0);
    org.junit.Assert.assertTrue("'" + partOfDay29 + "' != '" + org.mafagafogigante.dungeon.game.PartOfDay.MIDNIGHT + "'", partOfDay29.equals(org.mafagafogigante.dungeon.game.PartOfDay.MIDNIGHT));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long30 == 10L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i39 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long40 == 10L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i41 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str43 + "' != '" + "Less than a day"+ "'", str43.equals("Less than a day"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(integrity45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(percentage48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(weight51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(weight52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(weight53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str54 + "' != '" + "0 kg"+ "'", str54.equals("0 kg"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(weight58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(weight60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(weight61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i62 == (-1));

  }

  @Test
  public void test430() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test430"); }

    org.mafagafogigante.dungeon.entity.creatures.CreaturePresetFactory[] creaturePresetFactory_array0 = new org.mafagafogigante.dungeon.entity.creatures.CreaturePresetFactory[] {  };
    org.mafagafogigante.dungeon.entity.creatures.CreatureFactory creatureFactory1 = new org.mafagafogigante.dungeon.entity.creatures.CreatureFactory(creaturePresetFactory_array0);
    org.mafagafogigante.dungeon.entity.creatures.CreatureFactory creatureFactory2 = new org.mafagafogigante.dungeon.entity.creatures.CreatureFactory(creaturePresetFactory_array0);
    org.mafagafogigante.dungeon.game.Id id3 = null;
    org.mafagafogigante.dungeon.game.World world4 = null;
    org.mafagafogigante.dungeon.entity.creatures.Creature creature5 = creatureFactory2.makeCreature(id3, world4);
    org.mafagafogigante.dungeon.entity.items.ItemPreset itemPreset6 = new org.mafagafogigante.dungeon.entity.items.ItemPreset();
    org.mafagafogigante.dungeon.entity.Integrity integrity7 = itemPreset6.getIntegrity();
    org.mafagafogigante.dungeon.entity.Integrity integrity8 = null;
    itemPreset6.setIntegrity(integrity8);
    org.mafagafogigante.dungeon.util.Percentage percentage10 = itemPreset6.getVisibility();
    org.mafagafogigante.dungeon.entity.Integrity integrity11 = itemPreset6.getIntegrity();
    java.lang.String str12 = itemPreset6.getText();
    org.mafagafogigante.dungeon.game.Name name13 = null;
    itemPreset6.setName(name13);
    org.mafagafogigante.dungeon.entity.items.ItemPreset itemPreset15 = new org.mafagafogigante.dungeon.entity.items.ItemPreset();
    org.mafagafogigante.dungeon.entity.Integrity integrity16 = itemPreset15.getIntegrity();
    org.mafagafogigante.dungeon.entity.Integrity integrity17 = null;
    itemPreset15.setIntegrity(integrity17);
    org.mafagafogigante.dungeon.util.Percentage percentage19 = itemPreset15.getVisibility();
    java.lang.String str20 = itemPreset15.getType();
    itemPreset15.setIntegrityDecrementOnHit((int)(short)100);
    org.mafagafogigante.dungeon.util.Percentage percentage24 = new org.mafagafogigante.dungeon.util.Percentage((double)57);
    itemPreset15.setVisibility(percentage24);
    boolean b26 = org.mafagafogigante.dungeon.game.Random.roll(percentage24);
    itemPreset6.setVisibility(percentage24);
    long long28 = itemPreset6.getPutrefactionPeriod();
    org.mafagafogigante.dungeon.game.Id id30 = new org.mafagafogigante.dungeon.game.Id("100");
    itemPreset6.setId(id30);
    org.mafagafogigante.dungeon.game.World world32 = null;
    org.mafagafogigante.dungeon.entity.creatures.Creature creature33 = creatureFactory2.makeCreature(id30, world32);
    java.util.Collection<org.mafagafogigante.dungeon.entity.creatures.CreaturePreset> collection_creaturePreset34 = creatureFactory2.getPresets();
    org.mafagafogigante.dungeon.date.Date date38 = new org.mafagafogigante.dungeon.date.Date(10L, 100L, 100L);
    org.mafagafogigante.dungeon.date.Date date42 = new org.mafagafogigante.dungeon.date.Date(10L, 100L, 100L);
    int i43 = date38.compareTo(date42);
    long long44 = date42.getDay();
    org.mafagafogigante.dungeon.game.PartOfDay partOfDay45 = org.mafagafogigante.dungeon.game.PartOfDay.NIGHT;
    int i46 = org.mafagafogigante.dungeon.game.PartOfDay.getSecondsToNext(date42, partOfDay45);
    org.mafagafogigante.dungeon.game.PartOfDay partOfDay47 = org.mafagafogigante.dungeon.game.PartOfDay.getCorrespondingConstant(date42);
    org.mafagafogigante.dungeon.game.World world48 = null;
    org.mafagafogigante.dungeon.stats.Statistics statistics49 = new org.mafagafogigante.dungeon.stats.Statistics();
    statistics49.writeStatistics();
    org.mafagafogigante.dungeon.stats.WorldStatistics worldStatistics51 = statistics49.getWorldStatistics();
    // The following exception was thrown during execution in test generation
    try {
    org.mafagafogigante.dungeon.entity.creatures.Hero hero52 = creatureFactory2.makeHero(date42, world48, statistics49);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(creaturePresetFactory_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(creature5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(integrity7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(percentage10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(integrity11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(integrity16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(percentage19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long28 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(creature33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection_creaturePreset34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i43 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long44 == 10L);
    org.junit.Assert.assertTrue("'" + partOfDay45 + "' != '" + org.mafagafogigante.dungeon.game.PartOfDay.NIGHT + "'", partOfDay45.equals(org.mafagafogigante.dungeon.game.PartOfDay.NIGHT));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i46 == 3600);
    org.junit.Assert.assertTrue("'" + partOfDay47 + "' != '" + org.mafagafogigante.dungeon.game.PartOfDay.MIDNIGHT + "'", partOfDay47.equals(org.mafagafogigante.dungeon.game.PartOfDay.MIDNIGHT));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(worldStatistics51);

  }

  @Test
  public void test431() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test431"); }

    org.mafagafogigante.dungeon.date.Date date6 = new org.mafagafogigante.dungeon.date.Date((long)100, (long)'4', (long)34, (long)'4', (long)1, (long)(byte)0);

  }

  @Test
  public void test432() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test432"); }

    org.mafagafogigante.dungeon.stats.Statistics statistics0 = new org.mafagafogigante.dungeon.stats.Statistics();
    statistics0.writeStatistics();
    statistics0.writeStatistics();
    statistics0.writeStatistics();
    org.mafagafogigante.dungeon.commands.IssuedCommand issuedCommand5 = new org.mafagafogigante.dungeon.commands.IssuedCommand("BattleStatistics{records=CounterMap{map={}}}");
    org.mafagafogigante.dungeon.commands.PreparedIssuedCommand preparedIssuedCommand6 = org.mafagafogigante.dungeon.commands.IssuedCommandProcessor.prepareIssuedCommand(issuedCommand5);
    statistics0.addCommand(issuedCommand5);
    statistics0.writeStatistics();
    statistics0.writeStatistics();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(preparedIssuedCommand6);

  }

  @Test
  public void test433() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test433"); }

    // The following exception was thrown during execution in test generation
    try {
    org.mafagafogigante.dungeon.game.Id id1 = new org.mafagafogigante.dungeon.game.Id("Spell : null");
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  @Test
  public void test434() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test434"); }

    org.mafagafogigante.dungeon.stats.Statistics statistics0 = new org.mafagafogigante.dungeon.stats.Statistics();
    statistics0.writeStatistics();
    statistics0.writeStatistics();
    org.mafagafogigante.dungeon.achievements.AchievementTracker achievementTracker3 = new org.mafagafogigante.dungeon.achievements.AchievementTracker(statistics0);
    int i4 = achievementTracker3.getUnlockedCount();
    int i5 = achievementTracker3.getUnlockedCount();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 0);

  }

  @Test
  public void test435() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test435"); }

    java.awt.Color color1 = null;
    org.mafagafogigante.dungeon.game.ColoredString coloredString2 = new org.mafagafogigante.dungeon.game.ColoredString("User: Nicholas\nTime: 15:42:10\nDate: 2017-04-09\nJava: Java version 1.8.0_121 by Oracle Corporation\nHeap: Using 19.7 MiB out of the allocated 123.0 MiB\nOS: Windows 10 (amd64) 10.0", color1);
    java.lang.String str3 = coloredString2.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "ColoredString{string='User: Nicholas\nTime: 15:42:10\nDate: 2017-04-09\nJava: Java version 1.8.0_121 by Oracle Corporation\nHeap: Using 19.7 MiB out of the allocated 123.0 MiB\nOS: Windows 10 (amd64) 10.0', color=null}"+ "'", str3.equals("ColoredString{string='User: Nicholas\nTime: 15:42:10\nDate: 2017-04-09\nJava: Java version 1.8.0_121 by Oracle Corporation\nHeap: Using 19.7 MiB out of the allocated 123.0 MiB\nOS: Windows 10 (amd64) 10.0', color=null}"));

  }

  @Test
  public void test436() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test436"); }

    org.mafagafogigante.dungeon.entity.items.ItemPreset itemPreset0 = new org.mafagafogigante.dungeon.entity.items.ItemPreset();
    org.mafagafogigante.dungeon.entity.Integrity integrity1 = itemPreset0.getIntegrity();
    org.mafagafogigante.dungeon.util.Percentage percentage2 = itemPreset0.getVisibility();
    java.lang.String str3 = itemPreset0.getType();
    org.mafagafogigante.dungeon.game.Id id4 = null;
    itemPreset0.setId(id4);
    long long6 = itemPreset0.getPutrefactionPeriod();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(integrity1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(percentage2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long6 == 0L);

  }

  @Test
  public void test437() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test437"); }

    org.mafagafogigante.dungeon.entity.creatures.CreaturePreset creaturePreset0 = new org.mafagafogigante.dungeon.entity.creatures.CreaturePreset();
    org.mafagafogigante.dungeon.game.Id id1 = null;
    creaturePreset0.setWeaponId(id1);
    creaturePreset0.setAttack(57);
    org.mafagafogigante.dungeon.entity.Luminosity luminosity5 = creaturePreset0.getLuminosity();
    org.mafagafogigante.dungeon.world.LuminosityVisibilityCriterion luminosityVisibilityCriterion6 = new org.mafagafogigante.dungeon.world.LuminosityVisibilityCriterion(luminosity5);
    org.mafagafogigante.dungeon.world.VisibilityCriterion[] visibilityCriterion_array7 = new org.mafagafogigante.dungeon.world.VisibilityCriterion[] {  };
    org.mafagafogigante.dungeon.world.VisibilityCriteria visibilityCriteria8 = new org.mafagafogigante.dungeon.world.VisibilityCriteria(visibilityCriterion_array7);
    org.mafagafogigante.dungeon.entity.creatures.Creature creature9 = null;
    org.mafagafogigante.dungeon.entity.creatures.Observer observer10 = new org.mafagafogigante.dungeon.entity.creatures.Observer(creature9);
    boolean b11 = visibilityCriteria8.isMetBy(observer10);
    org.mafagafogigante.dungeon.world.VisibilityCriterion[] visibilityCriterion_array12 = new org.mafagafogigante.dungeon.world.VisibilityCriterion[] {  };
    org.mafagafogigante.dungeon.world.VisibilityCriteria visibilityCriteria13 = new org.mafagafogigante.dungeon.world.VisibilityCriteria(visibilityCriterion_array12);
    org.mafagafogigante.dungeon.entity.creatures.Creature creature14 = null;
    org.mafagafogigante.dungeon.entity.creatures.Observer observer15 = new org.mafagafogigante.dungeon.entity.creatures.Observer(creature14);
    boolean b16 = visibilityCriteria13.isMetBy(observer15);
    org.mafagafogigante.dungeon.entity.items.Item[] item_array17 = new org.mafagafogigante.dungeon.entity.items.Item[] {  };
    java.util.ArrayList<org.mafagafogigante.dungeon.entity.items.Item> arraylist_item18 = new java.util.ArrayList<org.mafagafogigante.dungeon.entity.items.Item>();
    boolean b19 = java.util.Collections.addAll((java.util.Collection<org.mafagafogigante.dungeon.entity.items.Item>)arraylist_item18, item_array17);
    org.mafagafogigante.dungeon.game.DungeonString dungeonString21 = new org.mafagafogigante.dungeon.game.DungeonString("hi!");
    java.lang.String[] str_array26 = new java.lang.String[] { "hi!", "Damaged", "BattleStatistics{records=CounterMap{map={}}}", "" };
    dungeonString21.append(str_array26);
    observer15.writeItemSight((java.util.List<org.mafagafogigante.dungeon.entity.items.Item>)arraylist_item18, dungeonString21);
    org.mafagafogigante.dungeon.entity.creatures.Creature[] creature_array29 = new org.mafagafogigante.dungeon.entity.creatures.Creature[] {  };
    java.util.ArrayList<org.mafagafogigante.dungeon.entity.creatures.Creature> arraylist_creature30 = new java.util.ArrayList<org.mafagafogigante.dungeon.entity.creatures.Creature>();
    boolean b31 = java.util.Collections.addAll((java.util.Collection<org.mafagafogigante.dungeon.entity.creatures.Creature>)arraylist_creature30, creature_array29);
    org.mafagafogigante.dungeon.game.DungeonString dungeonString33 = new org.mafagafogigante.dungeon.game.DungeonString("hi!");
    java.lang.String[] str_array38 = new java.lang.String[] { "hi!", "Damaged", "BattleStatistics{records=CounterMap{map={}}}", "" };
    dungeonString33.append(str_array38);
    java.lang.String str40 = dungeonString33.toString();
    org.mafagafogigante.dungeon.game.Point point44 = new org.mafagafogigante.dungeon.game.Point(10, (int)'a', 0);
    java.lang.String[] str_array47 = new java.lang.String[] { "", "" };
    org.mafagafogigante.dungeon.util.Table table48 = new org.mafagafogigante.dungeon.util.Table(str_array47);
    boolean b49 = point44.equals((java.lang.Object)str_array47);
    dungeonString33.append(str_array47);
    observer15.writeCreatureSight((java.util.List<org.mafagafogigante.dungeon.entity.creatures.Creature>)arraylist_creature30, dungeonString33);
    boolean b52 = visibilityCriteria8.isMetBy(observer15);
    org.mafagafogigante.dungeon.entity.creatures.Creature creature53 = null;
    org.mafagafogigante.dungeon.entity.creatures.Observer observer54 = new org.mafagafogigante.dungeon.entity.creatures.Observer(creature53);
    org.mafagafogigante.dungeon.entity.creatures.Creature[] creature_array55 = new org.mafagafogigante.dungeon.entity.creatures.Creature[] {  };
    java.util.ArrayList<org.mafagafogigante.dungeon.entity.creatures.Creature> arraylist_creature56 = new java.util.ArrayList<org.mafagafogigante.dungeon.entity.creatures.Creature>();
    boolean b57 = java.util.Collections.addAll((java.util.Collection<org.mafagafogigante.dungeon.entity.creatures.Creature>)arraylist_creature56, creature_array55);
    org.mafagafogigante.dungeon.world.VisibilityCriterion[] visibilityCriterion_array58 = new org.mafagafogigante.dungeon.world.VisibilityCriterion[] {  };
    org.mafagafogigante.dungeon.world.VisibilityCriteria visibilityCriteria59 = new org.mafagafogigante.dungeon.world.VisibilityCriteria(visibilityCriterion_array58);
    org.mafagafogigante.dungeon.entity.creatures.Creature creature60 = null;
    org.mafagafogigante.dungeon.entity.creatures.Observer observer61 = new org.mafagafogigante.dungeon.entity.creatures.Observer(creature60);
    boolean b62 = visibilityCriteria59.isMetBy(observer61);
    org.mafagafogigante.dungeon.entity.items.Item[] item_array63 = new org.mafagafogigante.dungeon.entity.items.Item[] {  };
    java.util.ArrayList<org.mafagafogigante.dungeon.entity.items.Item> arraylist_item64 = new java.util.ArrayList<org.mafagafogigante.dungeon.entity.items.Item>();
    boolean b65 = java.util.Collections.addAll((java.util.Collection<org.mafagafogigante.dungeon.entity.items.Item>)arraylist_item64, item_array63);
    org.mafagafogigante.dungeon.game.DungeonString dungeonString67 = new org.mafagafogigante.dungeon.game.DungeonString("hi!");
    java.lang.String[] str_array72 = new java.lang.String[] { "hi!", "Damaged", "BattleStatistics{records=CounterMap{map={}}}", "" };
    dungeonString67.append(str_array72);
    observer61.writeItemSight((java.util.List<org.mafagafogigante.dungeon.entity.items.Item>)arraylist_item64, dungeonString67);
    java.lang.String str75 = dungeonString67.toString();
    observer54.writeCreatureSight((java.util.List<org.mafagafogigante.dungeon.entity.creatures.Creature>)arraylist_creature56, dungeonString67);
    org.mafagafogigante.dungeon.entity.creatures.Creature creature77 = null;
    org.mafagafogigante.dungeon.entity.creatures.Observer observer78 = new org.mafagafogigante.dungeon.entity.creatures.Observer(creature77);
    org.mafagafogigante.dungeon.entity.items.Item[] item_array79 = new org.mafagafogigante.dungeon.entity.items.Item[] {  };
    java.util.ArrayList<org.mafagafogigante.dungeon.entity.items.Item> arraylist_item80 = new java.util.ArrayList<org.mafagafogigante.dungeon.entity.items.Item>();
    boolean b81 = java.util.Collections.addAll((java.util.Collection<org.mafagafogigante.dungeon.entity.items.Item>)arraylist_item80, item_array79);
    org.mafagafogigante.dungeon.game.DungeonString dungeonString83 = new org.mafagafogigante.dungeon.game.DungeonString("hi!");
    java.lang.String[] str_array88 = new java.lang.String[] { "hi!", "Damaged", "BattleStatistics{records=CounterMap{map={}}}", "" };
    dungeonString83.append(str_array88);
    observer78.writeItemSight((java.util.List<org.mafagafogigante.dungeon.entity.items.Item>)arraylist_item80, dungeonString83);
    observer15.writeCreatureSight((java.util.List<org.mafagafogigante.dungeon.entity.creatures.Creature>)arraylist_creature56, dungeonString83);
    // The following exception was thrown during execution in test generation
    try {
    boolean b92 = luminosityVisibilityCriterion6.isMetBy(observer15);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(luminosity5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(visibilityCriterion_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(visibilityCriterion_array12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(item_array17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(creature_array29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str40 + "' != '" + "DungeonString{coloredStringList=[ColoredString{string='hi!hi!DamagedBattleStatistics{records=CounterMap{map={}}}', color=java.awt.Color[r=192,g=192,b=192]}], currentColor=java.awt.Color[r=192,g=192,b=192]}"+ "'", str40.equals("DungeonString{coloredStringList=[ColoredString{string='hi!hi!DamagedBattleStatistics{records=CounterMap{map={}}}', color=java.awt.Color[r=192,g=192,b=192]}], currentColor=java.awt.Color[r=192,g=192,b=192]}"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(creature_array55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(visibilityCriterion_array58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b62 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(item_array63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str75 + "' != '" + "DungeonString{coloredStringList=[ColoredString{string='hi!hi!DamagedBattleStatistics{records=CounterMap{map={}}}', color=java.awt.Color[r=192,g=192,b=192]}], currentColor=java.awt.Color[r=192,g=192,b=192]}"+ "'", str75.equals("DungeonString{coloredStringList=[ColoredString{string='hi!hi!DamagedBattleStatistics{records=CounterMap{map={}}}', color=java.awt.Color[r=192,g=192,b=192]}], currentColor=java.awt.Color[r=192,g=192,b=192]}"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(item_array79);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b81 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array88);

  }

  @Test
  public void test438() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test438"); }

    org.mafagafogigante.dungeon.entity.items.ItemPreset itemPreset0 = new org.mafagafogigante.dungeon.entity.items.ItemPreset();
    org.mafagafogigante.dungeon.entity.Integrity integrity1 = itemPreset0.getIntegrity();
    org.mafagafogigante.dungeon.game.Name name2 = itemPreset0.getName();
    java.lang.String str3 = itemPreset0.getText();
    org.mafagafogigante.dungeon.entity.TagSet<org.mafagafogigante.dungeon.entity.items.Item.Tag> tagset_tag4 = itemPreset0.getTagSet();
    int i5 = itemPreset0.getIntegrityDecrementOnHit();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(integrity1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(name2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(tagset_tag4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 0);

  }

  @Test
  public void test439() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test439"); }

    org.mafagafogigante.dungeon.entity.creatures.CreaturePreset creaturePreset0 = new org.mafagafogigante.dungeon.entity.creatures.CreaturePreset();
    org.mafagafogigante.dungeon.game.Id id1 = null;
    creaturePreset0.setWeaponId(id1);
    org.mafagafogigante.dungeon.game.Id id3 = creaturePreset0.getId();
    org.mafagafogigante.dungeon.entity.items.ItemPreset itemPreset4 = new org.mafagafogigante.dungeon.entity.items.ItemPreset();
    org.mafagafogigante.dungeon.entity.Integrity integrity5 = itemPreset4.getIntegrity();
    org.mafagafogigante.dungeon.entity.Integrity integrity6 = null;
    itemPreset4.setIntegrity(integrity6);
    org.mafagafogigante.dungeon.util.Percentage percentage8 = itemPreset4.getVisibility();
    java.lang.String str9 = itemPreset4.getType();
    itemPreset4.setIntegrityDecrementOnHit((int)(short)100);
    org.mafagafogigante.dungeon.entity.TagSet<org.mafagafogigante.dungeon.entity.items.Item.Tag> tagset_tag12 = itemPreset4.getTagSet();
    org.mafagafogigante.dungeon.entity.Weight weight14 = org.mafagafogigante.dungeon.entity.Weight.newInstance((double)(byte)-1);
    itemPreset4.setWeight(weight14);
    org.mafagafogigante.dungeon.entity.items.ItemPreset itemPreset16 = new org.mafagafogigante.dungeon.entity.items.ItemPreset();
    org.mafagafogigante.dungeon.entity.Integrity integrity17 = itemPreset16.getIntegrity();
    org.mafagafogigante.dungeon.entity.Integrity integrity18 = null;
    itemPreset16.setIntegrity(integrity18);
    org.mafagafogigante.dungeon.util.Percentage percentage21 = new org.mafagafogigante.dungeon.util.Percentage((double)'#');
    itemPreset16.setHitRate(percentage21);
    itemPreset4.setHitRate(percentage21);
    org.mafagafogigante.dungeon.entity.Luminosity luminosity24 = itemPreset4.getLuminosity();
    creaturePreset0.setLuminosity(luminosity24);
    org.mafagafogigante.dungeon.entity.Luminosity luminosity26 = creaturePreset0.getLuminosity();
    org.mafagafogigante.dungeon.entity.LightSource lightSource27 = new org.mafagafogigante.dungeon.entity.LightSource(luminosity26);
    lightSource27.disable();
    lightSource27.enable();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(id3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(integrity5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(percentage8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(tagset_tag12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(weight14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(integrity17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(luminosity24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(luminosity26);

  }

//  @Test
//  public void test440() throws Throwable {
//
//    if (debug) { System.out.format("%n%s%n","RegressionTest2.test440"); }
//
//    org.mafagafogigante.dungeon.entity.creatures.CreaturePreset creaturePreset0 = new org.mafagafogigante.dungeon.entity.creatures.CreaturePreset();
//    org.mafagafogigante.dungeon.game.Id id1 = null;
//    creaturePreset0.setWeaponId(id1);
//    creaturePreset0.setAttack(57);
//    org.mafagafogigante.dungeon.entity.Luminosity luminosity5 = creaturePreset0.getLuminosity();
//    int i6 = creaturePreset0.getHealth();
//    creaturePreset0.setHealth((int)(short)1);
//    org.mafagafogigante.dungeon.entity.creatures.CreaturePreset creaturePreset9 = new org.mafagafogigante.dungeon.entity.creatures.CreaturePreset();
//    org.mafagafogigante.dungeon.game.Id id10 = null;
//    creaturePreset9.setWeaponId(id10);
//    creaturePreset9.setAttack(57);
//    org.mafagafogigante.dungeon.entity.Luminosity luminosity14 = creaturePreset9.getLuminosity();
//    int i15 = creaturePreset9.getInventoryItemLimit();
//    org.mafagafogigante.dungeon.entity.creatures.CreaturePreset creaturePreset16 = new org.mafagafogigante.dungeon.entity.creatures.CreaturePreset();
//    org.mafagafogigante.dungeon.game.Id id17 = null;
//    creaturePreset16.setWeaponId(id17);
//    creaturePreset16.setAttack(57);
//    org.mafagafogigante.dungeon.entity.Luminosity luminosity21 = creaturePreset16.getLuminosity();
//    creaturePreset16.setInventoryItemLimit(57);
//    org.mafagafogigante.dungeon.entity.creatures.Drop[] drop_array24 = new org.mafagafogigante.dungeon.entity.creatures.Drop[] {  };
//    java.util.ArrayList<org.mafagafogigante.dungeon.entity.creatures.Drop> arraylist_drop25 = new java.util.ArrayList<org.mafagafogigante.dungeon.entity.creatures.Drop>();
//    boolean b26 = java.util.Collections.addAll((java.util.Collection<org.mafagafogigante.dungeon.entity.creatures.Drop>)arraylist_drop25, drop_array24);
//    creaturePreset16.setDropList((java.util.List<org.mafagafogigante.dungeon.entity.creatures.Drop>)arraylist_drop25);
//    creaturePreset9.setDropList((java.util.List<org.mafagafogigante.dungeon.entity.creatures.Drop>)arraylist_drop25);
//    creaturePreset0.setDropList((java.util.List<org.mafagafogigante.dungeon.entity.creatures.Drop>)arraylist_drop25);
//    
//    // Regression assertion (captures the current behavior of the code)
//    org.junit.Assert.assertNotNull(luminosity5);
//    
//    // Regression assertion (captures the current behavior of the code)
//    org.junit.Assert.assertTrue(i6 == 0);
//    
//    // Regression assertion (captures the current behavior of the code)
//    org.junit.Assert.assertNotNull(luminosity14);
//    
//    // Regression assertion (captures the current behavior of the code)
//    org.junit.Assert.assertTrue(i15 == 0);
//    
//    // Regression assertion (captures the current behavior of the code)
//    org.junit.Assert.assertNotNull(luminosity21);
//    
//    // Regression assertion (captures the current behavior of the code)
//    org.junit.Assert.assertNotNull(drop_array24);
//    
//    // Regression assertion (captures the current behavior of the code)
//    org.junit.Assert.assertTrue(b26 == false);
//
//  }

  @Test
  public void test441() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test441"); }

    org.mafagafogigante.dungeon.date.Date date6 = new org.mafagafogigante.dungeon.date.Date((long)100, 100L, (long)81, (long)(byte)-1, (long)152, (-1L));
    org.mafagafogigante.dungeon.date.Date date10 = new org.mafagafogigante.dungeon.date.Date((long)97, (long)(byte)-1, (long)'#');
    org.mafagafogigante.dungeon.stats.BattleStatistics battleStatistics11 = new org.mafagafogigante.dungeon.stats.BattleStatistics();
    org.mafagafogigante.dungeon.achievements.BattleStatisticsRequirement battleStatisticsRequirement12 = null;
    boolean b13 = battleStatistics11.satisfies(battleStatisticsRequirement12);
    java.lang.String str14 = battleStatistics11.toString();
    org.mafagafogigante.dungeon.achievements.BattleStatisticsQuery battleStatisticsQuery15 = new org.mafagafogigante.dungeon.achievements.BattleStatisticsQuery();
    org.mafagafogigante.dungeon.achievements.BattleStatisticsRequirement battleStatisticsRequirement17 = new org.mafagafogigante.dungeon.achievements.BattleStatisticsRequirement(battleStatisticsQuery15, (int)(byte)100);
    boolean b18 = battleStatistics11.satisfies(battleStatisticsRequirement17);
    org.mafagafogigante.dungeon.util.CounterMap<org.mafagafogigante.dungeon.stats.CauseOfDeath> countermap_causeOfDeath19 = battleStatistics11.getKillsByCauseOfDeath();
    org.mafagafogigante.dungeon.util.CounterMap<org.mafagafogigante.dungeon.stats.CauseOfDeath> countermap_causeOfDeath20 = battleStatistics11.getKillsByCauseOfDeath();
    boolean b21 = date10.equals((java.lang.Object)countermap_causeOfDeath20);
    org.mafagafogigante.dungeon.date.DungeonTimeUnit dungeonTimeUnit23 = org.mafagafogigante.dungeon.date.DungeonTimeUnit.YEAR;
    org.mafagafogigante.dungeon.date.Date date24 = date10.plus(45056, dungeonTimeUnit23);
    org.mafagafogigante.dungeon.date.Duration duration25 = new org.mafagafogigante.dungeon.date.Duration(date6, date24);
    long long26 = date6.getYear();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "BattleStatistics{records=CounterMap{map={}}}"+ "'", str14.equals("BattleStatistics{records=CounterMap{map={}}}"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(countermap_causeOfDeath19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(countermap_causeOfDeath20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    org.junit.Assert.assertTrue("'" + dungeonTimeUnit23 + "' != '" + org.mafagafogigante.dungeon.date.DungeonTimeUnit.YEAR + "'", dungeonTimeUnit23.equals(org.mafagafogigante.dungeon.date.DungeonTimeUnit.YEAR));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(date24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long26 == 100L);

  }

  @Test
  public void test442() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test442"); }

    org.mafagafogigante.dungeon.date.Date date6 = new org.mafagafogigante.dungeon.date.Date((long)100, 100L, (long)81, (long)(byte)-1, (long)152, (-1L));
    java.lang.String str7 = date6.toTimeString();
    java.lang.String str8 = date6.toDateString();
    long long9 = date6.getMonth();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "01:00:00"+ "'", str7.equals("01:00:00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "day 10 of month 10 of the year 100"+ "'", str8.equals("day 10 of month 10 of the year 100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long9 == 10L);

  }

  @Test
  public void test443() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test443"); }

    org.mafagafogigante.dungeon.commands.CommandHistory commandHistory0 = new org.mafagafogigante.dungeon.commands.CommandHistory();
    java.lang.String str2 = commandHistory0.getLastSimilarCommand("East");
    org.mafagafogigante.dungeon.commands.CommandHistory.Cursor cursor3 = commandHistory0.getCursor();
    org.mafagafogigante.dungeon.commands.IssuedCommand issuedCommand5 = new org.mafagafogigante.dungeon.commands.IssuedCommand("Unarmed : UNARMED");
    commandHistory0.addCommand(issuedCommand5);
    org.mafagafogigante.dungeon.commands.CommandHistory commandHistory7 = new org.mafagafogigante.dungeon.commands.CommandHistory();
    java.lang.String str9 = commandHistory7.getLastSimilarCommand("East");
    org.mafagafogigante.dungeon.commands.CommandHistory.Cursor cursor10 = commandHistory7.getCursor();
    org.mafagafogigante.dungeon.commands.IssuedCommand issuedCommand12 = new org.mafagafogigante.dungeon.commands.IssuedCommand("100");
    commandHistory7.addCommand(issuedCommand12);
    org.mafagafogigante.dungeon.commands.IssuedCommandEvaluation issuedCommandEvaluation14 = org.mafagafogigante.dungeon.commands.IssuedCommandProcessor.evaluateIssuedCommand(issuedCommand12);
    commandHistory0.addCommand(issuedCommand12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(cursor3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(cursor10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(issuedCommandEvaluation14);

  }

  @Test
  public void test444() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test444"); }

    org.mafagafogigante.dungeon.entity.creatures.Hero hero0 = null;
    org.mafagafogigante.dungeon.entity.creatures.HeroSpellcaster heroSpellcaster1 = new org.mafagafogigante.dungeon.entity.creatures.HeroSpellcaster(hero0);
    java.util.List<org.mafagafogigante.dungeon.spells.Spell> list_spell2 = heroSpellcaster1.getSpellList();
    java.lang.String[] str_array3 = new java.lang.String[] {  };
    heroSpellcaster1.parseCast(str_array3);
    org.mafagafogigante.dungeon.spells.Spell spell5 = null;
    boolean b6 = heroSpellcaster1.knowsSpell(spell5);
    org.mafagafogigante.dungeon.spells.Spell spell7 = null;
    boolean b8 = heroSpellcaster1.knowsSpell(spell7);
    org.mafagafogigante.dungeon.game.DungeonString dungeonString10 = new org.mafagafogigante.dungeon.game.DungeonString("hi!");
    java.lang.String[] str_array15 = new java.lang.String[] { "hi!", "Damaged", "BattleStatistics{records=CounterMap{map={}}}", "" };
    dungeonString10.append(str_array15);
    java.lang.String[] str_array22 = new java.lang.String[] { "hi!", "visibilityCriteria=VisibilityCriteria{[]}", "visibilityCriteria=VisibilityCriteria{[]}", "Damaged", "hi!" };
    org.mafagafogigante.dungeon.util.Table table23 = new org.mafagafogigante.dungeon.util.Table(str_array22);
    dungeonString10.append(str_array22);
    heroSpellcaster1.parseCast(str_array22);
    org.mafagafogigante.dungeon.util.Table table26 = new org.mafagafogigante.dungeon.util.Table(str_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_spell2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array22);

  }

  @Test
  public void test445() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test445"); }

    org.mafagafogigante.dungeon.stats.Statistics statistics0 = new org.mafagafogigante.dungeon.stats.Statistics();
    statistics0.writeStatistics();
    statistics0.writeStatistics();
    org.mafagafogigante.dungeon.achievements.AchievementTracker achievementTracker3 = new org.mafagafogigante.dungeon.achievements.AchievementTracker(statistics0);
    org.mafagafogigante.dungeon.stats.ExplorationStatistics explorationStatistics4 = statistics0.getExplorationStatistics();
    org.mafagafogigante.dungeon.achievements.AchievementTracker achievementTracker5 = new org.mafagafogigante.dungeon.achievements.AchievementTracker(statistics0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(explorationStatistics4);

  }

  @Test
  public void test446() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test446"); }

    org.mafagafogigante.dungeon.game.BlockedEntrances blockedEntrances0 = new org.mafagafogigante.dungeon.game.BlockedEntrances();
    org.mafagafogigante.dungeon.game.Direction direction1 = org.mafagafogigante.dungeon.game.Direction.EAST;
    boolean b3 = direction1.equalsIgnoreCase("");
    blockedEntrances0.block(direction1);
    org.mafagafogigante.dungeon.game.BlockedEntrances blockedEntrances5 = new org.mafagafogigante.dungeon.game.BlockedEntrances(blockedEntrances0);
    org.mafagafogigante.dungeon.game.Direction direction6 = org.mafagafogigante.dungeon.game.Direction.EAST;
    org.mafagafogigante.dungeon.game.Direction direction7 = direction6.invert();
    blockedEntrances5.block(direction7);
    org.mafagafogigante.dungeon.game.Direction direction9 = org.mafagafogigante.dungeon.game.Direction.EAST;
    java.lang.String str10 = direction9.toString();
    java.lang.String str11 = direction9.toString();
    blockedEntrances5.block(direction9);
    org.mafagafogigante.dungeon.game.BlockedEntrances blockedEntrances13 = new org.mafagafogigante.dungeon.game.BlockedEntrances();
    org.mafagafogigante.dungeon.game.BlockedEntrances blockedEntrances14 = new org.mafagafogigante.dungeon.game.BlockedEntrances(blockedEntrances13);
    org.mafagafogigante.dungeon.game.Direction direction15 = org.mafagafogigante.dungeon.game.Direction.EAST;
    java.lang.String str16 = direction15.toString();
    java.lang.String str17 = direction15.toString();
    blockedEntrances13.block(direction15);
    blockedEntrances5.block(direction15);
    org.mafagafogigante.dungeon.game.Direction direction20 = org.mafagafogigante.dungeon.game.Direction.EAST;
    java.lang.String str21 = direction20.toString();
    org.mafagafogigante.dungeon.game.Direction direction22 = direction20.invert();
    boolean b23 = blockedEntrances5.isBlocked(direction22);
    org.junit.Assert.assertTrue("'" + direction1 + "' != '" + org.mafagafogigante.dungeon.game.Direction.EAST + "'", direction1.equals(org.mafagafogigante.dungeon.game.Direction.EAST));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    org.junit.Assert.assertTrue("'" + direction6 + "' != '" + org.mafagafogigante.dungeon.game.Direction.EAST + "'", direction6.equals(org.mafagafogigante.dungeon.game.Direction.EAST));
    org.junit.Assert.assertTrue("'" + direction7 + "' != '" + org.mafagafogigante.dungeon.game.Direction.WEST + "'", direction7.equals(org.mafagafogigante.dungeon.game.Direction.WEST));
    org.junit.Assert.assertTrue("'" + direction9 + "' != '" + org.mafagafogigante.dungeon.game.Direction.EAST + "'", direction9.equals(org.mafagafogigante.dungeon.game.Direction.EAST));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "East"+ "'", str10.equals("East"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "East"+ "'", str11.equals("East"));
    org.junit.Assert.assertTrue("'" + direction15 + "' != '" + org.mafagafogigante.dungeon.game.Direction.EAST + "'", direction15.equals(org.mafagafogigante.dungeon.game.Direction.EAST));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "East"+ "'", str16.equals("East"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "East"+ "'", str17.equals("East"));
    org.junit.Assert.assertTrue("'" + direction20 + "' != '" + org.mafagafogigante.dungeon.game.Direction.EAST + "'", direction20.equals(org.mafagafogigante.dungeon.game.Direction.EAST));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "East"+ "'", str21.equals("East"));
    org.junit.Assert.assertTrue("'" + direction22 + "' != '" + org.mafagafogigante.dungeon.game.Direction.WEST + "'", direction22.equals(org.mafagafogigante.dungeon.game.Direction.WEST));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);

  }

  @Test
  public void test447() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test447"); }

    org.mafagafogigante.dungeon.game.MinimumBoundingRectangle minimumBoundingRectangle2 = new org.mafagafogigante.dungeon.game.MinimumBoundingRectangle(0, (int)(short)0);
    int i3 = minimumBoundingRectangle2.getWidth();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);

  }

  @Test
  public void test448() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test448"); }

    org.mafagafogigante.dungeon.entity.creatures.Creature creature2 = null;
    org.mafagafogigante.dungeon.entity.creatures.CreatureHealth creatureHealth3 = org.mafagafogigante.dungeon.entity.creatures.CreatureHealth.makeCreatureHealth(100, creature2);
    creatureHealth3.incrementBy(57);
    creatureHealth3.incrementBy(32);
    boolean b8 = creatureHealth3.isFull();
    creatureHealth3.decrementBy(2);
    boolean b11 = creatureHealth3.isFull();
    org.mafagafogigante.dungeon.util.Percentage percentage12 = creatureHealth3.toPercentage();
    org.mafagafogigante.dungeon.entity.items.WeaponComponent weaponComponent14 = new org.mafagafogigante.dungeon.entity.items.WeaponComponent(3600, percentage12, 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(creatureHealth3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(percentage12);

  }

  @Test
  public void test449() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test449"); }

    org.mafagafogigante.dungeon.game.PartOfDay partOfDay0 = org.mafagafogigante.dungeon.game.PartOfDay.NIGHT;
    org.mafagafogigante.dungeon.entity.Luminosity luminosity1 = partOfDay0.getLuminosity();
    org.mafagafogigante.dungeon.world.LuminosityVisibilityCriterion luminosityVisibilityCriterion2 = new org.mafagafogigante.dungeon.world.LuminosityVisibilityCriterion(luminosity1);
    java.lang.String str3 = luminosity1.toString();
    org.mafagafogigante.dungeon.util.Percentage percentage4 = luminosity1.toPercentage();
    org.junit.Assert.assertTrue("'" + partOfDay0 + "' != '" + org.mafagafogigante.dungeon.game.PartOfDay.NIGHT + "'", partOfDay0.equals(org.mafagafogigante.dungeon.game.PartOfDay.NIGHT));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(luminosity1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "Luminosity of 40.00%"+ "'", str3.equals("Luminosity of 40.00%"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(percentage4);

  }

  @Test
  public void test450() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test450"); }

    org.mafagafogigante.dungeon.entity.items.ItemPreset itemPreset0 = new org.mafagafogigante.dungeon.entity.items.ItemPreset();
    org.mafagafogigante.dungeon.entity.Integrity integrity1 = itemPreset0.getIntegrity();
    itemPreset0.setIntegrityDecrementOnEat((-1));
    itemPreset0.setPutrefactionPeriod((-1L));
    itemPreset0.setDrinkableDoses((int)(short)10);
    itemPreset0.setDrinkableDoses((int)(byte)100);
    org.mafagafogigante.dungeon.game.PartOfDay partOfDay10 = org.mafagafogigante.dungeon.game.PartOfDay.NIGHT;
    org.mafagafogigante.dungeon.entity.Luminosity luminosity11 = partOfDay10.getLuminosity();
    org.mafagafogigante.dungeon.game.Name name12 = partOfDay10.getName();
    java.lang.String str14 = name12.getQuantifiedName((int)'a');
    java.lang.String str15 = name12.getSingular();
    java.lang.String str16 = name12.toString();
    java.lang.String str17 = name12.getSingular();
    java.lang.String str18 = name12.getPlural();
    java.lang.String str19 = name12.getPlural();
    java.lang.String str21 = name12.getQuantifiedName(20601);
    itemPreset0.setName(name12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(integrity1);
    org.junit.Assert.assertTrue("'" + partOfDay10 + "' != '" + org.mafagafogigante.dungeon.game.PartOfDay.NIGHT + "'", partOfDay10.equals(org.mafagafogigante.dungeon.game.PartOfDay.NIGHT));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(luminosity11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(name12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "a few Nights"+ "'", str14.equals("a few Nights"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "Night"+ "'", str15.equals("Night"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "Night"+ "'", str16.equals("Night"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "Night"+ "'", str17.equals("Night"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "Nights"+ "'", str18.equals("Nights"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "Nights"+ "'", str19.equals("Nights"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "a few Nights"+ "'", str21.equals("a few Nights"));

  }

  @Test
  public void test451() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test451"); }

    org.mafagafogigante.dungeon.entity.creatures.CreaturePreset creaturePreset0 = new org.mafagafogigante.dungeon.entity.creatures.CreaturePreset();
    org.mafagafogigante.dungeon.game.Id id1 = null;
    creaturePreset0.setWeaponId(id1);
    creaturePreset0.setAttack(57);
    org.mafagafogigante.dungeon.entity.Luminosity luminosity5 = creaturePreset0.getLuminosity();
    org.mafagafogigante.dungeon.entity.creatures.CreaturePreset creaturePreset6 = new org.mafagafogigante.dungeon.entity.creatures.CreaturePreset();
    org.mafagafogigante.dungeon.game.Id id7 = null;
    creaturePreset6.setWeaponId(id7);
    creaturePreset6.setAttack(57);
    org.mafagafogigante.dungeon.game.Id[] id_array11 = new org.mafagafogigante.dungeon.game.Id[] {  };
    java.util.ArrayList<org.mafagafogigante.dungeon.game.Id> arraylist_id12 = new java.util.ArrayList<org.mafagafogigante.dungeon.game.Id>();
    boolean b13 = java.util.Collections.addAll((java.util.Collection<org.mafagafogigante.dungeon.game.Id>)arraylist_id12, id_array11);
    creaturePreset6.setItems((java.util.List<org.mafagafogigante.dungeon.game.Id>)arraylist_id12);
    creaturePreset0.setItems((java.util.List<org.mafagafogigante.dungeon.game.Id>)arraylist_id12);
    org.mafagafogigante.dungeon.entity.items.ItemPreset itemPreset16 = new org.mafagafogigante.dungeon.entity.items.ItemPreset();
    org.mafagafogigante.dungeon.entity.Integrity integrity17 = itemPreset16.getIntegrity();
    org.mafagafogigante.dungeon.entity.Luminosity luminosity18 = itemPreset16.getLuminosity();
    org.mafagafogigante.dungeon.util.Percentage percentage20 = new org.mafagafogigante.dungeon.util.Percentage((double)57);
    itemPreset16.setVisibility(percentage20);
    creaturePreset0.setVisibility(percentage20);
    double d23 = creaturePreset0.getInventoryWeightLimit();
    org.mafagafogigante.dungeon.entity.Luminosity luminosity24 = creaturePreset0.getLuminosity();
    java.lang.String str25 = luminosity24.toString();
    java.lang.String str26 = luminosity24.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(luminosity5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(id_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(integrity17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(luminosity18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d23 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(luminosity24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + "Luminosity of 0.00%"+ "'", str25.equals("Luminosity of 0.00%"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "Luminosity of 0.00%"+ "'", str26.equals("Luminosity of 0.00%"));

  }

  @Test
  public void test452() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test452"); }

    org.mafagafogigante.dungeon.game.Point point3 = new org.mafagafogigante.dungeon.game.Point(100, 10, (int)(byte)10);
    java.lang.String str4 = point3.toString();
    boolean b6 = point3.equals((java.lang.Object)"DungeonString{coloredStringList=[ColoredString{string='hi!hi!DamagedBattleStatistics{records=CounterMap{map={}}}', color=java.awt.Color[r=192,g=192,b=192]}], currentColor=java.awt.Color[r=192,g=192,b=192]}");
    org.mafagafogigante.dungeon.game.Direction direction7 = org.mafagafogigante.dungeon.game.Direction.UP;
    boolean b9 = direction7.equalsIgnoreCase("97-01-01 00:00:00");
    org.mafagafogigante.dungeon.game.Point point10 = new org.mafagafogigante.dungeon.game.Point(point3, direction7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "{100, 10, 10}"+ "'", str4.equals("{100, 10, 10}"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    org.junit.Assert.assertTrue("'" + direction7 + "' != '" + org.mafagafogigante.dungeon.game.Direction.UP + "'", direction7.equals(org.mafagafogigante.dungeon.game.Direction.UP));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);

  }

  @Test
  public void test453() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test453"); }

    org.mafagafogigante.dungeon.entity.creatures.CreaturePreset creaturePreset0 = new org.mafagafogigante.dungeon.entity.creatures.CreaturePreset();
    org.mafagafogigante.dungeon.game.Id id1 = null;
    creaturePreset0.setWeaponId(id1);
    creaturePreset0.setAttack(57);
    org.mafagafogigante.dungeon.entity.Luminosity luminosity5 = creaturePreset0.getLuminosity();
    int i6 = creaturePreset0.getInventoryItemLimit();
    org.mafagafogigante.dungeon.game.Id id7 = null;
    creaturePreset0.setWeaponId(id7);
    creaturePreset0.setInventoryItemLimit(0);
    org.mafagafogigante.dungeon.game.Id id11 = creaturePreset0.getWeaponId();
    org.mafagafogigante.dungeon.entity.creatures.Creature.Tag tag12 = org.mafagafogigante.dungeon.entity.creatures.Creature.Tag.CORPSE;
    boolean b13 = creaturePreset0.hasTag(tag12);
    double d14 = creaturePreset0.getInventoryWeightLimit();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(luminosity5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(id11);
    org.junit.Assert.assertTrue("'" + tag12 + "' != '" + org.mafagafogigante.dungeon.entity.creatures.Creature.Tag.CORPSE + "'", tag12.equals(org.mafagafogigante.dungeon.entity.creatures.Creature.Tag.CORPSE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d14 == 0.0d);

  }

  @Test
  public void test454() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test454"); }

    org.mafagafogigante.dungeon.util.Percentage percentage1 = new org.mafagafogigante.dungeon.util.Percentage((double)'#');
    boolean b3 = percentage1.equals((java.lang.Object)10.0d);
    double d4 = percentage1.toDouble();
    org.mafagafogigante.dungeon.entity.Luminosity luminosity5 = new org.mafagafogigante.dungeon.entity.Luminosity(percentage1);
    org.mafagafogigante.dungeon.entity.Visibility visibility6 = new org.mafagafogigante.dungeon.entity.Visibility(percentage1);
    org.mafagafogigante.dungeon.entity.items.ItemPreset itemPreset7 = new org.mafagafogigante.dungeon.entity.items.ItemPreset();
    itemPreset7.setDrinkableHealing((int)(short)0);
    org.mafagafogigante.dungeon.util.Percentage percentage11 = new org.mafagafogigante.dungeon.util.Percentage((double)57);
    itemPreset7.setVisibility(percentage11);
    int i13 = itemPreset7.getDrinkableDoses();
    itemPreset7.setIntegrityDecrementOnEat((int)' ');
    org.mafagafogigante.dungeon.util.Percentage percentage16 = null;
    org.mafagafogigante.dungeon.entity.Luminosity luminosity17 = new org.mafagafogigante.dungeon.entity.Luminosity(percentage16);
    org.mafagafogigante.dungeon.entity.LightSource lightSource18 = new org.mafagafogigante.dungeon.entity.LightSource(luminosity17);
    org.mafagafogigante.dungeon.entity.LightSource lightSource19 = new org.mafagafogigante.dungeon.entity.LightSource(luminosity17);
    itemPreset7.setLuminosity(luminosity17);
    // The following exception was thrown during execution in test generation
    try {
    boolean b21 = visibility6.visibleUnder(luminosity17);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d4 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 0);

  }

  @Test
  public void test455() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test455"); }

    org.mafagafogigante.dungeon.entity.creatures.Creature creature1 = null;
    org.mafagafogigante.dungeon.entity.creatures.CreatureHealth creatureHealth2 = org.mafagafogigante.dungeon.entity.creatures.CreatureHealth.makeCreatureHealth(100, creature1);
    boolean b3 = creatureHealth2.isFull();
    boolean b4 = creatureHealth2.isAlive();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(creatureHealth2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);

  }

  @Test
  public void test456() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test456"); }

    org.mafagafogigante.dungeon.date.Date date6 = new org.mafagafogigante.dungeon.date.Date((long)(byte)0, (long)0, (long)81, (long)10, 100L, (long)(short)1);
    java.lang.String str7 = date6.toDateString();
    org.mafagafogigante.dungeon.date.Date date11 = new org.mafagafogigante.dungeon.date.Date(10L, 100L, 100L);
    org.mafagafogigante.dungeon.date.Date date15 = new org.mafagafogigante.dungeon.date.Date(10L, 100L, 100L);
    int i16 = date11.compareTo(date15);
    org.mafagafogigante.dungeon.game.PartOfDay partOfDay17 = org.mafagafogigante.dungeon.game.PartOfDay.getCorrespondingConstant(date11);
    long long18 = date11.getYear();
    org.mafagafogigante.dungeon.date.Duration duration19 = new org.mafagafogigante.dungeon.date.Duration(date6, date11);
    long long20 = date11.getTime();
    org.mafagafogigante.dungeon.date.Date date24 = new org.mafagafogigante.dungeon.date.Date(10L, 100L, 100L);
    org.mafagafogigante.dungeon.date.Date date28 = new org.mafagafogigante.dungeon.date.Date(10L, 100L, 100L);
    int i29 = date24.compareTo(date28);
    org.mafagafogigante.dungeon.game.PartOfDay partOfDay30 = org.mafagafogigante.dungeon.game.PartOfDay.getCorrespondingConstant(date24);
    long long31 = date24.getYear();
    long long32 = date24.getMonth();
    long long33 = date24.getDay();
    int i34 = date11.compareTo(date24);
    java.lang.String str35 = date24.toTimeString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "day 10 of month 1 of the year 1"+ "'", str7.equals("day 10 of month 1 of the year 1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 0);
    org.junit.Assert.assertTrue("'" + partOfDay17 + "' != '" + org.mafagafogigante.dungeon.game.PartOfDay.MIDNIGHT + "'", partOfDay17.equals(org.mafagafogigante.dungeon.game.PartOfDay.MIDNIGHT));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long18 == 10L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long20 == 86313600000L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i29 == 0);
    org.junit.Assert.assertTrue("'" + partOfDay30 + "' != '" + org.mafagafogigante.dungeon.game.PartOfDay.MIDNIGHT + "'", partOfDay30.equals(org.mafagafogigante.dungeon.game.PartOfDay.MIDNIGHT));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long31 == 10L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long32 == 10L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long33 == 10L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i34 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str35 + "' != '" + "00:00:00"+ "'", str35.equals("00:00:00"));

  }

  @Test
  public void test457() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test457"); }

    org.mafagafogigante.dungeon.entity.creatures.CreaturePresetFactory[] creaturePresetFactory_array0 = new org.mafagafogigante.dungeon.entity.creatures.CreaturePresetFactory[] {  };
    org.mafagafogigante.dungeon.entity.creatures.CreatureFactory creatureFactory1 = new org.mafagafogigante.dungeon.entity.creatures.CreatureFactory(creaturePresetFactory_array0);
    org.mafagafogigante.dungeon.entity.creatures.CreatureFactory creatureFactory2 = new org.mafagafogigante.dungeon.entity.creatures.CreatureFactory(creaturePresetFactory_array0);
    org.mafagafogigante.dungeon.game.Id id3 = null;
    org.mafagafogigante.dungeon.game.World world4 = null;
    org.mafagafogigante.dungeon.entity.creatures.Creature creature5 = creatureFactory2.makeCreature(id3, world4);
    org.mafagafogigante.dungeon.entity.items.ItemPreset itemPreset6 = new org.mafagafogigante.dungeon.entity.items.ItemPreset();
    org.mafagafogigante.dungeon.entity.Integrity integrity7 = itemPreset6.getIntegrity();
    org.mafagafogigante.dungeon.entity.Integrity integrity8 = null;
    itemPreset6.setIntegrity(integrity8);
    org.mafagafogigante.dungeon.util.Percentage percentage10 = itemPreset6.getVisibility();
    org.mafagafogigante.dungeon.entity.Integrity integrity11 = itemPreset6.getIntegrity();
    java.lang.String str12 = itemPreset6.getText();
    org.mafagafogigante.dungeon.game.Name name13 = null;
    itemPreset6.setName(name13);
    org.mafagafogigante.dungeon.entity.items.ItemPreset itemPreset15 = new org.mafagafogigante.dungeon.entity.items.ItemPreset();
    org.mafagafogigante.dungeon.entity.Integrity integrity16 = itemPreset15.getIntegrity();
    org.mafagafogigante.dungeon.entity.Integrity integrity17 = null;
    itemPreset15.setIntegrity(integrity17);
    org.mafagafogigante.dungeon.util.Percentage percentage19 = itemPreset15.getVisibility();
    java.lang.String str20 = itemPreset15.getType();
    itemPreset15.setIntegrityDecrementOnHit((int)(short)100);
    org.mafagafogigante.dungeon.util.Percentage percentage24 = new org.mafagafogigante.dungeon.util.Percentage((double)57);
    itemPreset15.setVisibility(percentage24);
    boolean b26 = org.mafagafogigante.dungeon.game.Random.roll(percentage24);
    itemPreset6.setVisibility(percentage24);
    long long28 = itemPreset6.getPutrefactionPeriod();
    org.mafagafogigante.dungeon.game.Id id30 = new org.mafagafogigante.dungeon.game.Id("100");
    itemPreset6.setId(id30);
    org.mafagafogigante.dungeon.game.World world32 = null;
    org.mafagafogigante.dungeon.entity.creatures.Creature creature33 = creatureFactory2.makeCreature(id30, world32);
    java.util.Collection<org.mafagafogigante.dungeon.entity.creatures.CreaturePreset> collection_creaturePreset34 = creatureFactory2.getPresets();
    org.mafagafogigante.dungeon.date.Date date35 = null;
    org.mafagafogigante.dungeon.game.World world36 = null;
    org.mafagafogigante.dungeon.stats.Statistics statistics37 = new org.mafagafogigante.dungeon.stats.Statistics();
    statistics37.writeStatistics();
    statistics37.writeStatistics();
    statistics37.writeStatistics();
    org.mafagafogigante.dungeon.stats.WorldStatistics worldStatistics41 = statistics37.getWorldStatistics();
    // The following exception was thrown during execution in test generation
    try {
    org.mafagafogigante.dungeon.entity.creatures.Hero hero42 = creatureFactory2.makeHero(date35, world36, statistics37);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(creaturePresetFactory_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(creature5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(integrity7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(percentage10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(integrity11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(integrity16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(percentage19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long28 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(creature33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(collection_creaturePreset34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(worldStatistics41);

  }

  @Test
  public void test458() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test458"); }

    org.mafagafogigante.dungeon.entity.items.ItemPreset itemPreset0 = new org.mafagafogigante.dungeon.entity.items.ItemPreset();
    org.mafagafogigante.dungeon.entity.Integrity integrity1 = itemPreset0.getIntegrity();
    org.mafagafogigante.dungeon.util.Percentage percentage2 = itemPreset0.getVisibility();
    boolean b3 = itemPreset0.isUnique();
    org.mafagafogigante.dungeon.entity.creatures.CreaturePreset creaturePreset4 = new org.mafagafogigante.dungeon.entity.creatures.CreaturePreset();
    org.mafagafogigante.dungeon.game.Id id5 = null;
    creaturePreset4.setWeaponId(id5);
    creaturePreset4.setAttack(57);
    org.mafagafogigante.dungeon.entity.Luminosity luminosity9 = creaturePreset4.getLuminosity();
    org.mafagafogigante.dungeon.entity.creatures.CreaturePreset creaturePreset10 = new org.mafagafogigante.dungeon.entity.creatures.CreaturePreset();
    org.mafagafogigante.dungeon.game.Id id11 = null;
    creaturePreset10.setWeaponId(id11);
    creaturePreset10.setAttack(57);
    org.mafagafogigante.dungeon.game.Id[] id_array15 = new org.mafagafogigante.dungeon.game.Id[] {  };
    java.util.ArrayList<org.mafagafogigante.dungeon.game.Id> arraylist_id16 = new java.util.ArrayList<org.mafagafogigante.dungeon.game.Id>();
    boolean b17 = java.util.Collections.addAll((java.util.Collection<org.mafagafogigante.dungeon.game.Id>)arraylist_id16, id_array15);
    creaturePreset10.setItems((java.util.List<org.mafagafogigante.dungeon.game.Id>)arraylist_id16);
    creaturePreset4.setItems((java.util.List<org.mafagafogigante.dungeon.game.Id>)arraylist_id16);
    org.mafagafogigante.dungeon.entity.items.ItemPreset itemPreset20 = new org.mafagafogigante.dungeon.entity.items.ItemPreset();
    org.mafagafogigante.dungeon.entity.Integrity integrity21 = itemPreset20.getIntegrity();
    org.mafagafogigante.dungeon.entity.Luminosity luminosity22 = itemPreset20.getLuminosity();
    org.mafagafogigante.dungeon.util.Percentage percentage24 = new org.mafagafogigante.dungeon.util.Percentage((double)57);
    itemPreset20.setVisibility(percentage24);
    creaturePreset4.setVisibility(percentage24);
    itemPreset0.setHitRate(percentage24);
    org.mafagafogigante.dungeon.util.Percentage percentage28 = itemPreset0.getHitRate();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(integrity1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(percentage2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(luminosity9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(id_array15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(integrity21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(luminosity22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(percentage28);

  }

//  @Test
//  public void test459() throws Throwable {
//
//    if (debug) { System.out.format("%n%s%n","RegressionTest2.test459"); }
//
//    org.mafagafogigante.dungeon.entity.creatures.CreaturePreset creaturePreset0 = new org.mafagafogigante.dungeon.entity.creatures.CreaturePreset();
//    org.mafagafogigante.dungeon.game.Id id1 = null;
//    creaturePreset0.setWeaponId(id1);
//    org.mafagafogigante.dungeon.game.Id id3 = creaturePreset0.getId();
//    org.mafagafogigante.dungeon.entity.Luminosity luminosity4 = creaturePreset0.getLuminosity();
//    org.mafagafogigante.dungeon.entity.creatures.Drop[] drop_array5 = new org.mafagafogigante.dungeon.entity.creatures.Drop[] {  };
//    java.util.ArrayList<org.mafagafogigante.dungeon.entity.creatures.Drop> arraylist_drop6 = new java.util.ArrayList<org.mafagafogigante.dungeon.entity.creatures.Drop>();
//    boolean b7 = java.util.Collections.addAll((java.util.Collection<org.mafagafogigante.dungeon.entity.creatures.Drop>)arraylist_drop6, drop_array5);
//    creaturePreset0.setDropList((java.util.List<org.mafagafogigante.dungeon.entity.creatures.Drop>)arraylist_drop6);
//    org.mafagafogigante.dungeon.game.PartOfDay partOfDay9 = org.mafagafogigante.dungeon.game.PartOfDay.NIGHT;
//    org.mafagafogigante.dungeon.entity.Luminosity luminosity10 = partOfDay9.getLuminosity();
//    org.mafagafogigante.dungeon.game.Name name11 = partOfDay9.getName();
//    java.lang.String str13 = name11.getQuantifiedName((int)'a');
//    java.lang.String str14 = name11.getPlural();
//    creaturePreset0.setName(name11);
//    org.mafagafogigante.dungeon.game.Id id16 = creaturePreset0.getId();
//    org.mafagafogigante.dungeon.entity.creatures.AttackAlgorithmId attackAlgorithmId17 = creaturePreset0.getAttackAlgorithmId();
//    
//    // Regression assertion (captures the current behavior of the code)
//    org.junit.Assert.assertNull(id3);
//    
//    // Regression assertion (captures the current behavior of the code)
//    org.junit.Assert.assertNotNull(luminosity4);
//    
//    // Regression assertion (captures the current behavior of the code)
//    org.junit.Assert.assertNotNull(drop_array5);
//    
//    // Regression assertion (captures the current behavior of the code)
//    org.junit.Assert.assertTrue(b7 == false);
//    org.junit.Assert.assertTrue("'" + partOfDay9 + "' != '" + org.mafagafogigante.dungeon.game.PartOfDay.NIGHT + "'", partOfDay9.equals(org.mafagafogigante.dungeon.game.PartOfDay.NIGHT));
//    
//    // Regression assertion (captures the current behavior of the code)
//    org.junit.Assert.assertNotNull(luminosity10);
//    
//    // Regression assertion (captures the current behavior of the code)
//    org.junit.Assert.assertNotNull(name11);
//    
//    // Regression assertion (captures the current behavior of the code)
//    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "a few Nights"+ "'", str13.equals("a few Nights"));
//    
//    // Regression assertion (captures the current behavior of the code)
//    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "Nights"+ "'", str14.equals("Nights"));
//    
//    // Regression assertion (captures the current behavior of the code)
//    org.junit.Assert.assertNull(id16);
//    
//    // Regression assertion (captures the current behavior of the code)
//    org.junit.Assert.assertNull(attackAlgorithmId17);
//
//  }

  @Test
  public void test460() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test460"); }

    org.mafagafogigante.dungeon.entity.Integrity integrity2 = new org.mafagafogigante.dungeon.entity.Integrity(1, 0);
    boolean b3 = integrity2.isMaximum();
    org.mafagafogigante.dungeon.entity.items.Item item4 = null;
    org.mafagafogigante.dungeon.entity.items.ItemIntegrity itemIntegrity5 = org.mafagafogigante.dungeon.entity.items.ItemIntegrity.makeItemIntegrity(integrity2, item4);
    org.mafagafogigante.dungeon.util.Percentage percentage6 = itemIntegrity5.toPercentage();
    boolean b7 = itemIntegrity5.isPerfect();
    int i8 = itemIntegrity5.getCurrent();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(itemIntegrity5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(percentage6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 0);

  }

  @Test
  public void test461() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test461"); }

    org.mafagafogigante.dungeon.entity.items.ItemPreset itemPreset0 = new org.mafagafogigante.dungeon.entity.items.ItemPreset();
    org.mafagafogigante.dungeon.entity.Integrity integrity1 = itemPreset0.getIntegrity();
    org.mafagafogigante.dungeon.entity.Integrity integrity2 = null;
    itemPreset0.setIntegrity(integrity2);
    org.mafagafogigante.dungeon.entity.Integrity integrity4 = itemPreset0.getIntegrity();
    org.mafagafogigante.dungeon.util.Percentage percentage5 = itemPreset0.getHitRate();
    int i6 = itemPreset0.getDrinkableHealing();
    int i7 = itemPreset0.getNutrition();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(integrity1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(integrity4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(percentage5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);

  }

  @Test
  public void test462() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test462"); }

    org.mafagafogigante.dungeon.entity.items.ItemPreset itemPreset1 = new org.mafagafogigante.dungeon.entity.items.ItemPreset();
    org.mafagafogigante.dungeon.entity.Integrity integrity2 = itemPreset1.getIntegrity();
    org.mafagafogigante.dungeon.entity.Integrity integrity3 = null;
    itemPreset1.setIntegrity(integrity3);
    org.mafagafogigante.dungeon.util.Percentage percentage5 = itemPreset1.getVisibility();
    java.lang.String str6 = itemPreset1.getType();
    itemPreset1.setIntegrityDecrementOnHit((int)(short)100);
    org.mafagafogigante.dungeon.entity.TagSet<org.mafagafogigante.dungeon.entity.items.Item.Tag> tagset_tag9 = itemPreset1.getTagSet();
    org.mafagafogigante.dungeon.entity.Weight weight11 = org.mafagafogigante.dungeon.entity.Weight.newInstance((double)(byte)-1);
    itemPreset1.setWeight(weight11);
    org.mafagafogigante.dungeon.entity.items.ItemPreset itemPreset13 = new org.mafagafogigante.dungeon.entity.items.ItemPreset();
    org.mafagafogigante.dungeon.entity.Integrity integrity14 = itemPreset13.getIntegrity();
    org.mafagafogigante.dungeon.entity.Integrity integrity15 = null;
    itemPreset13.setIntegrity(integrity15);
    org.mafagafogigante.dungeon.util.Percentage percentage18 = new org.mafagafogigante.dungeon.util.Percentage((double)'#');
    itemPreset13.setHitRate(percentage18);
    itemPreset1.setHitRate(percentage18);
    org.mafagafogigante.dungeon.entity.items.WeaponComponent weaponComponent22 = new org.mafagafogigante.dungeon.entity.items.WeaponComponent(97, percentage18, 3);
    org.mafagafogigante.dungeon.util.Percentage percentage23 = weaponComponent22.getHitRate();
    org.mafagafogigante.dungeon.util.Percentage percentage25 = new org.mafagafogigante.dungeon.util.Percentage((double)'#');
    boolean b27 = percentage25.equals((java.lang.Object)10.0d);
    double d28 = percentage25.toDouble();
    org.mafagafogigante.dungeon.entity.Luminosity luminosity29 = new org.mafagafogigante.dungeon.entity.Luminosity(percentage25);
    org.mafagafogigante.dungeon.entity.items.ItemPreset itemPreset30 = new org.mafagafogigante.dungeon.entity.items.ItemPreset();
    org.mafagafogigante.dungeon.entity.Integrity integrity31 = itemPreset30.getIntegrity();
    itemPreset30.setIntegrityDecrementOnEat((-1));
    org.mafagafogigante.dungeon.entity.Weight weight34 = itemPreset30.getWeight();
    itemPreset30.setDrinkableHealing((int)(byte)1);
    org.mafagafogigante.dungeon.entity.items.ItemPreset itemPreset37 = new org.mafagafogigante.dungeon.entity.items.ItemPreset();
    org.mafagafogigante.dungeon.entity.Integrity integrity38 = itemPreset37.getIntegrity();
    org.mafagafogigante.dungeon.entity.Integrity integrity39 = null;
    itemPreset37.setIntegrity(integrity39);
    org.mafagafogigante.dungeon.util.Percentage percentage41 = itemPreset37.getVisibility();
    java.lang.String str42 = itemPreset37.getType();
    itemPreset37.setIntegrityDecrementOnHit((int)(short)100);
    org.mafagafogigante.dungeon.util.Percentage percentage46 = new org.mafagafogigante.dungeon.util.Percentage((double)57);
    itemPreset37.setVisibility(percentage46);
    itemPreset30.setVisibility(percentage46);
    boolean b49 = percentage25.biggerThanOrEqualTo(percentage46);
    int i50 = percentage23.compareTo(percentage25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(integrity2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(percentage5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(tagset_tag9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(weight11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(integrity14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(percentage23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d28 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(integrity31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(weight34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(integrity38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(percentage41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i50 == 0);

  }

  @Test
  public void test463() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test463"); }

    org.mafagafogigante.dungeon.entity.creatures.Creature creature1 = null;
    org.mafagafogigante.dungeon.entity.creatures.CreatureHealth creatureHealth2 = org.mafagafogigante.dungeon.entity.creatures.CreatureHealth.makeCreatureHealth(100, creature1);
    int i3 = creatureHealth2.getMaximum();
    creatureHealth2.decrementBy((int)(short)10);
    boolean b6 = creatureHealth2.isAlive();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(creatureHealth2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);

  }

  @Test
  public void test464() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test464"); }

    org.mafagafogigante.dungeon.commands.CommandHistory commandHistory0 = new org.mafagafogigante.dungeon.commands.CommandHistory();
    java.lang.String str2 = commandHistory0.getLastSimilarCommand("");
    java.lang.String str4 = commandHistory0.getLastSimilarCommand("Unarmed : UNARMED");
    org.mafagafogigante.dungeon.commands.CommandHistory.Cursor cursor5 = commandHistory0.getCursor();
    org.mafagafogigante.dungeon.commands.CommandHistory.Cursor cursor6 = cursor5.moveUp();
    org.mafagafogigante.dungeon.commands.CommandHistory.Cursor cursor7 = cursor5.moveDown();
    org.mafagafogigante.dungeon.commands.CommandHistory.Cursor cursor8 = cursor7.moveUp();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(cursor5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(cursor6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(cursor7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(cursor8);

  }

  @Test
  public void test465() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test465"); }

    org.mafagafogigante.dungeon.date.Date date3 = new org.mafagafogigante.dungeon.date.Date((long)'a', (long)1, (long)81);
    org.mafagafogigante.dungeon.world.Weather weather4 = new org.mafagafogigante.dungeon.world.Weather(date3);
    org.mafagafogigante.dungeon.date.Date date8 = new org.mafagafogigante.dungeon.date.Date((long)82800, 60L, (long)0);
    org.mafagafogigante.dungeon.world.WeatherCondition weatherCondition9 = weather4.getCurrentCondition(date8);
    java.lang.String str10 = weatherCondition9.toDescriptiveString();
    org.junit.Assert.assertTrue("'" + weatherCondition9 + "' != '" + org.mafagafogigante.dungeon.world.WeatherCondition.OVERCAST + "'", weatherCondition9.equals(org.mafagafogigante.dungeon.world.WeatherCondition.OVERCAST));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "the sky is overcast"+ "'", str10.equals("the sky is overcast"));

  }

  @Test
  public void test466() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test466"); }

    org.mafagafogigante.dungeon.entity.items.ItemPreset itemPreset0 = new org.mafagafogigante.dungeon.entity.items.ItemPreset();
    org.mafagafogigante.dungeon.entity.Integrity integrity1 = itemPreset0.getIntegrity();
    itemPreset0.setIntegrityDecrementOnEat((-1));
    org.mafagafogigante.dungeon.entity.Weight weight4 = itemPreset0.getWeight();
    itemPreset0.setDrinkableHealing((int)(byte)1);
    int i7 = itemPreset0.getDamage();
    itemPreset0.setDrinkableDoses(97);
    itemPreset0.setDrinkableDoses((int)'4');
    int i12 = itemPreset0.getIntegrityDecrementOnEat();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(integrity1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(weight4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == (-1));

  }

  @Test
  public void test467() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test467"); }

    org.mafagafogigante.dungeon.achievements.BattleStatisticsQuery battleStatisticsQuery0 = new org.mafagafogigante.dungeon.achievements.BattleStatisticsQuery();
    boolean b2 = battleStatisticsQuery0.equals((java.lang.Object)0.0d);
    org.mafagafogigante.dungeon.date.Date date6 = new org.mafagafogigante.dungeon.date.Date(10L, 100L, 100L);
    org.mafagafogigante.dungeon.date.Date date10 = new org.mafagafogigante.dungeon.date.Date(10L, 100L, 100L);
    int i11 = date6.compareTo(date10);
    long long12 = date10.getDay();
    org.mafagafogigante.dungeon.game.PartOfDay partOfDay13 = org.mafagafogigante.dungeon.game.PartOfDay.NIGHT;
    int i14 = org.mafagafogigante.dungeon.game.PartOfDay.getSecondsToNext(date10, partOfDay13);
    java.lang.String str15 = partOfDay13.toString();
    battleStatisticsQuery0.setPartOfDay(partOfDay13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long12 == 10L);
    org.junit.Assert.assertTrue("'" + partOfDay13 + "' != '" + org.mafagafogigante.dungeon.game.PartOfDay.NIGHT + "'", partOfDay13.equals(org.mafagafogigante.dungeon.game.PartOfDay.NIGHT));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 3600);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "Night"+ "'", str15.equals("Night"));

  }

  @Test
  public void test468() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test468"); }

    org.mafagafogigante.dungeon.entity.items.ItemPreset itemPreset0 = new org.mafagafogigante.dungeon.entity.items.ItemPreset();
    org.mafagafogigante.dungeon.entity.Integrity integrity1 = itemPreset0.getIntegrity();
    org.mafagafogigante.dungeon.entity.Integrity integrity2 = null;
    itemPreset0.setIntegrity(integrity2);
    org.mafagafogigante.dungeon.util.Percentage percentage4 = itemPreset0.getVisibility();
    java.lang.String str5 = itemPreset0.getType();
    itemPreset0.setIntegrityDecrementOnHit((int)(short)100);
    org.mafagafogigante.dungeon.util.Percentage percentage9 = new org.mafagafogigante.dungeon.util.Percentage((double)57);
    itemPreset0.setVisibility(percentage9);
    org.mafagafogigante.dungeon.game.Id id11 = null;
    itemPreset0.setId(id11);
    itemPreset0.setPutrefactionPeriod((long)(short)1);
    int i15 = itemPreset0.getDrinkableHealing();
    org.mafagafogigante.dungeon.game.PartOfDay partOfDay16 = org.mafagafogigante.dungeon.game.PartOfDay.MIDNIGHT;
    org.mafagafogigante.dungeon.game.Name name17 = partOfDay16.getName();
    itemPreset0.setName(name17);
    org.mafagafogigante.dungeon.entity.items.ItemPreset itemPreset19 = new org.mafagafogigante.dungeon.entity.items.ItemPreset();
    org.mafagafogigante.dungeon.entity.Integrity integrity20 = itemPreset19.getIntegrity();
    org.mafagafogigante.dungeon.entity.Integrity integrity21 = null;
    itemPreset19.setIntegrity(integrity21);
    org.mafagafogigante.dungeon.util.Percentage percentage23 = itemPreset19.getVisibility();
    java.lang.String str24 = itemPreset19.getType();
    itemPreset19.setIntegrityDecrementOnHit((int)(short)100);
    org.mafagafogigante.dungeon.util.Percentage percentage28 = new org.mafagafogigante.dungeon.util.Percentage((double)57);
    itemPreset19.setVisibility(percentage28);
    org.mafagafogigante.dungeon.util.Percentage percentage31 = new org.mafagafogigante.dungeon.util.Percentage((double)57);
    int i32 = percentage28.compareTo(percentage31);
    itemPreset0.setHitRate(percentage28);
    org.mafagafogigante.dungeon.util.Percentage percentage34 = itemPreset0.getVisibility();
    int i35 = itemPreset0.getDamage();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(integrity1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(percentage4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 0);
    org.junit.Assert.assertTrue("'" + partOfDay16 + "' != '" + org.mafagafogigante.dungeon.game.PartOfDay.MIDNIGHT + "'", partOfDay16.equals(org.mafagafogigante.dungeon.game.PartOfDay.MIDNIGHT));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(name17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(integrity20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(percentage23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i32 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(percentage34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i35 == 0);

  }

  @Test
  public void test469() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test469"); }

    org.mafagafogigante.dungeon.entity.Weight weight1 = org.mafagafogigante.dungeon.entity.Weight.newInstance((double)(byte)-1);
    org.mafagafogigante.dungeon.entity.items.ItemPreset itemPreset2 = new org.mafagafogigante.dungeon.entity.items.ItemPreset();
    org.mafagafogigante.dungeon.entity.Integrity integrity3 = itemPreset2.getIntegrity();
    org.mafagafogigante.dungeon.entity.Integrity integrity4 = null;
    itemPreset2.setIntegrity(integrity4);
    org.mafagafogigante.dungeon.util.Percentage percentage6 = itemPreset2.getVisibility();
    boolean b7 = itemPreset2.isUnique();
    org.mafagafogigante.dungeon.entity.Weight weight9 = org.mafagafogigante.dungeon.entity.Weight.newInstance((double)(byte)-1);
    org.mafagafogigante.dungeon.entity.Weight weight10 = org.mafagafogigante.dungeon.entity.Weight.ZERO;
    org.mafagafogigante.dungeon.entity.Weight weight11 = weight9.add(weight10);
    java.lang.String str12 = weight11.toString();
    itemPreset2.setWeight(weight11);
    int i14 = weight1.compareTo(weight11);
    org.mafagafogigante.dungeon.entity.Weight weight16 = org.mafagafogigante.dungeon.entity.Weight.newInstance((double)(byte)-1);
    int i17 = weight1.compareTo(weight16);
    org.mafagafogigante.dungeon.entity.Integrity integrity20 = new org.mafagafogigante.dungeon.entity.Integrity(1, 0);
    boolean b21 = integrity20.isMaximum();
    org.mafagafogigante.dungeon.entity.items.Item item22 = null;
    org.mafagafogigante.dungeon.entity.items.ItemIntegrity itemIntegrity23 = org.mafagafogigante.dungeon.entity.items.ItemIntegrity.makeItemIntegrity(integrity20, item22);
    org.mafagafogigante.dungeon.util.Percentage percentage24 = itemIntegrity23.toPercentage();
    org.mafagafogigante.dungeon.entity.Weight weight25 = weight1.multiply(percentage24);
    org.mafagafogigante.dungeon.entity.Weight weight27 = org.mafagafogigante.dungeon.entity.Weight.newInstance((double)(byte)-1);
    org.mafagafogigante.dungeon.entity.items.ItemPreset itemPreset28 = new org.mafagafogigante.dungeon.entity.items.ItemPreset();
    org.mafagafogigante.dungeon.entity.Integrity integrity29 = itemPreset28.getIntegrity();
    org.mafagafogigante.dungeon.entity.Integrity integrity30 = null;
    itemPreset28.setIntegrity(integrity30);
    org.mafagafogigante.dungeon.util.Percentage percentage32 = itemPreset28.getVisibility();
    boolean b33 = itemPreset28.isUnique();
    org.mafagafogigante.dungeon.entity.Weight weight35 = org.mafagafogigante.dungeon.entity.Weight.newInstance((double)(byte)-1);
    org.mafagafogigante.dungeon.entity.Weight weight36 = org.mafagafogigante.dungeon.entity.Weight.ZERO;
    org.mafagafogigante.dungeon.entity.Weight weight37 = weight35.add(weight36);
    java.lang.String str38 = weight37.toString();
    itemPreset28.setWeight(weight37);
    int i40 = weight27.compareTo(weight37);
    org.mafagafogigante.dungeon.entity.Weight weight42 = org.mafagafogigante.dungeon.entity.Weight.newInstance((double)(byte)-1);
    org.mafagafogigante.dungeon.entity.Weight weight43 = org.mafagafogigante.dungeon.entity.Weight.ZERO;
    org.mafagafogigante.dungeon.entity.Weight weight44 = weight42.add(weight43);
    int i45 = weight27.compareTo(weight44);
    int i46 = weight25.compareTo(weight27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(weight1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(integrity3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(percentage6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(weight9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(weight10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(weight11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "0 kg"+ "'", str12.equals("0 kg"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(weight16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(itemIntegrity23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(percentage24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(weight25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(weight27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(integrity29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(percentage32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(weight35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(weight36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(weight37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str38 + "' != '" + "0 kg"+ "'", str38.equals("0 kg"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i40 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(weight42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(weight43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(weight44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i45 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i46 == 0);

  }

  @Test
  public void test470() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test470"); }

    java.awt.Color color1 = null;
    org.mafagafogigante.dungeon.game.LocationDescription locationDescription2 = new org.mafagafogigante.dungeon.game.LocationDescription('a', color1);
    java.awt.Color color3 = locationDescription2.getColor();
    locationDescription2.setInfo("BattleStatisticsQuery{id=null, type='null', causeOfDeath=null, partOfDay=null}");
    locationDescription2.setInfo("BattleStatisticsRequirement{query=BattleStatisticsQuery{id=null, type='null', causeOfDeath=null, partOfDay=null}, count=100}");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(color3);

  }

  @Test
  public void test471() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test471"); }

    org.mafagafogigante.dungeon.entity.items.ItemPresetFactory[] itemPresetFactory_array0 = new org.mafagafogigante.dungeon.entity.items.ItemPresetFactory[] {  };
    org.mafagafogigante.dungeon.entity.items.ItemFactory itemFactory1 = new org.mafagafogigante.dungeon.entity.items.ItemFactory(itemPresetFactory_array0);
    org.mafagafogigante.dungeon.entity.items.ItemPreset itemPreset2 = new org.mafagafogigante.dungeon.entity.items.ItemPreset();
    org.mafagafogigante.dungeon.entity.Integrity integrity3 = itemPreset2.getIntegrity();
    org.mafagafogigante.dungeon.entity.Integrity integrity4 = null;
    itemPreset2.setIntegrity(integrity4);
    org.mafagafogigante.dungeon.util.Percentage percentage6 = itemPreset2.getVisibility();
    org.mafagafogigante.dungeon.entity.Integrity integrity7 = itemPreset2.getIntegrity();
    java.lang.String str8 = itemPreset2.getText();
    java.lang.String str9 = itemPreset2.getType();
    org.mafagafogigante.dungeon.entity.Integrity integrity12 = new org.mafagafogigante.dungeon.entity.Integrity(1, 0);
    boolean b13 = integrity12.isMaximum();
    integrity12.incrementBy((int)(short)0);
    org.mafagafogigante.dungeon.util.Percentage percentage16 = integrity12.toPercentage();
    itemPreset2.setHitRate(percentage16);
    org.mafagafogigante.dungeon.game.Id id19 = new org.mafagafogigante.dungeon.game.Id("100");
    java.lang.String str20 = id19.toString();
    itemPreset2.setId(id19);
    org.mafagafogigante.dungeon.entity.items.BookComponent bookComponent23 = new org.mafagafogigante.dungeon.entity.items.BookComponent(id19, "DungeonString{coloredStringList=[ColoredString{string='hi!hi!DamagedBattleStatistics{records=CounterMap{map={}}}', color=java.awt.Color[r=192,g=192,b=192]}], currentColor=java.awt.Color[r=192,g=192,b=192]}");
    boolean b24 = itemFactory1.canMakeItem(id19);
    org.mafagafogigante.dungeon.game.Id id25 = org.mafagafogigante.dungeon.entity.creatures.CorpseItemPresetFactory.makeCorpseIdFromCreatureId(id19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(itemPresetFactory_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(integrity3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(percentage6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(integrity7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(percentage16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + "100"+ "'", str20.equals("100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(id25);

  }

  @Test
  public void test472() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test472"); }

    org.mafagafogigante.dungeon.entity.creatures.Hero hero0 = null;
    org.mafagafogigante.dungeon.entity.creatures.HeroSpellcaster heroSpellcaster1 = new org.mafagafogigante.dungeon.entity.creatures.HeroSpellcaster(hero0);
    java.util.List<org.mafagafogigante.dungeon.spells.Spell> list_spell2 = heroSpellcaster1.getSpellList();
    java.lang.String[] str_array3 = new java.lang.String[] {  };
    heroSpellcaster1.parseCast(str_array3);
    org.mafagafogigante.dungeon.spells.Spell spell5 = null;
    boolean b6 = heroSpellcaster1.knowsSpell(spell5);
    org.mafagafogigante.dungeon.spells.Spell spell7 = null;
    boolean b8 = heroSpellcaster1.knowsSpell(spell7);
    org.mafagafogigante.dungeon.spells.Spell spell9 = null;
    boolean b10 = heroSpellcaster1.knowsSpell(spell9);
    org.mafagafogigante.dungeon.game.DungeonString dungeonString12 = new org.mafagafogigante.dungeon.game.DungeonString("hi!");
    java.lang.String[] str_array17 = new java.lang.String[] { "hi!", "Damaged", "BattleStatistics{records=CounterMap{map={}}}", "" };
    dungeonString12.append(str_array17);
    java.lang.String[] str_array24 = new java.lang.String[] { "hi!", "visibilityCriteria=VisibilityCriteria{[]}", "visibilityCriteria=VisibilityCriteria{[]}", "Damaged", "hi!" };
    org.mafagafogigante.dungeon.util.Table table25 = new org.mafagafogigante.dungeon.util.Table(str_array24);
    dungeonString12.append(str_array24);
    heroSpellcaster1.parseCast(str_array24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_spell2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array24);

  }

  @Test
  public void test473() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test473"); }

    org.mafagafogigante.dungeon.game.MinimumBoundingRectangle minimumBoundingRectangle2 = new org.mafagafogigante.dungeon.game.MinimumBoundingRectangle((int)' ', (int)(short)-1);
    int i3 = minimumBoundingRectangle2.getWidth();
    int i4 = minimumBoundingRectangle2.getWidth();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 32);

  }

  @Test
  public void test474() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test474"); }

    org.mafagafogigante.dungeon.schema.JsonRule jsonRule2 = org.mafagafogigante.dungeon.schema.rules.JsonRuleFactory.makeBoundIntegerRule((int)(short)-1, (int)(short)100);
    org.mafagafogigante.dungeon.schema.JsonRule jsonRule3 = org.mafagafogigante.dungeon.schema.rules.JsonRuleFactory.makeOptionalRule(jsonRule2);
    org.mafagafogigante.dungeon.schema.JsonRule jsonRule4 = org.mafagafogigante.dungeon.schema.rules.JsonRuleFactory.makeOptionalRule(jsonRule2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonRule2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonRule3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(jsonRule4);

  }

  @Test
  public void test475() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test475"); }

    org.mafagafogigante.dungeon.game.BlockedEntrances blockedEntrances0 = new org.mafagafogigante.dungeon.game.BlockedEntrances();
    org.mafagafogigante.dungeon.game.BlockedEntrances blockedEntrances1 = new org.mafagafogigante.dungeon.game.BlockedEntrances(blockedEntrances0);
    org.mafagafogigante.dungeon.game.BlockedEntrances blockedEntrances2 = new org.mafagafogigante.dungeon.game.BlockedEntrances(blockedEntrances0);

  }

  @Test
  public void test476() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test476"); }

    org.mafagafogigante.dungeon.util.CounterMap<java.lang.Comparable<java.lang.String>> countermap_comparable_str0 = new org.mafagafogigante.dungeon.util.CounterMap<java.lang.Comparable<java.lang.String>>();
    java.lang.String str1 = countermap_comparable_str0.toString();
    boolean b2 = countermap_comparable_str0.isNotEmpty();
    java.util.Set<java.lang.Comparable<java.lang.String>> set_comparable_str3 = countermap_comparable_str0.keySet();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "CounterMap{map={}}"+ "'", str1.equals("CounterMap{map={}}"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_comparable_str3);

  }

  @Test
  public void test477() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test477"); }

    org.mafagafogigante.dungeon.stats.Statistics statistics0 = new org.mafagafogigante.dungeon.stats.Statistics();
    statistics0.writeStatistics();
    statistics0.writeStatistics();
    org.mafagafogigante.dungeon.achievements.AchievementTracker achievementTracker3 = new org.mafagafogigante.dungeon.achievements.AchievementTracker(statistics0);
    org.mafagafogigante.dungeon.stats.Statistics statistics4 = new org.mafagafogigante.dungeon.stats.Statistics();
    statistics4.writeStatistics();
    statistics4.writeStatistics();
    org.mafagafogigante.dungeon.achievements.AchievementTracker achievementTracker7 = new org.mafagafogigante.dungeon.achievements.AchievementTracker(statistics4);
    org.mafagafogigante.dungeon.achievements.AchievementTracker achievementTracker8 = new org.mafagafogigante.dungeon.achievements.AchievementTracker(statistics4);
    java.util.Comparator<org.mafagafogigante.dungeon.achievements.UnlockedAchievement> comparator_unlockedAchievement9 = org.mafagafogigante.dungeon.achievements.comparators.UnlockedAchievementComparators.getDefaultComparator();
    java.util.List<org.mafagafogigante.dungeon.achievements.UnlockedAchievement> list_unlockedAchievement10 = achievementTracker8.getUnlockedAchievements(comparator_unlockedAchievement9);
    int i11 = achievementTracker8.getUnlockedCount();
    java.util.Comparator<org.mafagafogigante.dungeon.achievements.UnlockedAchievement> comparator_unlockedAchievement12 = org.mafagafogigante.dungeon.achievements.comparators.UnlockedAchievementComparators.getDefaultComparator();
    java.util.List<org.mafagafogigante.dungeon.achievements.UnlockedAchievement> list_unlockedAchievement13 = achievementTracker8.getUnlockedAchievements(comparator_unlockedAchievement12);
    java.util.List<org.mafagafogigante.dungeon.achievements.UnlockedAchievement> list_unlockedAchievement14 = achievementTracker3.getUnlockedAchievements(comparator_unlockedAchievement12);
    org.mafagafogigante.dungeon.achievements.AchievementStore achievementStore15 = null;
    org.mafagafogigante.dungeon.date.Date date19 = new org.mafagafogigante.dungeon.date.Date(10L, 100L, 100L);
    org.mafagafogigante.dungeon.date.Date date23 = new org.mafagafogigante.dungeon.date.Date(10L, 100L, 100L);
    int i24 = date19.compareTo(date23);
    java.lang.String str25 = date19.toTimeString();
    org.mafagafogigante.dungeon.date.Date date29 = new org.mafagafogigante.dungeon.date.Date(10L, 100L, 100L);
    org.mafagafogigante.dungeon.date.Date date33 = new org.mafagafogigante.dungeon.date.Date(10L, 100L, 100L);
    int i34 = date29.compareTo(date33);
    org.mafagafogigante.dungeon.game.PartOfDay partOfDay35 = org.mafagafogigante.dungeon.game.PartOfDay.getCorrespondingConstant(date29);
    long long36 = date29.getYear();
    org.mafagafogigante.dungeon.date.Date date40 = new org.mafagafogigante.dungeon.date.Date(10L, 100L, 100L);
    org.mafagafogigante.dungeon.date.Date date44 = new org.mafagafogigante.dungeon.date.Date(10L, 100L, 100L);
    int i45 = date40.compareTo(date44);
    long long46 = date40.getYear();
    int i47 = date29.compareTo(date40);
    java.lang.String str48 = date40.toDateString();
    int i49 = date19.compareTo(date40);
    org.mafagafogigante.dungeon.date.Date date53 = new org.mafagafogigante.dungeon.date.Date((long)97, (long)(byte)-1, (long)'#');
    org.mafagafogigante.dungeon.stats.BattleStatistics battleStatistics54 = new org.mafagafogigante.dungeon.stats.BattleStatistics();
    org.mafagafogigante.dungeon.achievements.BattleStatisticsRequirement battleStatisticsRequirement55 = null;
    boolean b56 = battleStatistics54.satisfies(battleStatisticsRequirement55);
    java.lang.String str57 = battleStatistics54.toString();
    org.mafagafogigante.dungeon.achievements.BattleStatisticsQuery battleStatisticsQuery58 = new org.mafagafogigante.dungeon.achievements.BattleStatisticsQuery();
    org.mafagafogigante.dungeon.achievements.BattleStatisticsRequirement battleStatisticsRequirement60 = new org.mafagafogigante.dungeon.achievements.BattleStatisticsRequirement(battleStatisticsQuery58, (int)(byte)100);
    boolean b61 = battleStatistics54.satisfies(battleStatisticsRequirement60);
    org.mafagafogigante.dungeon.util.CounterMap<org.mafagafogigante.dungeon.stats.CauseOfDeath> countermap_causeOfDeath62 = battleStatistics54.getKillsByCauseOfDeath();
    org.mafagafogigante.dungeon.util.CounterMap<org.mafagafogigante.dungeon.stats.CauseOfDeath> countermap_causeOfDeath63 = battleStatistics54.getKillsByCauseOfDeath();
    boolean b64 = date53.equals((java.lang.Object)countermap_causeOfDeath63);
    org.mafagafogigante.dungeon.date.DungeonTimeUnit dungeonTimeUnit66 = org.mafagafogigante.dungeon.date.DungeonTimeUnit.YEAR;
    org.mafagafogigante.dungeon.date.Date date67 = date53.plus(45056, dungeonTimeUnit66);
    java.lang.String str68 = date53.toDateString();
    int i69 = date40.compareTo(date53);
    // The following exception was thrown during execution in test generation
    try {
    achievementTracker3.update(achievementStore15, date40);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(comparator_unlockedAchievement9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_unlockedAchievement10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(comparator_unlockedAchievement12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_unlockedAchievement13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_unlockedAchievement14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + "00:00:00"+ "'", str25.equals("00:00:00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i34 == 0);
    org.junit.Assert.assertTrue("'" + partOfDay35 + "' != '" + org.mafagafogigante.dungeon.game.PartOfDay.MIDNIGHT + "'", partOfDay35.equals(org.mafagafogigante.dungeon.game.PartOfDay.MIDNIGHT));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long36 == 10L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i45 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long46 == 10L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i47 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str48 + "' != '" + "day 10 of month 10 of the year 10"+ "'", str48.equals("day 10 of month 10 of the year 10"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i49 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str57 + "' != '" + "BattleStatistics{records=CounterMap{map={}}}"+ "'", str57.equals("BattleStatistics{records=CounterMap{map={}}}"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(countermap_causeOfDeath62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(countermap_causeOfDeath63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b64 == false);
    org.junit.Assert.assertTrue("'" + dungeonTimeUnit66 + "' != '" + org.mafagafogigante.dungeon.date.DungeonTimeUnit.YEAR + "'", dungeonTimeUnit66.equals(org.mafagafogigante.dungeon.date.DungeonTimeUnit.YEAR));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(date67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str68 + "' != '" + "day 10 of month 1 of the year 97"+ "'", str68.equals("day 10 of month 1 of the year 97"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i69 == (-1));

  }

  @Test
  public void test478() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test478"); }

    org.mafagafogigante.dungeon.entity.items.ItemPreset itemPreset0 = new org.mafagafogigante.dungeon.entity.items.ItemPreset();
    org.mafagafogigante.dungeon.entity.Integrity integrity1 = itemPreset0.getIntegrity();
    org.mafagafogigante.dungeon.entity.Integrity integrity2 = null;
    itemPreset0.setIntegrity(integrity2);
    org.mafagafogigante.dungeon.util.Percentage percentage4 = itemPreset0.getVisibility();
    java.lang.String str5 = itemPreset0.getType();
    org.mafagafogigante.dungeon.entity.items.Item.Tag tag6 = org.mafagafogigante.dungeon.entity.items.Item.Tag.REPAIRABLE;
    itemPreset0.addTag(tag6);
    org.mafagafogigante.dungeon.util.Percentage percentage9 = new org.mafagafogigante.dungeon.util.Percentage((double)'#');
    boolean b11 = percentage9.equals((java.lang.Object)10.0d);
    org.mafagafogigante.dungeon.entity.Luminosity luminosity12 = new org.mafagafogigante.dungeon.entity.Luminosity(percentage9);
    itemPreset0.setVisibility(percentage9);
    java.lang.Object obj14 = null;
    boolean b15 = percentage9.equals(obj14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(integrity1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(percentage4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str5);
    org.junit.Assert.assertTrue("'" + tag6 + "' != '" + org.mafagafogigante.dungeon.entity.items.Item.Tag.REPAIRABLE + "'", tag6.equals(org.mafagafogigante.dungeon.entity.items.Item.Tag.REPAIRABLE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);

  }

  @Test
  public void test479() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test479"); }

    // The following exception was thrown during execution in test generation
    try {
    org.mafagafogigante.dungeon.game.Id id1 = new org.mafagafogigante.dungeon.game.Id("773.2 GiB");
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  @Test
  public void test480() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test480"); }

    org.mafagafogigante.dungeon.entity.items.ItemPreset itemPreset0 = new org.mafagafogigante.dungeon.entity.items.ItemPreset();
    org.mafagafogigante.dungeon.entity.Integrity integrity1 = itemPreset0.getIntegrity();
    org.mafagafogigante.dungeon.entity.Integrity integrity2 = null;
    itemPreset0.setIntegrity(integrity2);
    org.mafagafogigante.dungeon.util.Percentage percentage4 = itemPreset0.getVisibility();
    java.lang.String str5 = itemPreset0.getType();
    itemPreset0.setIntegrityDecrementOnHit((int)(short)100);
    org.mafagafogigante.dungeon.entity.TagSet<org.mafagafogigante.dungeon.entity.items.Item.Tag> tagset_tag8 = itemPreset0.getTagSet();
    org.mafagafogigante.dungeon.entity.Weight weight10 = org.mafagafogigante.dungeon.entity.Weight.newInstance((double)(byte)-1);
    itemPreset0.setWeight(weight10);
    org.mafagafogigante.dungeon.util.Percentage percentage13 = new org.mafagafogigante.dungeon.util.Percentage((double)57);
    itemPreset0.setVisibility(percentage13);
    org.mafagafogigante.dungeon.entity.Integrity integrity15 = itemPreset0.getIntegrity();
    org.mafagafogigante.dungeon.entity.Integrity integrity16 = itemPreset0.getIntegrity();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(integrity1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(percentage4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(tagset_tag8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(weight10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(integrity15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(integrity16);

  }

  @Test
  public void test481() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test481"); }

    org.mafagafogigante.dungeon.util.ShuffledRange shuffledRange2 = new org.mafagafogigante.dungeon.util.ShuffledRange(81, 46800);
    int i4 = shuffledRange2.get(81);
    int i5 = shuffledRange2.getSize();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 18614);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 46719);

  }

  @Test
  public void test482() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test482"); }

    org.mafagafogigante.dungeon.game.DungeonString dungeonString1 = new org.mafagafogigante.dungeon.game.DungeonString("User: Nicholas\nTime: 15:42:11\nDate: 2017-04-09\nJava: Java version 1.8.0_121 by Oracle Corporation\nHeap: Using 35.0 MiB out of the allocated 123.0 MiB\nOS: Windows 10 (amd64) 10.0");
    org.mafagafogigante.dungeon.date.Date date9 = new org.mafagafogigante.dungeon.date.Date(10L, 100L, 100L);
    org.mafagafogigante.dungeon.date.Date date13 = new org.mafagafogigante.dungeon.date.Date(10L, 100L, 100L);
    int i14 = date9.compareTo(date13);
    org.mafagafogigante.dungeon.game.PartOfDay partOfDay15 = org.mafagafogigante.dungeon.game.PartOfDay.getCorrespondingConstant(date9);
    java.lang.String[] str_array21 = new java.lang.String[] { "hi!", "visibilityCriteria=VisibilityCriteria{[]}", "visibilityCriteria=VisibilityCriteria{[]}", "Damaged", "hi!" };
    org.mafagafogigante.dungeon.util.Table table22 = new org.mafagafogigante.dungeon.util.Table(str_array21);
    java.util.List<org.mafagafogigante.dungeon.game.ColoredString> list_coloredString23 = table22.toColoredStringList();
    org.mafagafogigante.dungeon.game.ColoredString coloredString24 = org.mafagafogigante.dungeon.game.Random.select(list_coloredString23);
    boolean b25 = date9.equals((java.lang.Object)coloredString24);
    java.awt.Color color26 = coloredString24.getColor();
    org.mafagafogigante.dungeon.game.LocationDescription locationDescription27 = new org.mafagafogigante.dungeon.game.LocationDescription('a', color26);
    org.mafagafogigante.dungeon.game.DungeonString dungeonString28 = new org.mafagafogigante.dungeon.game.DungeonString("Evening", color26);
    org.mafagafogigante.dungeon.game.DungeonString dungeonString29 = new org.mafagafogigante.dungeon.game.DungeonString("", color26);
    org.mafagafogigante.dungeon.game.ColoredString coloredString30 = new org.mafagafogigante.dungeon.game.ColoredString("Sky{astronomicalBodies=[the Sun, a large, golden, spherical body, Mino, a small, dull white spherical body, Sario, a very small, green-tinted, perfectly spherical body]}", color26);
    dungeonString1.setColor(color26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 0);
    org.junit.Assert.assertTrue("'" + partOfDay15 + "' != '" + org.mafagafogigante.dungeon.game.PartOfDay.MIDNIGHT + "'", partOfDay15.equals(org.mafagafogigante.dungeon.game.PartOfDay.MIDNIGHT));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_coloredString23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(coloredString24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(color26);

  }

  @Test
  public void test483() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test483"); }

    org.mafagafogigante.dungeon.entity.items.ItemPreset itemPreset0 = new org.mafagafogigante.dungeon.entity.items.ItemPreset();
    org.mafagafogigante.dungeon.entity.Integrity integrity1 = itemPreset0.getIntegrity();
    itemPreset0.setIntegrityDecrementOnEat((-1));
    org.mafagafogigante.dungeon.entity.Weight weight4 = itemPreset0.getWeight();
    int i5 = itemPreset0.getNutrition();
    // The following exception was thrown during execution in test generation
    try {
    itemPreset0.setSpellId("it is raining");
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(integrity1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(weight4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 0);

  }

  @Test
  public void test484() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test484"); }

    org.mafagafogigante.dungeon.entity.items.ItemPreset itemPreset0 = new org.mafagafogigante.dungeon.entity.items.ItemPreset();
    org.mafagafogigante.dungeon.entity.Integrity integrity1 = itemPreset0.getIntegrity();
    itemPreset0.setIntegrityDecrementOnEat((-1));
    org.mafagafogigante.dungeon.entity.Weight weight4 = itemPreset0.getWeight();
    int i5 = itemPreset0.getIntegrityDecrementPerDose();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(integrity1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(weight4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 0);

  }

  @Test
  public void test485() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test485"); }

    org.mafagafogigante.dungeon.util.CircularList<org.mafagafogigante.dungeon.entity.creatures.Observer> circularlist_observer1 = new org.mafagafogigante.dungeon.util.CircularList<org.mafagafogigante.dungeon.entity.creatures.Observer>((int)'a');
    org.mafagafogigante.dungeon.world.VisibilityCriterion[] visibilityCriterion_array2 = new org.mafagafogigante.dungeon.world.VisibilityCriterion[] {  };
    org.mafagafogigante.dungeon.world.VisibilityCriteria visibilityCriteria3 = new org.mafagafogigante.dungeon.world.VisibilityCriteria(visibilityCriterion_array2);
    org.mafagafogigante.dungeon.entity.creatures.Creature creature4 = null;
    org.mafagafogigante.dungeon.entity.creatures.Observer observer5 = new org.mafagafogigante.dungeon.entity.creatures.Observer(creature4);
    boolean b6 = visibilityCriteria3.isMetBy(observer5);
    org.mafagafogigante.dungeon.entity.items.Item[] item_array7 = new org.mafagafogigante.dungeon.entity.items.Item[] {  };
    java.util.ArrayList<org.mafagafogigante.dungeon.entity.items.Item> arraylist_item8 = new java.util.ArrayList<org.mafagafogigante.dungeon.entity.items.Item>();
    boolean b9 = java.util.Collections.addAll((java.util.Collection<org.mafagafogigante.dungeon.entity.items.Item>)arraylist_item8, item_array7);
    org.mafagafogigante.dungeon.game.DungeonString dungeonString11 = new org.mafagafogigante.dungeon.game.DungeonString("hi!");
    java.lang.String[] str_array16 = new java.lang.String[] { "hi!", "Damaged", "BattleStatistics{records=CounterMap{map={}}}", "" };
    dungeonString11.append(str_array16);
    observer5.writeItemSight((java.util.List<org.mafagafogigante.dungeon.entity.items.Item>)arraylist_item8, dungeonString11);
    org.mafagafogigante.dungeon.entity.creatures.Creature[] creature_array19 = new org.mafagafogigante.dungeon.entity.creatures.Creature[] {  };
    java.util.ArrayList<org.mafagafogigante.dungeon.entity.creatures.Creature> arraylist_creature20 = new java.util.ArrayList<org.mafagafogigante.dungeon.entity.creatures.Creature>();
    boolean b21 = java.util.Collections.addAll((java.util.Collection<org.mafagafogigante.dungeon.entity.creatures.Creature>)arraylist_creature20, creature_array19);
    org.mafagafogigante.dungeon.game.DungeonString dungeonString23 = new org.mafagafogigante.dungeon.game.DungeonString("hi!");
    java.lang.String[] str_array28 = new java.lang.String[] { "hi!", "Damaged", "BattleStatistics{records=CounterMap{map={}}}", "" };
    dungeonString23.append(str_array28);
    java.lang.String str30 = dungeonString23.toString();
    org.mafagafogigante.dungeon.game.Point point34 = new org.mafagafogigante.dungeon.game.Point(10, (int)'a', 0);
    java.lang.String[] str_array37 = new java.lang.String[] { "", "" };
    org.mafagafogigante.dungeon.util.Table table38 = new org.mafagafogigante.dungeon.util.Table(str_array37);
    boolean b39 = point34.equals((java.lang.Object)str_array37);
    dungeonString23.append(str_array37);
    observer5.writeCreatureSight((java.util.List<org.mafagafogigante.dungeon.entity.creatures.Creature>)arraylist_creature20, dungeonString23);
    org.mafagafogigante.dungeon.entity.items.Item[] item_array42 = new org.mafagafogigante.dungeon.entity.items.Item[] {  };
    java.util.ArrayList<org.mafagafogigante.dungeon.entity.items.Item> arraylist_item43 = new java.util.ArrayList<org.mafagafogigante.dungeon.entity.items.Item>();
    boolean b44 = java.util.Collections.addAll((java.util.Collection<org.mafagafogigante.dungeon.entity.items.Item>)arraylist_item43, item_array42);
    org.mafagafogigante.dungeon.game.DungeonString dungeonString46 = new org.mafagafogigante.dungeon.game.DungeonString("hi!");
    java.lang.String[] str_array51 = new java.lang.String[] { "hi!", "Damaged", "BattleStatistics{records=CounterMap{map={}}}", "" };
    dungeonString46.append(str_array51);
    java.lang.String str53 = dungeonString46.toString();
    org.mafagafogigante.dungeon.game.Point point57 = new org.mafagafogigante.dungeon.game.Point(10, (int)'a', 0);
    java.lang.String[] str_array60 = new java.lang.String[] { "", "" };
    org.mafagafogigante.dungeon.util.Table table61 = new org.mafagafogigante.dungeon.util.Table(str_array60);
    boolean b62 = point57.equals((java.lang.Object)str_array60);
    dungeonString46.append(str_array60);
    java.util.List<org.mafagafogigante.dungeon.entity.items.Item> list_item64 = org.mafagafogigante.dungeon.entity.creatures.HeroUtils.findItems((java.util.List<org.mafagafogigante.dungeon.entity.items.Item>)arraylist_item43, str_array60);
    org.mafagafogigante.dungeon.game.DungeonString dungeonString66 = new org.mafagafogigante.dungeon.game.DungeonString("hi!");
    java.lang.String[] str_array71 = new java.lang.String[] { "hi!", "Damaged", "BattleStatistics{records=CounterMap{map={}}}", "" };
    dungeonString66.append(str_array71);
    org.mafagafogigante.dungeon.gui.WritingSpecifications writingSpecifications73 = null;
    org.mafagafogigante.dungeon.io.Writer.write((org.mafagafogigante.dungeon.game.Writable)dungeonString66, writingSpecifications73);
    observer5.writeItemSight((java.util.List<org.mafagafogigante.dungeon.entity.items.Item>)arraylist_item43, dungeonString66);
    circularlist_observer1.add(observer5);
    // The following exception was thrown during execution in test generation
    try {
    org.mafagafogigante.dungeon.entity.creatures.Observer observer78 = circularlist_observer1.get((int)(short)10);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(visibilityCriterion_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(item_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(creature_array19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str30 + "' != '" + "DungeonString{coloredStringList=[ColoredString{string='hi!hi!DamagedBattleStatistics{records=CounterMap{map={}}}', color=java.awt.Color[r=192,g=192,b=192]}], currentColor=java.awt.Color[r=192,g=192,b=192]}"+ "'", str30.equals("DungeonString{coloredStringList=[ColoredString{string='hi!hi!DamagedBattleStatistics{records=CounterMap{map={}}}', color=java.awt.Color[r=192,g=192,b=192]}], currentColor=java.awt.Color[r=192,g=192,b=192]}"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(item_array42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str53 + "' != '" + "DungeonString{coloredStringList=[ColoredString{string='hi!hi!DamagedBattleStatistics{records=CounterMap{map={}}}', color=java.awt.Color[r=192,g=192,b=192]}], currentColor=java.awt.Color[r=192,g=192,b=192]}"+ "'", str53.equals("DungeonString{coloredStringList=[ColoredString{string='hi!hi!DamagedBattleStatistics{records=CounterMap{map={}}}', color=java.awt.Color[r=192,g=192,b=192]}], currentColor=java.awt.Color[r=192,g=192,b=192]}"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_item64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array71);

  }

  @Test
  public void test486() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test486"); }

    org.mafagafogigante.dungeon.entity.Integrity integrity2 = new org.mafagafogigante.dungeon.entity.Integrity((int)(byte)1, (int)(byte)0);
    boolean b3 = integrity2.isMaximum();
    org.mafagafogigante.dungeon.entity.items.Item item4 = null;
    org.mafagafogigante.dungeon.entity.items.ItemIntegrity itemIntegrity5 = org.mafagafogigante.dungeon.entity.items.ItemIntegrity.makeItemIntegrity(integrity2, item4);
    itemIntegrity5.incrementBy((int)(byte)0);
    int i8 = itemIntegrity5.getMaximum();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(itemIntegrity5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);

  }

  @Test
  public void test487() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test487"); }

    org.mafagafogigante.dungeon.entity.items.ItemPreset itemPreset0 = new org.mafagafogigante.dungeon.entity.items.ItemPreset();
    org.mafagafogigante.dungeon.entity.Integrity integrity1 = itemPreset0.getIntegrity();
    org.mafagafogigante.dungeon.util.Percentage percentage2 = itemPreset0.getVisibility();
    boolean b3 = itemPreset0.isUnique();
    org.mafagafogigante.dungeon.entity.creatures.CreaturePreset creaturePreset4 = new org.mafagafogigante.dungeon.entity.creatures.CreaturePreset();
    org.mafagafogigante.dungeon.game.Id id5 = null;
    creaturePreset4.setWeaponId(id5);
    creaturePreset4.setAttack(57);
    org.mafagafogigante.dungeon.entity.Luminosity luminosity9 = creaturePreset4.getLuminosity();
    org.mafagafogigante.dungeon.entity.creatures.CreaturePreset creaturePreset10 = new org.mafagafogigante.dungeon.entity.creatures.CreaturePreset();
    org.mafagafogigante.dungeon.game.Id id11 = null;
    creaturePreset10.setWeaponId(id11);
    creaturePreset10.setAttack(57);
    org.mafagafogigante.dungeon.game.Id[] id_array15 = new org.mafagafogigante.dungeon.game.Id[] {  };
    java.util.ArrayList<org.mafagafogigante.dungeon.game.Id> arraylist_id16 = new java.util.ArrayList<org.mafagafogigante.dungeon.game.Id>();
    boolean b17 = java.util.Collections.addAll((java.util.Collection<org.mafagafogigante.dungeon.game.Id>)arraylist_id16, id_array15);
    creaturePreset10.setItems((java.util.List<org.mafagafogigante.dungeon.game.Id>)arraylist_id16);
    creaturePreset4.setItems((java.util.List<org.mafagafogigante.dungeon.game.Id>)arraylist_id16);
    org.mafagafogigante.dungeon.entity.items.ItemPreset itemPreset20 = new org.mafagafogigante.dungeon.entity.items.ItemPreset();
    org.mafagafogigante.dungeon.entity.Integrity integrity21 = itemPreset20.getIntegrity();
    org.mafagafogigante.dungeon.entity.Luminosity luminosity22 = itemPreset20.getLuminosity();
    org.mafagafogigante.dungeon.util.Percentage percentage24 = new org.mafagafogigante.dungeon.util.Percentage((double)57);
    itemPreset20.setVisibility(percentage24);
    creaturePreset4.setVisibility(percentage24);
    itemPreset0.setHitRate(percentage24);
    org.mafagafogigante.dungeon.stats.ExplorationStatistics explorationStatistics28 = new org.mafagafogigante.dungeon.stats.ExplorationStatistics();
    org.mafagafogigante.dungeon.game.Point point29 = null;
    org.mafagafogigante.dungeon.game.Id id30 = null;
    explorationStatistics28.createEntryIfNotExists(point29, id30);
    org.mafagafogigante.dungeon.game.Point point35 = new org.mafagafogigante.dungeon.game.Point(10, (int)'a', 0);
    java.lang.String[] str_array38 = new java.lang.String[] { "", "" };
    org.mafagafogigante.dungeon.util.Table table39 = new org.mafagafogigante.dungeon.util.Table(str_array38);
    boolean b40 = point35.equals((java.lang.Object)str_array38);
    org.mafagafogigante.dungeon.game.Id id41 = null;
    explorationStatistics28.addVisit(point35, id41);
    org.mafagafogigante.dungeon.stats.ExplorationStatistics explorationStatistics43 = new org.mafagafogigante.dungeon.stats.ExplorationStatistics();
    org.mafagafogigante.dungeon.game.Point point44 = null;
    org.mafagafogigante.dungeon.game.Id id45 = null;
    explorationStatistics43.createEntryIfNotExists(point44, id45);
    org.mafagafogigante.dungeon.game.Point point50 = new org.mafagafogigante.dungeon.game.Point((int)' ', (int)(byte)0, (int)(short)-1);
    org.mafagafogigante.dungeon.game.Id id51 = null;
    explorationStatistics43.addVisit(point50, id51);
    java.lang.String str53 = point50.toString();
    int i54 = point50.getZ();
    org.mafagafogigante.dungeon.game.Id id55 = null;
    explorationStatistics28.addVisit(point50, id55);
    boolean b57 = percentage24.equals((java.lang.Object)id55);
    java.lang.String str58 = percentage24.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(integrity1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(percentage2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(luminosity9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(id_array15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(integrity21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(luminosity22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str53 + "' != '" + "{32, 0, -1}"+ "'", str53.equals("{32, 0, -1}"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i54 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str58 + "' != '" + "100.00%"+ "'", str58.equals("100.00%"));

  }

  @Test
  public void test488() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test488"); }

    org.mafagafogigante.dungeon.entity.creatures.Creature creature1 = null;
    org.mafagafogigante.dungeon.entity.creatures.CreatureHealth creatureHealth2 = org.mafagafogigante.dungeon.entity.creatures.CreatureHealth.makeCreatureHealth(100, creature1);
    int i3 = creatureHealth2.getMaximum();
    int i4 = creatureHealth2.getCurrent();
    boolean b5 = creatureHealth2.isDead();
    int i6 = creatureHealth2.getCurrent();
    boolean b7 = creatureHealth2.isFull();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(creatureHealth2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);

  }

  @Test
  public void test489() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test489"); }

    org.mafagafogigante.dungeon.entity.items.ItemPreset itemPreset0 = new org.mafagafogigante.dungeon.entity.items.ItemPreset();
    org.mafagafogigante.dungeon.entity.Integrity integrity1 = itemPreset0.getIntegrity();
    org.mafagafogigante.dungeon.entity.Integrity integrity2 = null;
    itemPreset0.setIntegrity(integrity2);
    org.mafagafogigante.dungeon.util.Percentage percentage4 = itemPreset0.getVisibility();
    org.mafagafogigante.dungeon.entity.Integrity integrity5 = itemPreset0.getIntegrity();
    java.lang.String str6 = itemPreset0.getText();
    org.mafagafogigante.dungeon.game.Name name7 = null;
    itemPreset0.setName(name7);
    org.mafagafogigante.dungeon.entity.items.ItemPreset itemPreset9 = new org.mafagafogigante.dungeon.entity.items.ItemPreset();
    org.mafagafogigante.dungeon.entity.Integrity integrity10 = itemPreset9.getIntegrity();
    org.mafagafogigante.dungeon.entity.Integrity integrity11 = null;
    itemPreset9.setIntegrity(integrity11);
    org.mafagafogigante.dungeon.util.Percentage percentage13 = itemPreset9.getVisibility();
    java.lang.String str14 = itemPreset9.getType();
    itemPreset9.setIntegrityDecrementOnHit((int)(short)100);
    org.mafagafogigante.dungeon.util.Percentage percentage18 = new org.mafagafogigante.dungeon.util.Percentage((double)57);
    itemPreset9.setVisibility(percentage18);
    boolean b20 = org.mafagafogigante.dungeon.game.Random.roll(percentage18);
    itemPreset0.setVisibility(percentage18);
    long long22 = itemPreset0.getPutrefactionPeriod();
    org.mafagafogigante.dungeon.util.Percentage percentage23 = itemPreset0.getHitRate();
    int i24 = itemPreset0.getNutrition();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(integrity1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(percentage4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(integrity5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(integrity10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(percentage13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long22 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(percentage23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i24 == 0);

  }

  @Test
  public void test490() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test490"); }

    org.mafagafogigante.dungeon.entity.items.ItemPreset itemPreset3 = new org.mafagafogigante.dungeon.entity.items.ItemPreset();
    itemPreset3.setDrinkableHealing((int)(short)0);
    org.mafagafogigante.dungeon.util.Percentage percentage7 = new org.mafagafogigante.dungeon.util.Percentage((double)57);
    itemPreset3.setVisibility(percentage7);
    double d9 = org.mafagafogigante.dungeon.util.DungeonMath.weightedAverage((double)10.0f, 100.0d, percentage7);
    org.mafagafogigante.dungeon.entity.items.ItemPreset itemPreset10 = new org.mafagafogigante.dungeon.entity.items.ItemPreset();
    org.mafagafogigante.dungeon.entity.Integrity integrity11 = itemPreset10.getIntegrity();
    org.mafagafogigante.dungeon.entity.Integrity integrity12 = null;
    itemPreset10.setIntegrity(integrity12);
    org.mafagafogigante.dungeon.util.Percentage percentage14 = itemPreset10.getVisibility();
    java.lang.String str15 = itemPreset10.getType();
    org.mafagafogigante.dungeon.entity.items.Item.Tag tag16 = org.mafagafogigante.dungeon.entity.items.Item.Tag.REPAIRABLE;
    itemPreset10.addTag(tag16);
    org.mafagafogigante.dungeon.util.Percentage percentage19 = new org.mafagafogigante.dungeon.util.Percentage((double)'#');
    boolean b21 = percentage19.equals((java.lang.Object)10.0d);
    org.mafagafogigante.dungeon.entity.Luminosity luminosity22 = new org.mafagafogigante.dungeon.entity.Luminosity(percentage19);
    itemPreset10.setVisibility(percentage19);
    boolean b24 = percentage7.biggerThanOrEqualTo(percentage19);
    org.mafagafogigante.dungeon.entity.items.WeaponComponent weaponComponent26 = new org.mafagafogigante.dungeon.entity.items.WeaponComponent((int)(short)10, percentage19, 1);
    java.lang.String str27 = percentage19.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d9 == 100.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(integrity11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(percentage14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str15);
    org.junit.Assert.assertTrue("'" + tag16 + "' != '" + org.mafagafogigante.dungeon.entity.items.Item.Tag.REPAIRABLE + "'", tag16.equals(org.mafagafogigante.dungeon.entity.items.Item.Tag.REPAIRABLE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str27 + "' != '" + "100.00%"+ "'", str27.equals("100.00%"));

  }

  @Test
  public void test491() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test491"); }

    org.mafagafogigante.dungeon.entity.items.ItemPreset itemPreset0 = new org.mafagafogigante.dungeon.entity.items.ItemPreset();
    org.mafagafogigante.dungeon.entity.Weight weight1 = itemPreset0.getWeight();
    itemPreset0.setText("00:00:00");
    java.lang.String str4 = itemPreset0.getText();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(weight1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "00:00:00"+ "'", str4.equals("00:00:00"));

  }

  @Test
  public void test492() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test492"); }

    org.mafagafogigante.dungeon.gui.WritingSpecifications writingSpecifications2 = new org.mafagafogigante.dungeon.gui.WritingSpecifications(true, 82800);

  }

  @Test
  public void test493() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test493"); }

    boolean b1 = org.mafagafogigante.dungeon.commands.IssuedCommand.isValidSource("This book teaches nothing. Text: 0/1");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == true);

  }

  @Test
  public void test494() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test494"); }

    org.mafagafogigante.dungeon.date.Date date3 = new org.mafagafogigante.dungeon.date.Date(10L, 100L, 100L);
    org.mafagafogigante.dungeon.date.Date date7 = new org.mafagafogigante.dungeon.date.Date(10L, 100L, 100L);
    int i8 = date3.compareTo(date7);
    org.mafagafogigante.dungeon.game.PartOfDay partOfDay9 = org.mafagafogigante.dungeon.game.PartOfDay.getCorrespondingConstant(date3);
    java.lang.String[] str_array15 = new java.lang.String[] { "hi!", "visibilityCriteria=VisibilityCriteria{[]}", "visibilityCriteria=VisibilityCriteria{[]}", "Damaged", "hi!" };
    org.mafagafogigante.dungeon.util.Table table16 = new org.mafagafogigante.dungeon.util.Table(str_array15);
    java.util.List<org.mafagafogigante.dungeon.game.ColoredString> list_coloredString17 = table16.toColoredStringList();
    org.mafagafogigante.dungeon.game.ColoredString coloredString18 = org.mafagafogigante.dungeon.game.Random.select(list_coloredString17);
    boolean b19 = date3.equals((java.lang.Object)coloredString18);
    org.mafagafogigante.dungeon.date.Date date23 = new org.mafagafogigante.dungeon.date.Date(10L, 100L, 100L);
    org.mafagafogigante.dungeon.date.Date date27 = new org.mafagafogigante.dungeon.date.Date(10L, 100L, 100L);
    int i28 = date23.compareTo(date27);
    org.mafagafogigante.dungeon.game.PartOfDay partOfDay29 = org.mafagafogigante.dungeon.game.PartOfDay.getCorrespondingConstant(date23);
    long long30 = date23.getYear();
    org.mafagafogigante.dungeon.date.Date date34 = new org.mafagafogigante.dungeon.date.Date(10L, 100L, 100L);
    org.mafagafogigante.dungeon.date.Date date38 = new org.mafagafogigante.dungeon.date.Date(10L, 100L, 100L);
    int i39 = date34.compareTo(date38);
    long long40 = date34.getYear();
    int i41 = date23.compareTo(date34);
    org.mafagafogigante.dungeon.date.Duration duration42 = new org.mafagafogigante.dungeon.date.Duration(date3, date34);
    org.mafagafogigante.dungeon.date.Date date47 = new org.mafagafogigante.dungeon.date.Date(10L, 100L, 100L);
    org.mafagafogigante.dungeon.date.Date date51 = new org.mafagafogigante.dungeon.date.Date(10L, 100L, 100L);
    int i52 = date47.compareTo(date51);
    org.mafagafogigante.dungeon.game.PartOfDay partOfDay53 = org.mafagafogigante.dungeon.game.PartOfDay.getCorrespondingConstant(date47);
    long long54 = date47.getYear();
    org.mafagafogigante.dungeon.date.Date date58 = new org.mafagafogigante.dungeon.date.Date(10L, 100L, 100L);
    org.mafagafogigante.dungeon.date.Date date62 = new org.mafagafogigante.dungeon.date.Date(10L, 100L, 100L);
    int i63 = date58.compareTo(date62);
    long long64 = date58.getYear();
    int i65 = date47.compareTo(date58);
    org.mafagafogigante.dungeon.date.DungeonTimeUnit dungeonTimeUnit67 = org.mafagafogigante.dungeon.date.DungeonTimeUnit.HOUR;
    org.mafagafogigante.dungeon.date.Date date68 = date58.minus(35, dungeonTimeUnit67);
    org.mafagafogigante.dungeon.date.Date date69 = date34.plus(3, dungeonTimeUnit67);
    long long70 = date69.getMonth();
    org.mafagafogigante.dungeon.world.Weather weather71 = new org.mafagafogigante.dungeon.world.Weather(date69);
    org.mafagafogigante.dungeon.game.PartOfDay partOfDay72 = org.mafagafogigante.dungeon.game.PartOfDay.getCorrespondingConstant(date69);
    java.lang.String str73 = date69.toTimeString();
    long long74 = date69.getYear();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 0);
    org.junit.Assert.assertTrue("'" + partOfDay9 + "' != '" + org.mafagafogigante.dungeon.game.PartOfDay.MIDNIGHT + "'", partOfDay9.equals(org.mafagafogigante.dungeon.game.PartOfDay.MIDNIGHT));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_coloredString17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(coloredString18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 0);
    org.junit.Assert.assertTrue("'" + partOfDay29 + "' != '" + org.mafagafogigante.dungeon.game.PartOfDay.MIDNIGHT + "'", partOfDay29.equals(org.mafagafogigante.dungeon.game.PartOfDay.MIDNIGHT));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long30 == 10L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i39 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long40 == 10L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i41 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i52 == 0);
    org.junit.Assert.assertTrue("'" + partOfDay53 + "' != '" + org.mafagafogigante.dungeon.game.PartOfDay.MIDNIGHT + "'", partOfDay53.equals(org.mafagafogigante.dungeon.game.PartOfDay.MIDNIGHT));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long54 == 10L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i63 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long64 == 10L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i65 == 0);
    org.junit.Assert.assertTrue("'" + dungeonTimeUnit67 + "' != '" + org.mafagafogigante.dungeon.date.DungeonTimeUnit.HOUR + "'", dungeonTimeUnit67.equals(org.mafagafogigante.dungeon.date.DungeonTimeUnit.HOUR));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(date68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(date69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long70 == 10L);
    org.junit.Assert.assertTrue("'" + partOfDay72 + "' != '" + org.mafagafogigante.dungeon.game.PartOfDay.NIGHT + "'", partOfDay72.equals(org.mafagafogigante.dungeon.game.PartOfDay.NIGHT));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str73 + "' != '" + "03:00:00"+ "'", str73.equals("03:00:00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long74 == 10L);

  }

  @Test
  public void test495() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test495"); }

    org.mafagafogigante.dungeon.entity.items.ItemPreset itemPreset0 = new org.mafagafogigante.dungeon.entity.items.ItemPreset();
    org.mafagafogigante.dungeon.entity.Integrity integrity1 = itemPreset0.getIntegrity();
    org.mafagafogigante.dungeon.entity.Integrity integrity2 = null;
    itemPreset0.setIntegrity(integrity2);
    org.mafagafogigante.dungeon.util.Percentage percentage4 = itemPreset0.getVisibility();
    java.lang.String str5 = itemPreset0.getType();
    itemPreset0.setIntegrityDecrementOnHit((int)(short)100);
    org.mafagafogigante.dungeon.util.Percentage percentage9 = new org.mafagafogigante.dungeon.util.Percentage((double)57);
    itemPreset0.setVisibility(percentage9);
    org.mafagafogigante.dungeon.game.Id id11 = null;
    itemPreset0.setId(id11);
    itemPreset0.setIntegrityDecrementOnEat((-1));
    org.mafagafogigante.dungeon.util.Percentage percentage15 = itemPreset0.getHitRate();
    int i16 = itemPreset0.getDrinkableDoses();
    org.mafagafogigante.dungeon.entity.items.ItemPreset itemPreset17 = new org.mafagafogigante.dungeon.entity.items.ItemPreset();
    itemPreset17.setPutrefactionPeriod((long)32);
    org.mafagafogigante.dungeon.entity.items.ItemPreset itemPreset20 = new org.mafagafogigante.dungeon.entity.items.ItemPreset();
    org.mafagafogigante.dungeon.entity.Integrity integrity21 = itemPreset20.getIntegrity();
    org.mafagafogigante.dungeon.entity.Integrity integrity22 = null;
    itemPreset20.setIntegrity(integrity22);
    org.mafagafogigante.dungeon.util.Percentage percentage24 = itemPreset20.getVisibility();
    java.lang.String str25 = itemPreset20.getType();
    itemPreset20.setIntegrityDecrementOnHit((int)(short)100);
    org.mafagafogigante.dungeon.util.Percentage percentage29 = new org.mafagafogigante.dungeon.util.Percentage((double)57);
    itemPreset20.setVisibility(percentage29);
    org.mafagafogigante.dungeon.game.Id id31 = null;
    itemPreset20.setId(id31);
    itemPreset20.setPutrefactionPeriod((long)(short)1);
    org.mafagafogigante.dungeon.entity.items.Item.Tag tag35 = org.mafagafogigante.dungeon.entity.items.Item.Tag.DECOMPOSES;
    boolean b36 = itemPreset20.hasTag(tag35);
    boolean b37 = itemPreset17.hasTag(tag35);
    itemPreset0.addTag(tag35);
    itemPreset0.setText("BattleStatisticsRequirement{query=BattleStatisticsQuery{id=null, type='null', causeOfDeath=null, partOfDay=null}, count=100}");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(integrity1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(percentage4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(percentage15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(integrity21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(percentage24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str25);
    org.junit.Assert.assertTrue("'" + tag35 + "' != '" + org.mafagafogigante.dungeon.entity.items.Item.Tag.DECOMPOSES + "'", tag35.equals(org.mafagafogigante.dungeon.entity.items.Item.Tag.DECOMPOSES));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == false);

  }

  @Test
  public void test496() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test496"); }

    org.mafagafogigante.dungeon.entity.Integrity integrity2 = new org.mafagafogigante.dungeon.entity.Integrity(1, 0);
    boolean b3 = integrity2.isMaximum();
    org.mafagafogigante.dungeon.entity.items.Item item4 = null;
    org.mafagafogigante.dungeon.entity.items.ItemIntegrity itemIntegrity5 = org.mafagafogigante.dungeon.entity.items.ItemIntegrity.makeItemIntegrity(integrity2, item4);
    org.mafagafogigante.dungeon.util.Percentage percentage6 = itemIntegrity5.toPercentage();
    boolean b7 = itemIntegrity5.isBroken();
    java.lang.String str8 = itemIntegrity5.toString();
    boolean b9 = itemIntegrity5.isPerfect();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(itemIntegrity5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(percentage6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "ItemIntegrity{integrity=0/1, item=null}"+ "'", str8.equals("ItemIntegrity{integrity=0/1, item=null}"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);

  }

  @Test
  public void test497() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test497"); }

    org.mafagafogigante.dungeon.game.BlockedEntrances blockedEntrances0 = new org.mafagafogigante.dungeon.game.BlockedEntrances();
    org.mafagafogigante.dungeon.game.Direction direction1 = org.mafagafogigante.dungeon.game.Direction.SOUTH;
    boolean b2 = blockedEntrances0.isBlocked(direction1);
    java.lang.String str3 = blockedEntrances0.toString();
    org.junit.Assert.assertTrue("'" + direction1 + "' != '" + org.mafagafogigante.dungeon.game.Direction.SOUTH + "'", direction1.equals(org.mafagafogigante.dungeon.game.Direction.SOUTH));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "None"+ "'", str3.equals("None"));

  }

  @Test
  public void test498() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test498"); }

    org.mafagafogigante.dungeon.date.Date date3 = new org.mafagafogigante.dungeon.date.Date(10L, 100L, 100L);
    org.mafagafogigante.dungeon.date.Date date7 = new org.mafagafogigante.dungeon.date.Date(10L, 100L, 100L);
    int i8 = date3.compareTo(date7);
    long long9 = date7.getDay();
    org.mafagafogigante.dungeon.game.PartOfDay partOfDay10 = org.mafagafogigante.dungeon.game.PartOfDay.NIGHT;
    int i11 = org.mafagafogigante.dungeon.game.PartOfDay.getSecondsToNext(date7, partOfDay10);
    long long12 = date7.getYear();
    long long13 = date7.getDay();
    org.mafagafogigante.dungeon.date.Date date18 = new org.mafagafogigante.dungeon.date.Date(10L, 100L, 100L);
    org.mafagafogigante.dungeon.date.Date date22 = new org.mafagafogigante.dungeon.date.Date(10L, 100L, 100L);
    int i23 = date18.compareTo(date22);
    java.lang.String str24 = date18.toTimeString();
    org.mafagafogigante.dungeon.date.Date date29 = new org.mafagafogigante.dungeon.date.Date(10L, 100L, 100L);
    org.mafagafogigante.dungeon.date.Date date33 = new org.mafagafogigante.dungeon.date.Date(10L, 100L, 100L);
    int i34 = date29.compareTo(date33);
    org.mafagafogigante.dungeon.game.PartOfDay partOfDay35 = org.mafagafogigante.dungeon.game.PartOfDay.getCorrespondingConstant(date29);
    long long36 = date29.getYear();
    org.mafagafogigante.dungeon.date.Date date40 = new org.mafagafogigante.dungeon.date.Date(10L, 100L, 100L);
    org.mafagafogigante.dungeon.date.Date date44 = new org.mafagafogigante.dungeon.date.Date(10L, 100L, 100L);
    int i45 = date40.compareTo(date44);
    long long46 = date40.getYear();
    int i47 = date29.compareTo(date40);
    org.mafagafogigante.dungeon.date.DungeonTimeUnit dungeonTimeUnit49 = org.mafagafogigante.dungeon.date.DungeonTimeUnit.HOUR;
    org.mafagafogigante.dungeon.date.Date date50 = date40.minus(35, dungeonTimeUnit49);
    org.mafagafogigante.dungeon.date.Date date51 = date18.plus((int)'a', dungeonTimeUnit49);
    org.mafagafogigante.dungeon.date.Date date52 = date7.plus(205, dungeonTimeUnit49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long9 == 10L);
    org.junit.Assert.assertTrue("'" + partOfDay10 + "' != '" + org.mafagafogigante.dungeon.game.PartOfDay.NIGHT + "'", partOfDay10.equals(org.mafagafogigante.dungeon.game.PartOfDay.NIGHT));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 3600);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long12 == 10L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long13 == 10L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i23 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str24 + "' != '" + "00:00:00"+ "'", str24.equals("00:00:00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i34 == 0);
    org.junit.Assert.assertTrue("'" + partOfDay35 + "' != '" + org.mafagafogigante.dungeon.game.PartOfDay.MIDNIGHT + "'", partOfDay35.equals(org.mafagafogigante.dungeon.game.PartOfDay.MIDNIGHT));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long36 == 10L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i45 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long46 == 10L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i47 == 0);
    org.junit.Assert.assertTrue("'" + dungeonTimeUnit49 + "' != '" + org.mafagafogigante.dungeon.date.DungeonTimeUnit.HOUR + "'", dungeonTimeUnit49.equals(org.mafagafogigante.dungeon.date.DungeonTimeUnit.HOUR));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(date50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(date51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(date52);

  }

  @Test
  public void test499() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test499"); }

    org.mafagafogigante.dungeon.commands.CommandHistory commandHistory0 = new org.mafagafogigante.dungeon.commands.CommandHistory();
    java.lang.String str2 = commandHistory0.getLastSimilarCommand("East");
    org.mafagafogigante.dungeon.commands.CommandHistory.Cursor cursor3 = commandHistory0.getCursor();
    org.mafagafogigante.dungeon.commands.IssuedCommand issuedCommand5 = new org.mafagafogigante.dungeon.commands.IssuedCommand("100");
    commandHistory0.addCommand(issuedCommand5);
    org.mafagafogigante.dungeon.commands.IssuedCommandEvaluation issuedCommandEvaluation7 = org.mafagafogigante.dungeon.commands.IssuedCommandProcessor.evaluateIssuedCommand(issuedCommand5);
    java.util.List<java.lang.String> list_str8 = issuedCommand5.getTokens();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(cursor3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(issuedCommandEvaluation7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_str8);

  }

  @Test
  public void test500() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest2.test500"); }

    org.mafagafogigante.dungeon.entity.creatures.CreaturePreset creaturePreset0 = new org.mafagafogigante.dungeon.entity.creatures.CreaturePreset();
    org.mafagafogigante.dungeon.entity.Luminosity luminosity1 = creaturePreset0.getLuminosity();
    creaturePreset0.setInventoryItemLimit(43200);
    creaturePreset0.setType("User: Nicholas\nTime: 15:42:12\nDate: 2017-04-09\nJava: Java version 1.8.0_121 by Oracle Corporation\nHeap: Using 41.5 MiB out of the allocated 154.5 MiB\nOS: Windows 10 (amd64) 10.0");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(luminosity1);

  }

}
